
f446_usb_audio.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085bc  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000138  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088c4  080088c4  000201a8  2**0
                  CONTENTS
  4 .ARM          00000008  080088c4  080088c4  000188c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088cc  080088cc  000201a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088cc  080088cc  000188cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080088d0  080088d0  000188d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a8  20000000  080088d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025f0  200001a8  08008a7c  000201a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20002798  08008a7c  00022798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bed  00000000  00000000  000201d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000035a3  00000000  00000000  00031dc5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001110  00000000  00000000  00035368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f78  00000000  00000000  00036478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027f37  00000000  00000000  000373f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013efc  00000000  00000000  0005f327  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000de145  00000000  00000000  00073223  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00151368  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d18  00000000  00000000  001513b8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001a8 	.word	0x200001a8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08008774 	.word	0x08008774

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ac 	.word	0x200001ac
 800020c:	08008774 	.word	0x08008774

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b974 	b.w	80005b0 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	4604      	mov	r4, r0
 80002e8:	468e      	mov	lr, r1
 80002ea:	2b00      	cmp	r3, #0
 80002ec:	d14d      	bne.n	800038a <__udivmoddi4+0xaa>
 80002ee:	428a      	cmp	r2, r1
 80002f0:	4694      	mov	ip, r2
 80002f2:	d969      	bls.n	80003c8 <__udivmoddi4+0xe8>
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	b152      	cbz	r2, 8000310 <__udivmoddi4+0x30>
 80002fa:	fa01 f302 	lsl.w	r3, r1, r2
 80002fe:	f1c2 0120 	rsb	r1, r2, #32
 8000302:	fa20 f101 	lsr.w	r1, r0, r1
 8000306:	fa0c fc02 	lsl.w	ip, ip, r2
 800030a:	ea41 0e03 	orr.w	lr, r1, r3
 800030e:	4094      	lsls	r4, r2
 8000310:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000314:	0c21      	lsrs	r1, r4, #16
 8000316:	fbbe f6f8 	udiv	r6, lr, r8
 800031a:	fa1f f78c 	uxth.w	r7, ip
 800031e:	fb08 e316 	mls	r3, r8, r6, lr
 8000322:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000326:	fb06 f107 	mul.w	r1, r6, r7
 800032a:	4299      	cmp	r1, r3
 800032c:	d90a      	bls.n	8000344 <__udivmoddi4+0x64>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f106 30ff 	add.w	r0, r6, #4294967295
 8000336:	f080 811f 	bcs.w	8000578 <__udivmoddi4+0x298>
 800033a:	4299      	cmp	r1, r3
 800033c:	f240 811c 	bls.w	8000578 <__udivmoddi4+0x298>
 8000340:	3e02      	subs	r6, #2
 8000342:	4463      	add	r3, ip
 8000344:	1a5b      	subs	r3, r3, r1
 8000346:	b2a4      	uxth	r4, r4
 8000348:	fbb3 f0f8 	udiv	r0, r3, r8
 800034c:	fb08 3310 	mls	r3, r8, r0, r3
 8000350:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000354:	fb00 f707 	mul.w	r7, r0, r7
 8000358:	42a7      	cmp	r7, r4
 800035a:	d90a      	bls.n	8000372 <__udivmoddi4+0x92>
 800035c:	eb1c 0404 	adds.w	r4, ip, r4
 8000360:	f100 33ff 	add.w	r3, r0, #4294967295
 8000364:	f080 810a 	bcs.w	800057c <__udivmoddi4+0x29c>
 8000368:	42a7      	cmp	r7, r4
 800036a:	f240 8107 	bls.w	800057c <__udivmoddi4+0x29c>
 800036e:	4464      	add	r4, ip
 8000370:	3802      	subs	r0, #2
 8000372:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000376:	1be4      	subs	r4, r4, r7
 8000378:	2600      	movs	r6, #0
 800037a:	b11d      	cbz	r5, 8000384 <__udivmoddi4+0xa4>
 800037c:	40d4      	lsrs	r4, r2
 800037e:	2300      	movs	r3, #0
 8000380:	e9c5 4300 	strd	r4, r3, [r5]
 8000384:	4631      	mov	r1, r6
 8000386:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800038a:	428b      	cmp	r3, r1
 800038c:	d909      	bls.n	80003a2 <__udivmoddi4+0xc2>
 800038e:	2d00      	cmp	r5, #0
 8000390:	f000 80ef 	beq.w	8000572 <__udivmoddi4+0x292>
 8000394:	2600      	movs	r6, #0
 8000396:	e9c5 0100 	strd	r0, r1, [r5]
 800039a:	4630      	mov	r0, r6
 800039c:	4631      	mov	r1, r6
 800039e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003a2:	fab3 f683 	clz	r6, r3
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	d14a      	bne.n	8000440 <__udivmoddi4+0x160>
 80003aa:	428b      	cmp	r3, r1
 80003ac:	d302      	bcc.n	80003b4 <__udivmoddi4+0xd4>
 80003ae:	4282      	cmp	r2, r0
 80003b0:	f200 80f9 	bhi.w	80005a6 <__udivmoddi4+0x2c6>
 80003b4:	1a84      	subs	r4, r0, r2
 80003b6:	eb61 0303 	sbc.w	r3, r1, r3
 80003ba:	2001      	movs	r0, #1
 80003bc:	469e      	mov	lr, r3
 80003be:	2d00      	cmp	r5, #0
 80003c0:	d0e0      	beq.n	8000384 <__udivmoddi4+0xa4>
 80003c2:	e9c5 4e00 	strd	r4, lr, [r5]
 80003c6:	e7dd      	b.n	8000384 <__udivmoddi4+0xa4>
 80003c8:	b902      	cbnz	r2, 80003cc <__udivmoddi4+0xec>
 80003ca:	deff      	udf	#255	; 0xff
 80003cc:	fab2 f282 	clz	r2, r2
 80003d0:	2a00      	cmp	r2, #0
 80003d2:	f040 8092 	bne.w	80004fa <__udivmoddi4+0x21a>
 80003d6:	eba1 010c 	sub.w	r1, r1, ip
 80003da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003de:	fa1f fe8c 	uxth.w	lr, ip
 80003e2:	2601      	movs	r6, #1
 80003e4:	0c20      	lsrs	r0, r4, #16
 80003e6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ea:	fb07 1113 	mls	r1, r7, r3, r1
 80003ee:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003f2:	fb0e f003 	mul.w	r0, lr, r3
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x12c>
 80003fa:	eb1c 0101 	adds.w	r1, ip, r1
 80003fe:	f103 38ff 	add.w	r8, r3, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x12a>
 8000404:	4288      	cmp	r0, r1
 8000406:	f200 80cb 	bhi.w	80005a0 <__udivmoddi4+0x2c0>
 800040a:	4643      	mov	r3, r8
 800040c:	1a09      	subs	r1, r1, r0
 800040e:	b2a4      	uxth	r4, r4
 8000410:	fbb1 f0f7 	udiv	r0, r1, r7
 8000414:	fb07 1110 	mls	r1, r7, r0, r1
 8000418:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800041c:	fb0e fe00 	mul.w	lr, lr, r0
 8000420:	45a6      	cmp	lr, r4
 8000422:	d908      	bls.n	8000436 <__udivmoddi4+0x156>
 8000424:	eb1c 0404 	adds.w	r4, ip, r4
 8000428:	f100 31ff 	add.w	r1, r0, #4294967295
 800042c:	d202      	bcs.n	8000434 <__udivmoddi4+0x154>
 800042e:	45a6      	cmp	lr, r4
 8000430:	f200 80bb 	bhi.w	80005aa <__udivmoddi4+0x2ca>
 8000434:	4608      	mov	r0, r1
 8000436:	eba4 040e 	sub.w	r4, r4, lr
 800043a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800043e:	e79c      	b.n	800037a <__udivmoddi4+0x9a>
 8000440:	f1c6 0720 	rsb	r7, r6, #32
 8000444:	40b3      	lsls	r3, r6
 8000446:	fa22 fc07 	lsr.w	ip, r2, r7
 800044a:	ea4c 0c03 	orr.w	ip, ip, r3
 800044e:	fa20 f407 	lsr.w	r4, r0, r7
 8000452:	fa01 f306 	lsl.w	r3, r1, r6
 8000456:	431c      	orrs	r4, r3
 8000458:	40f9      	lsrs	r1, r7
 800045a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800045e:	fa00 f306 	lsl.w	r3, r0, r6
 8000462:	fbb1 f8f9 	udiv	r8, r1, r9
 8000466:	0c20      	lsrs	r0, r4, #16
 8000468:	fa1f fe8c 	uxth.w	lr, ip
 800046c:	fb09 1118 	mls	r1, r9, r8, r1
 8000470:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000474:	fb08 f00e 	mul.w	r0, r8, lr
 8000478:	4288      	cmp	r0, r1
 800047a:	fa02 f206 	lsl.w	r2, r2, r6
 800047e:	d90b      	bls.n	8000498 <__udivmoddi4+0x1b8>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f108 3aff 	add.w	sl, r8, #4294967295
 8000488:	f080 8088 	bcs.w	800059c <__udivmoddi4+0x2bc>
 800048c:	4288      	cmp	r0, r1
 800048e:	f240 8085 	bls.w	800059c <__udivmoddi4+0x2bc>
 8000492:	f1a8 0802 	sub.w	r8, r8, #2
 8000496:	4461      	add	r1, ip
 8000498:	1a09      	subs	r1, r1, r0
 800049a:	b2a4      	uxth	r4, r4
 800049c:	fbb1 f0f9 	udiv	r0, r1, r9
 80004a0:	fb09 1110 	mls	r1, r9, r0, r1
 80004a4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80004a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80004ac:	458e      	cmp	lr, r1
 80004ae:	d908      	bls.n	80004c2 <__udivmoddi4+0x1e2>
 80004b0:	eb1c 0101 	adds.w	r1, ip, r1
 80004b4:	f100 34ff 	add.w	r4, r0, #4294967295
 80004b8:	d26c      	bcs.n	8000594 <__udivmoddi4+0x2b4>
 80004ba:	458e      	cmp	lr, r1
 80004bc:	d96a      	bls.n	8000594 <__udivmoddi4+0x2b4>
 80004be:	3802      	subs	r0, #2
 80004c0:	4461      	add	r1, ip
 80004c2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80004c6:	fba0 9402 	umull	r9, r4, r0, r2
 80004ca:	eba1 010e 	sub.w	r1, r1, lr
 80004ce:	42a1      	cmp	r1, r4
 80004d0:	46c8      	mov	r8, r9
 80004d2:	46a6      	mov	lr, r4
 80004d4:	d356      	bcc.n	8000584 <__udivmoddi4+0x2a4>
 80004d6:	d053      	beq.n	8000580 <__udivmoddi4+0x2a0>
 80004d8:	b15d      	cbz	r5, 80004f2 <__udivmoddi4+0x212>
 80004da:	ebb3 0208 	subs.w	r2, r3, r8
 80004de:	eb61 010e 	sbc.w	r1, r1, lr
 80004e2:	fa01 f707 	lsl.w	r7, r1, r7
 80004e6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ea:	40f1      	lsrs	r1, r6
 80004ec:	431f      	orrs	r7, r3
 80004ee:	e9c5 7100 	strd	r7, r1, [r5]
 80004f2:	2600      	movs	r6, #0
 80004f4:	4631      	mov	r1, r6
 80004f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004fa:	f1c2 0320 	rsb	r3, r2, #32
 80004fe:	40d8      	lsrs	r0, r3
 8000500:	fa0c fc02 	lsl.w	ip, ip, r2
 8000504:	fa21 f303 	lsr.w	r3, r1, r3
 8000508:	4091      	lsls	r1, r2
 800050a:	4301      	orrs	r1, r0
 800050c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000510:	fa1f fe8c 	uxth.w	lr, ip
 8000514:	fbb3 f0f7 	udiv	r0, r3, r7
 8000518:	fb07 3610 	mls	r6, r7, r0, r3
 800051c:	0c0b      	lsrs	r3, r1, #16
 800051e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000522:	fb00 f60e 	mul.w	r6, r0, lr
 8000526:	429e      	cmp	r6, r3
 8000528:	fa04 f402 	lsl.w	r4, r4, r2
 800052c:	d908      	bls.n	8000540 <__udivmoddi4+0x260>
 800052e:	eb1c 0303 	adds.w	r3, ip, r3
 8000532:	f100 38ff 	add.w	r8, r0, #4294967295
 8000536:	d22f      	bcs.n	8000598 <__udivmoddi4+0x2b8>
 8000538:	429e      	cmp	r6, r3
 800053a:	d92d      	bls.n	8000598 <__udivmoddi4+0x2b8>
 800053c:	3802      	subs	r0, #2
 800053e:	4463      	add	r3, ip
 8000540:	1b9b      	subs	r3, r3, r6
 8000542:	b289      	uxth	r1, r1
 8000544:	fbb3 f6f7 	udiv	r6, r3, r7
 8000548:	fb07 3316 	mls	r3, r7, r6, r3
 800054c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000550:	fb06 f30e 	mul.w	r3, r6, lr
 8000554:	428b      	cmp	r3, r1
 8000556:	d908      	bls.n	800056a <__udivmoddi4+0x28a>
 8000558:	eb1c 0101 	adds.w	r1, ip, r1
 800055c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000560:	d216      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000562:	428b      	cmp	r3, r1
 8000564:	d914      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000566:	3e02      	subs	r6, #2
 8000568:	4461      	add	r1, ip
 800056a:	1ac9      	subs	r1, r1, r3
 800056c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000570:	e738      	b.n	80003e4 <__udivmoddi4+0x104>
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e705      	b.n	8000384 <__udivmoddi4+0xa4>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e3      	b.n	8000344 <__udivmoddi4+0x64>
 800057c:	4618      	mov	r0, r3
 800057e:	e6f8      	b.n	8000372 <__udivmoddi4+0x92>
 8000580:	454b      	cmp	r3, r9
 8000582:	d2a9      	bcs.n	80004d8 <__udivmoddi4+0x1f8>
 8000584:	ebb9 0802 	subs.w	r8, r9, r2
 8000588:	eb64 0e0c 	sbc.w	lr, r4, ip
 800058c:	3801      	subs	r0, #1
 800058e:	e7a3      	b.n	80004d8 <__udivmoddi4+0x1f8>
 8000590:	4646      	mov	r6, r8
 8000592:	e7ea      	b.n	800056a <__udivmoddi4+0x28a>
 8000594:	4620      	mov	r0, r4
 8000596:	e794      	b.n	80004c2 <__udivmoddi4+0x1e2>
 8000598:	4640      	mov	r0, r8
 800059a:	e7d1      	b.n	8000540 <__udivmoddi4+0x260>
 800059c:	46d0      	mov	r8, sl
 800059e:	e77b      	b.n	8000498 <__udivmoddi4+0x1b8>
 80005a0:	3b02      	subs	r3, #2
 80005a2:	4461      	add	r1, ip
 80005a4:	e732      	b.n	800040c <__udivmoddi4+0x12c>
 80005a6:	4630      	mov	r0, r6
 80005a8:	e709      	b.n	80003be <__udivmoddi4+0xde>
 80005aa:	4464      	add	r4, ip
 80005ac:	3802      	subs	r0, #2
 80005ae:	e742      	b.n	8000436 <__udivmoddi4+0x156>

080005b0 <__aeabi_idiv0>:
 80005b0:	4770      	bx	lr
 80005b2:	bf00      	nop

080005b4 <LL_RCC_HSE_Enable>:
  * @brief  Enable HSE crystal oscillator (HSE ON)
  * @rmtoll CR           HSEON         LL_RCC_HSE_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_HSE_Enable(void)
{
 80005b4:	b480      	push	{r7}
 80005b6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_HSEON);
 80005b8:	4b05      	ldr	r3, [pc, #20]	; (80005d0 <LL_RCC_HSE_Enable+0x1c>)
 80005ba:	681b      	ldr	r3, [r3, #0]
 80005bc:	4a04      	ldr	r2, [pc, #16]	; (80005d0 <LL_RCC_HSE_Enable+0x1c>)
 80005be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80005c2:	6013      	str	r3, [r2, #0]
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr
 80005ce:	bf00      	nop
 80005d0:	40023800 	.word	0x40023800

080005d4 <LL_RCC_HSE_IsReady>:
  * @brief  Check if HSE oscillator Ready
  * @rmtoll CR           HSERDY        LL_RCC_HSE_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_HSE_IsReady(void)
{
 80005d4:	b480      	push	{r7}
 80005d6:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_HSERDY) == (RCC_CR_HSERDY));
 80005d8:	4b07      	ldr	r3, [pc, #28]	; (80005f8 <LL_RCC_HSE_IsReady+0x24>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005e0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80005e4:	bf0c      	ite	eq
 80005e6:	2301      	moveq	r3, #1
 80005e8:	2300      	movne	r3, #0
 80005ea:	b2db      	uxtb	r3, r3
}
 80005ec:	4618      	mov	r0, r3
 80005ee:	46bd      	mov	sp, r7
 80005f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f4:	4770      	bx	lr
 80005f6:	bf00      	nop
 80005f8:	40023800 	.word	0x40023800

080005fc <LL_RCC_SetSysClkSource>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetSysClkSource(uint32_t Source)
{
 80005fc:	b480      	push	{r7}
 80005fe:	b083      	sub	sp, #12
 8000600:	af00      	add	r7, sp, #0
 8000602:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, Source);
 8000604:	4b06      	ldr	r3, [pc, #24]	; (8000620 <LL_RCC_SetSysClkSource+0x24>)
 8000606:	689b      	ldr	r3, [r3, #8]
 8000608:	f023 0203 	bic.w	r2, r3, #3
 800060c:	4904      	ldr	r1, [pc, #16]	; (8000620 <LL_RCC_SetSysClkSource+0x24>)
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	4313      	orrs	r3, r2
 8000612:	608b      	str	r3, [r1, #8]
}
 8000614:	bf00      	nop
 8000616:	370c      	adds	r7, #12
 8000618:	46bd      	mov	sp, r7
 800061a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061e:	4770      	bx	lr
 8000620:	40023800 	.word	0x40023800

08000624 <LL_RCC_GetSysClkSource>:
  *         @arg @ref LL_RCC_SYS_CLKSOURCE_STATUS_PLLR (*)
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_GetSysClkSource(void)
{
 8000624:	b480      	push	{r7}
 8000626:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8000628:	4b04      	ldr	r3, [pc, #16]	; (800063c <LL_RCC_GetSysClkSource+0x18>)
 800062a:	689b      	ldr	r3, [r3, #8]
 800062c:	f003 030c 	and.w	r3, r3, #12
}
 8000630:	4618      	mov	r0, r3
 8000632:	46bd      	mov	sp, r7
 8000634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000638:	4770      	bx	lr
 800063a:	bf00      	nop
 800063c:	40023800 	.word	0x40023800

08000640 <LL_RCC_SetAHBPrescaler>:
  *         @arg @ref LL_RCC_SYSCLK_DIV_256
  *         @arg @ref LL_RCC_SYSCLK_DIV_512
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAHBPrescaler(uint32_t Prescaler)
{
 8000640:	b480      	push	{r7}
 8000642:	b083      	sub	sp, #12
 8000644:	af00      	add	r7, sp, #0
 8000646:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, Prescaler);
 8000648:	4b06      	ldr	r3, [pc, #24]	; (8000664 <LL_RCC_SetAHBPrescaler+0x24>)
 800064a:	689b      	ldr	r3, [r3, #8]
 800064c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000650:	4904      	ldr	r1, [pc, #16]	; (8000664 <LL_RCC_SetAHBPrescaler+0x24>)
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	4313      	orrs	r3, r2
 8000656:	608b      	str	r3, [r1, #8]
}
 8000658:	bf00      	nop
 800065a:	370c      	adds	r7, #12
 800065c:	46bd      	mov	sp, r7
 800065e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000662:	4770      	bx	lr
 8000664:	40023800 	.word	0x40023800

08000668 <LL_RCC_SetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB1Prescaler(uint32_t Prescaler)
{
 8000668:	b480      	push	{r7}
 800066a:	b083      	sub	sp, #12
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, Prescaler);
 8000670:	4b06      	ldr	r3, [pc, #24]	; (800068c <LL_RCC_SetAPB1Prescaler+0x24>)
 8000672:	689b      	ldr	r3, [r3, #8]
 8000674:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8000678:	4904      	ldr	r1, [pc, #16]	; (800068c <LL_RCC_SetAPB1Prescaler+0x24>)
 800067a:	687b      	ldr	r3, [r7, #4]
 800067c:	4313      	orrs	r3, r2
 800067e:	608b      	str	r3, [r1, #8]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	40023800 	.word	0x40023800

08000690 <LL_RCC_SetAPB2Prescaler>:
  *         @arg @ref LL_RCC_APB2_DIV_8
  *         @arg @ref LL_RCC_APB2_DIV_16
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetAPB2Prescaler(uint32_t Prescaler)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, Prescaler);
 8000698:	4b06      	ldr	r3, [pc, #24]	; (80006b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 800069a:	689b      	ldr	r3, [r3, #8]
 800069c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80006a0:	4904      	ldr	r1, [pc, #16]	; (80006b4 <LL_RCC_SetAPB2Prescaler+0x24>)
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	4313      	orrs	r3, r2
 80006a6:	608b      	str	r3, [r1, #8]
}
 80006a8:	bf00      	nop
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	40023800 	.word	0x40023800

080006b8 <LL_RCC_ConfigMCO>:
  *         @arg @ref LL_RCC_MCO2_DIV_4
  *         @arg @ref LL_RCC_MCO2_DIV_5
  * @retval None
  */
__STATIC_INLINE void LL_RCC_ConfigMCO(uint32_t MCOxSource, uint32_t MCOxPrescaler)
{
 80006b8:	b480      	push	{r7}
 80006ba:	b083      	sub	sp, #12
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
 80006c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(RCC->CFGR, (MCOxSource & 0xFFFF0000U) | (MCOxPrescaler & 0xFFFF0000U),  (MCOxSource << 16U) | (MCOxPrescaler << 16U));
 80006c2:	4b0b      	ldr	r3, [pc, #44]	; (80006f0 <LL_RCC_ConfigMCO+0x38>)
 80006c4:	689a      	ldr	r2, [r3, #8]
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	683b      	ldr	r3, [r7, #0]
 80006ca:	430b      	orrs	r3, r1
 80006cc:	0c1b      	lsrs	r3, r3, #16
 80006ce:	041b      	lsls	r3, r3, #16
 80006d0:	43db      	mvns	r3, r3
 80006d2:	401a      	ands	r2, r3
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	0419      	lsls	r1, r3, #16
 80006d8:	683b      	ldr	r3, [r7, #0]
 80006da:	041b      	lsls	r3, r3, #16
 80006dc:	430b      	orrs	r3, r1
 80006de:	4904      	ldr	r1, [pc, #16]	; (80006f0 <LL_RCC_ConfigMCO+0x38>)
 80006e0:	4313      	orrs	r3, r2
 80006e2:	608b      	str	r3, [r1, #8]
}
 80006e4:	bf00      	nop
 80006e6:	370c      	adds	r7, #12
 80006e8:	46bd      	mov	sp, r7
 80006ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ee:	4770      	bx	lr
 80006f0:	40023800 	.word	0x40023800

080006f4 <LL_RCC_SetTIMPrescaler>:
  *         @arg @ref LL_RCC_TIM_PRESCALER_TWICE
  *         @arg @ref LL_RCC_TIM_PRESCALER_FOUR_TIMES
  * @retval None
  */
__STATIC_INLINE void LL_RCC_SetTIMPrescaler(uint32_t Prescaler)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
  MODIFY_REG(RCC->DCKCFGR, RCC_DCKCFGR_TIMPRE, Prescaler);
 80006fc:	4b07      	ldr	r3, [pc, #28]	; (800071c <LL_RCC_SetTIMPrescaler+0x28>)
 80006fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8000702:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8000706:	4905      	ldr	r1, [pc, #20]	; (800071c <LL_RCC_SetTIMPrescaler+0x28>)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	4313      	orrs	r3, r2
 800070c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
}
 8000710:	bf00      	nop
 8000712:	370c      	adds	r7, #12
 8000714:	46bd      	mov	sp, r7
 8000716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071a:	4770      	bx	lr
 800071c:	40023800 	.word	0x40023800

08000720 <LL_RCC_PLL_Enable>:
  * @brief  Enable PLL
  * @rmtoll CR           PLLON         LL_RCC_PLL_Enable
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_Enable(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_PLLON);
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <LL_RCC_PLL_Enable+0x1c>)
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	4a04      	ldr	r2, [pc, #16]	; (800073c <LL_RCC_PLL_Enable+0x1c>)
 800072a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800072e:	6013      	str	r3, [r2, #0]
}
 8000730:	bf00      	nop
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	40023800 	.word	0x40023800

08000740 <LL_RCC_PLL_IsReady>:
  * @brief  Check if PLL Ready
  * @rmtoll CR           PLLRDY        LL_RCC_PLL_IsReady
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_IsReady(void)
{
 8000740:	b480      	push	{r7}
 8000742:	af00      	add	r7, sp, #0
  return (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == (RCC_CR_PLLRDY));
 8000744:	4b07      	ldr	r3, [pc, #28]	; (8000764 <LL_RCC_PLL_IsReady+0x24>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800074c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8000750:	bf0c      	ite	eq
 8000752:	2301      	moveq	r3, #1
 8000754:	2300      	movne	r3, #0
 8000756:	b2db      	uxtb	r3, r3
}
 8000758:	4618      	mov	r0, r3
 800075a:	46bd      	mov	sp, r7
 800075c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000760:	4770      	bx	lr
 8000762:	bf00      	nop
 8000764:	40023800 	.word	0x40023800

08000768 <LL_RCC_PLL_ConfigDomain_SYS>:
  *
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_RCC_PLL_ConfigDomain_SYS(uint32_t Source, uint32_t PLLM, uint32_t PLLN, uint32_t PLLP_R)
{
 8000768:	b480      	push	{r7}
 800076a:	b085      	sub	sp, #20
 800076c:	af00      	add	r7, sp, #0
 800076e:	60f8      	str	r0, [r7, #12]
 8000770:	60b9      	str	r1, [r7, #8]
 8000772:	607a      	str	r2, [r7, #4]
 8000774:	603b      	str	r3, [r7, #0]
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM | RCC_PLLCFGR_PLLN,
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000778:	685a      	ldr	r2, [r3, #4]
 800077a:	4b11      	ldr	r3, [pc, #68]	; (80007c0 <LL_RCC_PLL_ConfigDomain_SYS+0x58>)
 800077c:	4013      	ands	r3, r2
 800077e:	68f9      	ldr	r1, [r7, #12]
 8000780:	68ba      	ldr	r2, [r7, #8]
 8000782:	4311      	orrs	r1, r2
 8000784:	687a      	ldr	r2, [r7, #4]
 8000786:	0192      	lsls	r2, r2, #6
 8000788:	430a      	orrs	r2, r1
 800078a:	490c      	ldr	r1, [pc, #48]	; (80007bc <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800078c:	4313      	orrs	r3, r2
 800078e:	604b      	str	r3, [r1, #4]
             Source | PLLM | PLLN << RCC_PLLCFGR_PLLN_Pos);
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLP, PLLP_R);
 8000790:	4b0a      	ldr	r3, [pc, #40]	; (80007bc <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 8000792:	685b      	ldr	r3, [r3, #4]
 8000794:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000798:	4908      	ldr	r1, [pc, #32]	; (80007bc <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 800079a:	683b      	ldr	r3, [r7, #0]
 800079c:	4313      	orrs	r3, r2
 800079e:	604b      	str	r3, [r1, #4]
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLR, PLLP_R);
 80007a0:	4b06      	ldr	r3, [pc, #24]	; (80007bc <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80007a2:	685b      	ldr	r3, [r3, #4]
 80007a4:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80007a8:	4904      	ldr	r1, [pc, #16]	; (80007bc <LL_RCC_PLL_ConfigDomain_SYS+0x54>)
 80007aa:	683b      	ldr	r3, [r7, #0]
 80007ac:	4313      	orrs	r3, r2
 80007ae:	604b      	str	r3, [r1, #4]
#endif /* RCC_PLLR_SYSCLK_SUPPORT */
}
 80007b0:	bf00      	nop
 80007b2:	3714      	adds	r7, #20
 80007b4:	46bd      	mov	sp, r7
 80007b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ba:	4770      	bx	lr
 80007bc:	40023800 	.word	0x40023800
 80007c0:	ffbf8000 	.word	0xffbf8000

080007c4 <LL_AHB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_AHB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007c4:	b480      	push	{r7}
 80007c6:	b085      	sub	sp, #20
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->AHB1ENR, Periphs);
 80007cc:	4b08      	ldr	r3, [pc, #32]	; (80007f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007d0:	4907      	ldr	r1, [pc, #28]	; (80007f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007d2:	687b      	ldr	r3, [r7, #4]
 80007d4:	4313      	orrs	r3, r2
 80007d6:	630b      	str	r3, [r1, #48]	; 0x30
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->AHB1ENR, Periphs);
 80007d8:	4b05      	ldr	r3, [pc, #20]	; (80007f0 <LL_AHB1_GRP1_EnableClock+0x2c>)
 80007da:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	4013      	ands	r3, r2
 80007e0:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 80007e2:	68fb      	ldr	r3, [r7, #12]
}
 80007e4:	bf00      	nop
 80007e6:	3714      	adds	r7, #20
 80007e8:	46bd      	mov	sp, r7
 80007ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007ee:	4770      	bx	lr
 80007f0:	40023800 	.word	0x40023800

080007f4 <LL_APB1_GRP1_EnableClock>:
  *
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_EnableClock(uint32_t Periphs)
{
 80007f4:	b480      	push	{r7}
 80007f6:	b085      	sub	sp, #20
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg;
  SET_BIT(RCC->APB1ENR, Periphs);
 80007fc:	4b08      	ldr	r3, [pc, #32]	; (8000820 <LL_APB1_GRP1_EnableClock+0x2c>)
 80007fe:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000800:	4907      	ldr	r1, [pc, #28]	; (8000820 <LL_APB1_GRP1_EnableClock+0x2c>)
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	4313      	orrs	r3, r2
 8000806:	640b      	str	r3, [r1, #64]	; 0x40
  /* Delay after an RCC peripheral clock enabling */
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8000808:	4b05      	ldr	r3, [pc, #20]	; (8000820 <LL_APB1_GRP1_EnableClock+0x2c>)
 800080a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	4013      	ands	r3, r2
 8000810:	60fb      	str	r3, [r7, #12]
  (void)tmpreg;
 8000812:	68fb      	ldr	r3, [r7, #12]
}
 8000814:	bf00      	nop
 8000816:	3714      	adds	r7, #20
 8000818:	46bd      	mov	sp, r7
 800081a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800081e:	4770      	bx	lr
 8000820:	40023800 	.word	0x40023800

08000824 <LL_FLASH_SetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  * @retval None
  */
__STATIC_INLINE void LL_FLASH_SetLatency(uint32_t Latency)
{
 8000824:	b480      	push	{r7}
 8000826:	b083      	sub	sp, #12
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
  MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, Latency);
 800082c:	4b06      	ldr	r3, [pc, #24]	; (8000848 <LL_FLASH_SetLatency+0x24>)
 800082e:	681b      	ldr	r3, [r3, #0]
 8000830:	f023 020f 	bic.w	r2, r3, #15
 8000834:	4904      	ldr	r1, [pc, #16]	; (8000848 <LL_FLASH_SetLatency+0x24>)
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	4313      	orrs	r3, r2
 800083a:	600b      	str	r3, [r1, #0]
}
 800083c:	bf00      	nop
 800083e:	370c      	adds	r7, #12
 8000840:	46bd      	mov	sp, r7
 8000842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000846:	4770      	bx	lr
 8000848:	40023c00 	.word	0x40023c00

0800084c <LL_FLASH_GetLatency>:
  *         @arg @ref LL_FLASH_LATENCY_13
  *         @arg @ref LL_FLASH_LATENCY_14
  *         @arg @ref LL_FLASH_LATENCY_15
  */
__STATIC_INLINE uint32_t LL_FLASH_GetLatency(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY));
 8000850:	4b04      	ldr	r3, [pc, #16]	; (8000864 <LL_FLASH_GetLatency+0x18>)
 8000852:	681b      	ldr	r3, [r3, #0]
 8000854:	f003 030f 	and.w	r3, r3, #15
}
 8000858:	4618      	mov	r0, r3
 800085a:	46bd      	mov	sp, r7
 800085c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000860:	4770      	bx	lr
 8000862:	bf00      	nop
 8000864:	40023c00 	.word	0x40023c00

08000868 <LL_PWR_EnableOverDriveMode>:
  * @brief  Enable Over drive Mode
  * @rmtoll CR    ODEN       LL_PWR_EnableOverDriveMode
  * @retval None
  */
__STATIC_INLINE void LL_PWR_EnableOverDriveMode(void)
{
 8000868:	b480      	push	{r7}
 800086a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR, PWR_CR_ODEN);
 800086c:	4b05      	ldr	r3, [pc, #20]	; (8000884 <LL_PWR_EnableOverDriveMode+0x1c>)
 800086e:	681b      	ldr	r3, [r3, #0]
 8000870:	4a04      	ldr	r2, [pc, #16]	; (8000884 <LL_PWR_EnableOverDriveMode+0x1c>)
 8000872:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000876:	6013      	str	r3, [r2, #0]
}
 8000878:	bf00      	nop
 800087a:	46bd      	mov	sp, r7
 800087c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop
 8000884:	40007000 	.word	0x40007000

08000888 <LL_PWR_SetRegulVoltageScaling>:
  *         @arg @ref LL_PWR_REGU_VOLTAGE_SCALE3
  *         (*) LL_PWR_REGU_VOLTAGE_SCALE1 is not available for STM32F401xx devices
  * @retval None
  */
__STATIC_INLINE void LL_PWR_SetRegulVoltageScaling(uint32_t VoltageScaling)
{
 8000888:	b480      	push	{r7}
 800088a:	b083      	sub	sp, #12
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  MODIFY_REG(PWR->CR, PWR_CR_VOS, VoltageScaling);
 8000890:	4b06      	ldr	r3, [pc, #24]	; (80008ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 8000892:	681b      	ldr	r3, [r3, #0]
 8000894:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8000898:	4904      	ldr	r1, [pc, #16]	; (80008ac <LL_PWR_SetRegulVoltageScaling+0x24>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	4313      	orrs	r3, r2
 800089e:	600b      	str	r3, [r1, #0]
}
 80008a0:	bf00      	nop
 80008a2:	370c      	adds	r7, #12
 80008a4:	46bd      	mov	sp, r7
 80008a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008aa:	4770      	bx	lr
 80008ac:	40007000 	.word	0x40007000

080008b0 <LL_USART_Enable>:
  * @rmtoll CR1          UE            LL_USART_Enable
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_Enable(USART_TypeDef *USARTx)
{
 80008b0:	b480      	push	{r7}
 80008b2:	b083      	sub	sp, #12
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
  SET_BIT(USARTx->CR1, USART_CR1_UE);
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	68db      	ldr	r3, [r3, #12]
 80008bc:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	60da      	str	r2, [r3, #12]
}
 80008c4:	bf00      	nop
 80008c6:	370c      	adds	r7, #12
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <LL_USART_ConfigHalfDuplexMode>:
  *         CR3          IREN          LL_USART_ConfigHalfDuplexMode
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_ConfigHalfDuplexMode(USART_TypeDef *USARTx)
{
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
  /* In Half Duplex mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN and IREN bits in the USART_CR3 register.*/
  CLEAR_BIT(USARTx->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	691b      	ldr	r3, [r3, #16]
 80008dc:	f423 4290 	bic.w	r2, r3, #18432	; 0x4800
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(USARTx->CR3, (USART_CR3_SCEN | USART_CR3_IREN));
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	695b      	ldr	r3, [r3, #20]
 80008e8:	f023 0222 	bic.w	r2, r3, #34	; 0x22
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	615a      	str	r2, [r3, #20]
  /* set the UART/USART in Half Duplex mode */
  SET_BIT(USARTx->CR3, USART_CR3_HDSEL);
 80008f0:	687b      	ldr	r3, [r7, #4]
 80008f2:	695b      	ldr	r3, [r3, #20]
 80008f4:	f043 0208 	orr.w	r2, r3, #8
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	615a      	str	r2, [r3, #20]
}
 80008fc:	bf00      	nop
 80008fe:	370c      	adds	r7, #12
 8000900:	46bd      	mov	sp, r7
 8000902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000906:	4770      	bx	lr

08000908 <LL_USART_IsActiveFlag_TXE>:
  * @rmtoll SR           TXE           LL_USART_IsActiveFlag_TXE
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TXE(USART_TypeDef *USARTx)
{
 8000908:	b480      	push	{r7}
 800090a:	b083      	sub	sp, #12
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->SR, USART_SR_TXE) == (USART_SR_TXE));
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000918:	2b80      	cmp	r3, #128	; 0x80
 800091a:	bf0c      	ite	eq
 800091c:	2301      	moveq	r3, #1
 800091e:	2300      	movne	r3, #0
 8000920:	b2db      	uxtb	r3, r3
}
 8000922:	4618      	mov	r0, r3
 8000924:	370c      	adds	r7, #12
 8000926:	46bd      	mov	sp, r7
 8000928:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092c:	4770      	bx	lr

0800092e <LL_USART_TransmitData8>:
  * @param  USARTx USART Instance
  * @param  Value between Min_Data=0x00 and Max_Data=0xFF
  * @retval None
  */
__STATIC_INLINE void LL_USART_TransmitData8(USART_TypeDef *USARTx, uint8_t Value)
{
 800092e:	b480      	push	{r7}
 8000930:	b083      	sub	sp, #12
 8000932:	af00      	add	r7, sp, #0
 8000934:	6078      	str	r0, [r7, #4]
 8000936:	460b      	mov	r3, r1
 8000938:	70fb      	strb	r3, [r7, #3]
  USARTx->DR = Value;
 800093a:	78fa      	ldrb	r2, [r7, #3]
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	605a      	str	r2, [r3, #4]
}
 8000940:	bf00      	nop
 8000942:	370c      	adds	r7, #12
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <LL_GPIO_SetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 800094c:	b480      	push	{r7}
 800094e:	b083      	sub	sp, #12
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
 8000954:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	683a      	ldr	r2, [r7, #0]
 800095a:	619a      	str	r2, [r3, #24]
}
 800095c:	bf00      	nop
 800095e:	370c      	adds	r7, #12
 8000960:	46bd      	mov	sp, r7
 8000962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000966:	4770      	bx	lr

08000968 <LL_GPIO_ResetOutputPin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000968:	b480      	push	{r7}
 800096a:	b083      	sub	sp, #12
 800096c:	af00      	add	r7, sp, #0
 800096e:	6078      	str	r0, [r7, #4]
 8000970:	6039      	str	r1, [r7, #0]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8000972:	683b      	ldr	r3, [r7, #0]
 8000974:	041a      	lsls	r2, r3, #16
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	619a      	str	r2, [r3, #24]
}
 800097a:	bf00      	nop
 800097c:	370c      	adds	r7, #12
 800097e:	46bd      	mov	sp, r7
 8000980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000984:	4770      	bx	lr

08000986 <LL_GPIO_TogglePin>:
  *         @arg @ref LL_GPIO_PIN_15
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
 8000986:	b480      	push	{r7}
 8000988:	b085      	sub	sp, #20
 800098a:	af00      	add	r7, sp, #0
 800098c:	6078      	str	r0, [r7, #4]
 800098e:	6039      	str	r1, [r7, #0]
  uint32_t odr = READ_REG(GPIOx->ODR);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	695b      	ldr	r3, [r3, #20]
 8000994:	60fb      	str	r3, [r7, #12]
  WRITE_REG(GPIOx->BSRR, ((odr & PinMask) << 16u) | (~odr & PinMask));
 8000996:	68fa      	ldr	r2, [r7, #12]
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	4013      	ands	r3, r2
 800099c:	041a      	lsls	r2, r3, #16
 800099e:	68fb      	ldr	r3, [r7, #12]
 80009a0:	43d9      	mvns	r1, r3
 80009a2:	683b      	ldr	r3, [r7, #0]
 80009a4:	400b      	ands	r3, r1
 80009a6:	431a      	orrs	r2, r3
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	619a      	str	r2, [r3, #24]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009bc:	f001 fb5a 	bl	8002074 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c0:	f000 f81a 	bl	80009f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c4:	f000 f8ee 	bl	8000ba4 <MX_GPIO_Init>
  MX_UART4_Init();
 80009c8:	f000 f86c 	bl	8000aa4 <MX_UART4_Init>
  MX_USB_OTG_HS_PCD_Init();
 80009cc:	f000 f8b8 	bl	8000b40 <MX_USB_OTG_HS_PCD_Init>
  /* USER CODE BEGIN 2 */
  LL_USART_Enable(UART4);
 80009d0:	4807      	ldr	r0, [pc, #28]	; (80009f0 <main+0x38>)
 80009d2:	f7ff ff6d 	bl	80008b0 <LL_USART_Enable>
  MX_USB_DEVICE_Init();
 80009d6:	f000 fb29 	bl	800102c <MX_USB_DEVICE_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
  	LL_mDelay(500);
 80009da:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80009de:	f005 fb85 	bl	80060ec <LL_mDelay>
  	LL_GPIO_TogglePin(LED2_GPIO_Port, LED2_Pin);
 80009e2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80009e6:	4803      	ldr	r0, [pc, #12]	; (80009f4 <main+0x3c>)
 80009e8:	f7ff ffcd 	bl	8000986 <LL_GPIO_TogglePin>
  	LL_mDelay(500);
 80009ec:	e7f5      	b.n	80009da <main+0x22>
 80009ee:	bf00      	nop
 80009f0:	40004c00 	.word	0x40004c00
 80009f4:	40020800 	.word	0x40020800

080009f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	af00      	add	r7, sp, #0
  LL_FLASH_SetLatency(LL_FLASH_LATENCY_5);
 80009fc:	2005      	movs	r0, #5
 80009fe:	f7ff ff11 	bl	8000824 <LL_FLASH_SetLatency>
  while(LL_FLASH_GetLatency()!= LL_FLASH_LATENCY_5)
 8000a02:	bf00      	nop
 8000a04:	f7ff ff22 	bl	800084c <LL_FLASH_GetLatency>
 8000a08:	4603      	mov	r3, r0
 8000a0a:	2b05      	cmp	r3, #5
 8000a0c:	d1fa      	bne.n	8000a04 <SystemClock_Config+0xc>
  {
  }
  LL_PWR_SetRegulVoltageScaling(LL_PWR_REGU_VOLTAGE_SCALE1);
 8000a0e:	f44f 4040 	mov.w	r0, #49152	; 0xc000
 8000a12:	f7ff ff39 	bl	8000888 <LL_PWR_SetRegulVoltageScaling>
  LL_PWR_EnableOverDriveMode();
 8000a16:	f7ff ff27 	bl	8000868 <LL_PWR_EnableOverDriveMode>
  LL_RCC_HSE_Enable();
 8000a1a:	f7ff fdcb 	bl	80005b4 <LL_RCC_HSE_Enable>

   /* Wait till HSE is ready */
  while(LL_RCC_HSE_IsReady() != 1)
 8000a1e:	bf00      	nop
 8000a20:	f7ff fdd8 	bl	80005d4 <LL_RCC_HSE_IsReady>
 8000a24:	4603      	mov	r3, r0
 8000a26:	2b01      	cmp	r3, #1
 8000a28:	d1fa      	bne.n	8000a20 <SystemClock_Config+0x28>
  {

  }
  LL_RCC_PLL_ConfigDomain_SYS(LL_RCC_PLLSOURCE_HSE, LL_RCC_PLLM_DIV_12, 180, LL_RCC_PLLP_DIV_2);
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	22b4      	movs	r2, #180	; 0xb4
 8000a2e:	210c      	movs	r1, #12
 8000a30:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
 8000a34:	f7ff fe98 	bl	8000768 <LL_RCC_PLL_ConfigDomain_SYS>
  LL_RCC_PLL_Enable();
 8000a38:	f7ff fe72 	bl	8000720 <LL_RCC_PLL_Enable>

   /* Wait till PLL is ready */
  while(LL_RCC_PLL_IsReady() != 1)
 8000a3c:	bf00      	nop
 8000a3e:	f7ff fe7f 	bl	8000740 <LL_RCC_PLL_IsReady>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b01      	cmp	r3, #1
 8000a46:	d1fa      	bne.n	8000a3e <SystemClock_Config+0x46>
  {

  }
  LL_RCC_SetAHBPrescaler(LL_RCC_SYSCLK_DIV_1);
 8000a48:	2000      	movs	r0, #0
 8000a4a:	f7ff fdf9 	bl	8000640 <LL_RCC_SetAHBPrescaler>
  LL_RCC_SetAPB1Prescaler(LL_RCC_APB1_DIV_4);
 8000a4e:	f44f 50a0 	mov.w	r0, #5120	; 0x1400
 8000a52:	f7ff fe09 	bl	8000668 <LL_RCC_SetAPB1Prescaler>
  LL_RCC_SetAPB2Prescaler(LL_RCC_APB2_DIV_2);
 8000a56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000a5a:	f7ff fe19 	bl	8000690 <LL_RCC_SetAPB2Prescaler>
  LL_RCC_SetSysClkSource(LL_RCC_SYS_CLKSOURCE_PLL);
 8000a5e:	2002      	movs	r0, #2
 8000a60:	f7ff fdcc 	bl	80005fc <LL_RCC_SetSysClkSource>

   /* Wait till System clock is ready */
  while(LL_RCC_GetSysClkSource() != LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8000a64:	bf00      	nop
 8000a66:	f7ff fddd 	bl	8000624 <LL_RCC_GetSysClkSource>
 8000a6a:	4603      	mov	r3, r0
 8000a6c:	2b08      	cmp	r3, #8
 8000a6e:	d1fa      	bne.n	8000a66 <SystemClock_Config+0x6e>
  {

  }
  LL_SetSystemCoreClock(180000000);
 8000a70:	480a      	ldr	r0, [pc, #40]	; (8000a9c <SystemClock_Config+0xa4>)
 8000a72:	f005 fb61 	bl	8006138 <LL_SetSystemCoreClock>

   /* Update the time base */
  if (HAL_InitTick (TICK_INT_PRIORITY) != HAL_OK)
 8000a76:	200f      	movs	r0, #15
 8000a78:	f001 fb1e 	bl	80020b8 <HAL_InitTick>
 8000a7c:	4603      	mov	r3, r0
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d001      	beq.n	8000a86 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000a82:	f000 f8ed 	bl	8000c60 <Error_Handler>
  }
  LL_RCC_ConfigMCO(LL_RCC_MCO1SOURCE_HSE, LL_RCC_MCO1_DIV_1);
 8000a86:	f04f 61e0 	mov.w	r1, #117440512	; 0x7000000
 8000a8a:	4805      	ldr	r0, [pc, #20]	; (8000aa0 <SystemClock_Config+0xa8>)
 8000a8c:	f7ff fe14 	bl	80006b8 <LL_RCC_ConfigMCO>
  LL_RCC_SetTIMPrescaler(LL_RCC_TIM_PRESCALER_TWICE);
 8000a90:	2000      	movs	r0, #0
 8000a92:	f7ff fe2f 	bl	80006f4 <LL_RCC_SetTIMPrescaler>
}
 8000a96:	bf00      	nop
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0aba9500 	.word	0x0aba9500
 8000aa0:	00600040 	.word	0x00600040

08000aa4 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b08e      	sub	sp, #56	; 0x38
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN UART4_Init 0 */

  /* USER CODE END UART4_Init 0 */

  LL_USART_InitTypeDef USART_InitStruct = {0};
 8000aaa:	f107 031c 	add.w	r3, r7, #28
 8000aae:	2200      	movs	r2, #0
 8000ab0:	601a      	str	r2, [r3, #0]
 8000ab2:	605a      	str	r2, [r3, #4]
 8000ab4:	609a      	str	r2, [r3, #8]
 8000ab6:	60da      	str	r2, [r3, #12]
 8000ab8:	611a      	str	r2, [r3, #16]
 8000aba:	615a      	str	r2, [r3, #20]
 8000abc:	619a      	str	r2, [r3, #24]

  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000abe:	1d3b      	adds	r3, r7, #4
 8000ac0:	2200      	movs	r2, #0
 8000ac2:	601a      	str	r2, [r3, #0]
 8000ac4:	605a      	str	r2, [r3, #4]
 8000ac6:	609a      	str	r2, [r3, #8]
 8000ac8:	60da      	str	r2, [r3, #12]
 8000aca:	611a      	str	r2, [r3, #16]
 8000acc:	615a      	str	r2, [r3, #20]

  /* Peripheral clock enable */
  LL_APB1_GRP1_EnableClock(LL_APB1_GRP1_PERIPH_UART4);
 8000ace:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8000ad2:	f7ff fe8f 	bl	80007f4 <LL_APB1_GRP1_EnableClock>

  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000ad6:	2001      	movs	r0, #1
 8000ad8:	f7ff fe74 	bl	80007c4 <LL_AHB1_GRP1_EnableClock>
  /**UART4 GPIO Configuration
  PA0-WKUP   ------> UART4_TX
  */
  GPIO_InitStruct.Pin = LL_GPIO_PIN_0;
 8000adc:	2301      	movs	r3, #1
 8000ade:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_VERY_HIGH;
 8000ae4:	2303      	movs	r3, #3
 8000ae6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_OPENDRAIN;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000aec:	2300      	movs	r3, #0
 8000aee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_8;
 8000af0:	2308      	movs	r3, #8
 8000af2:	61bb      	str	r3, [r7, #24]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af4:	1d3b      	adds	r3, r7, #4
 8000af6:	4619      	mov	r1, r3
 8000af8:	480f      	ldr	r0, [pc, #60]	; (8000b38 <MX_UART4_Init+0x94>)
 8000afa:	f003 f9de 	bl	8003eba <LL_GPIO_Init>

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  USART_InitStruct.BaudRate = 115200;
 8000afe:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8000b02:	61fb      	str	r3, [r7, #28]
  USART_InitStruct.DataWidth = LL_USART_DATAWIDTH_8B;
 8000b04:	2300      	movs	r3, #0
 8000b06:	623b      	str	r3, [r7, #32]
  USART_InitStruct.StopBits = LL_USART_STOPBITS_1;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	627b      	str	r3, [r7, #36]	; 0x24
  USART_InitStruct.Parity = LL_USART_PARITY_NONE;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	62bb      	str	r3, [r7, #40]	; 0x28
  USART_InitStruct.TransferDirection = LL_USART_DIRECTION_TX_RX;
 8000b10:	230c      	movs	r3, #12
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  USART_InitStruct.OverSampling = LL_USART_OVERSAMPLING_16;
 8000b14:	2300      	movs	r3, #0
 8000b16:	637b      	str	r3, [r7, #52]	; 0x34
  LL_USART_Init(UART4, &USART_InitStruct);
 8000b18:	f107 031c 	add.w	r3, r7, #28
 8000b1c:	4619      	mov	r1, r3
 8000b1e:	4807      	ldr	r0, [pc, #28]	; (8000b3c <MX_UART4_Init+0x98>)
 8000b20:	f003 fe1c 	bl	800475c <LL_USART_Init>
  LL_USART_ConfigHalfDuplexMode(UART4);
 8000b24:	4805      	ldr	r0, [pc, #20]	; (8000b3c <MX_UART4_Init+0x98>)
 8000b26:	f7ff fed3 	bl	80008d0 <LL_USART_ConfigHalfDuplexMode>
  LL_USART_Enable(UART4);
 8000b2a:	4804      	ldr	r0, [pc, #16]	; (8000b3c <MX_UART4_Init+0x98>)
 8000b2c:	f7ff fec0 	bl	80008b0 <LL_USART_Enable>
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	; 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40020000 	.word	0x40020000
 8000b3c:	40004c00 	.word	0x40004c00

08000b40 <MX_USB_OTG_HS_PCD_Init>:
  * @brief USB_OTG_HS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_HS_PCD_Init(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_HS_Init 0 */

  /* USER CODE BEGIN USB_OTG_HS_Init 1 */

  /* USER CODE END USB_OTG_HS_Init 1 */
  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8000b44:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b46:	4a16      	ldr	r2, [pc, #88]	; (8000ba0 <MX_USB_OTG_HS_PCD_Init+0x60>)
 8000b48:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8000b4a:	4b14      	ldr	r3, [pc, #80]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b4c:	2208      	movs	r2, #8
 8000b4e:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8000b50:	4b12      	ldr	r3, [pc, #72]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b52:	2200      	movs	r2, #0
 8000b54:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8000b56:	4b11      	ldr	r3, [pc, #68]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b58:	2200      	movs	r2, #0
 8000b5a:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8000b5c:	4b0f      	ldr	r3, [pc, #60]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b5e:	2201      	movs	r2, #1
 8000b60:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8000b62:	4b0e      	ldr	r3, [pc, #56]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b64:	2200      	movs	r2, #0
 8000b66:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8000b68:	4b0c      	ldr	r3, [pc, #48]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b6a:	2200      	movs	r2, #0
 8000b6c:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8000b6e:	4b0b      	ldr	r3, [pc, #44]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b70:	2200      	movs	r2, #0
 8000b72:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8000b74:	4b09      	ldr	r3, [pc, #36]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b76:	2200      	movs	r2, #0
 8000b78:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8000b7a:	4b08      	ldr	r3, [pc, #32]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8000b80:	4b06      	ldr	r3, [pc, #24]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8000b86:	4805      	ldr	r0, [pc, #20]	; (8000b9c <MX_USB_OTG_HS_PCD_Init+0x5c>)
 8000b88:	f001 fdb0 	bl	80026ec <HAL_PCD_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <MX_USB_OTG_HS_PCD_Init+0x56>
  {
    Error_Handler();
 8000b92:	f000 f865 	bl	8000c60 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_HS_Init 2 */

  /* USER CODE END USB_OTG_HS_Init 2 */

}
 8000b96:	bf00      	nop
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	200001c4 	.word	0x200001c4
 8000ba0:	40040000 	.word	0x40040000

08000ba4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b086      	sub	sp, #24
 8000ba8:	af00      	add	r7, sp, #0
  LL_GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
 8000bb6:	611a      	str	r2, [r3, #16]
 8000bb8:	615a      	str	r2, [r3, #20]

  /* GPIO Ports Clock Enable */
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOC);
 8000bba:	2004      	movs	r0, #4
 8000bbc:	f7ff fe02 	bl	80007c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOH);
 8000bc0:	2080      	movs	r0, #128	; 0x80
 8000bc2:	f7ff fdff 	bl	80007c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOA);
 8000bc6:	2001      	movs	r0, #1
 8000bc8:	f7ff fdfc 	bl	80007c4 <LL_AHB1_GRP1_EnableClock>
  LL_AHB1_GRP1_EnableClock(LL_AHB1_GRP1_PERIPH_GPIOB);
 8000bcc:	2002      	movs	r0, #2
 8000bce:	f7ff fdf9 	bl	80007c4 <LL_AHB1_GRP1_EnableClock>

  /**/
  LL_GPIO_ResetOutputPin(GPIOC, LED1_Pin|LED2_Pin);
 8000bd2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8000bd6:	4814      	ldr	r0, [pc, #80]	; (8000c28 <MX_GPIO_Init+0x84>)
 8000bd8:	f7ff fec6 	bl	8000968 <LL_GPIO_ResetOutputPin>

  /**/
  GPIO_InitStruct.Pin = LED1_Pin|LED2_Pin;
 8000bdc:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000be0:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_OUTPUT;
 8000be2:	2301      	movs	r3, #1
 8000be4:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000bea:	2300      	movs	r3, #0
 8000bec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	613b      	str	r3, [r7, #16]
  LL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	463b      	mov	r3, r7
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	480c      	ldr	r0, [pc, #48]	; (8000c28 <MX_GPIO_Init+0x84>)
 8000bf8:	f003 f95f 	bl	8003eba <LL_GPIO_Init>

  /**/
  GPIO_InitStruct.Pin = LL_GPIO_PIN_8;
 8000bfc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000c00:	603b      	str	r3, [r7, #0]
  GPIO_InitStruct.Mode = LL_GPIO_MODE_ALTERNATE;
 8000c02:	2302      	movs	r3, #2
 8000c04:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Speed = LL_GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.OutputType = LL_GPIO_OUTPUT_PUSHPULL;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = LL_GPIO_PULL_NO;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = LL_GPIO_AF_0;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]
  LL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c16:	463b      	mov	r3, r7
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4804      	ldr	r0, [pc, #16]	; (8000c2c <MX_GPIO_Init+0x88>)
 8000c1c:	f003 f94d 	bl	8003eba <LL_GPIO_Init>

}
 8000c20:	bf00      	nop
 8000c22:	3718      	adds	r7, #24
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40020800 	.word	0x40020800
 8000c2c:	40020000 	.word	0x40020000

08000c30 <__io_putchar>:

/* USER CODE BEGIN 4 */
int __io_putchar(int ch)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	b082      	sub	sp, #8
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	6078      	str	r0, [r7, #4]
	LL_USART_TransmitData8(UART4, ch);
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	b2db      	uxtb	r3, r3
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	4807      	ldr	r0, [pc, #28]	; (8000c5c <__io_putchar+0x2c>)
 8000c40:	f7ff fe75 	bl	800092e <LL_USART_TransmitData8>
	while (!LL_USART_IsActiveFlag_TXE(UART4));
 8000c44:	bf00      	nop
 8000c46:	4805      	ldr	r0, [pc, #20]	; (8000c5c <__io_putchar+0x2c>)
 8000c48:	f7ff fe5e 	bl	8000908 <LL_USART_IsActiveFlag_TXE>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f9      	beq.n	8000c46 <__io_putchar+0x16>
	return 0;
 8000c52:	2300      	movs	r3, #0
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	3708      	adds	r7, #8
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	40004c00 	.word	0x40004c00

08000c60 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c60:	b580      	push	{r7, lr}
 8000c62:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c64:	b672      	cpsid	i
}
 8000c66:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  LL_GPIO_SetOutputPin(LED1_GPIO_Port, LED1_Pin);
 8000c68:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c6c:	4801      	ldr	r0, [pc, #4]	; (8000c74 <Error_Handler+0x14>)
 8000c6e:	f7ff fe6d 	bl	800094c <LL_GPIO_SetOutputPin>
  while (1)
 8000c72:	e7fe      	b.n	8000c72 <Error_Handler+0x12>
 8000c74:	40020800 	.word	0x40020800

08000c78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c7e:	2300      	movs	r3, #0
 8000c80:	607b      	str	r3, [r7, #4]
 8000c82:	4b10      	ldr	r3, [pc, #64]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c86:	4a0f      	ldr	r2, [pc, #60]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c88:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000c8c:	6453      	str	r3, [r2, #68]	; 0x44
 8000c8e:	4b0d      	ldr	r3, [pc, #52]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000c90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c92:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000c96:	607b      	str	r3, [r7, #4]
 8000c98:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	603b      	str	r3, [r7, #0]
 8000c9e:	4b09      	ldr	r3, [pc, #36]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca2:	4a08      	ldr	r2, [pc, #32]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000ca4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8000caa:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_MspInit+0x4c>)
 8000cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000cb2:	603b      	str	r3, [r7, #0]
 8000cb4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cb6:	bf00      	nop
 8000cb8:	370c      	adds	r7, #12
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	40023800 	.word	0x40023800

08000cc8 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b08c      	sub	sp, #48	; 0x30
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd0:	f107 031c 	add.w	r3, r7, #28
 8000cd4:	2200      	movs	r2, #0
 8000cd6:	601a      	str	r2, [r3, #0]
 8000cd8:	605a      	str	r2, [r3, #4]
 8000cda:	609a      	str	r2, [r3, #8]
 8000cdc:	60da      	str	r2, [r3, #12]
 8000cde:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_HS)
 8000ce0:	687b      	ldr	r3, [r7, #4]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	4a42      	ldr	r2, [pc, #264]	; (8000df0 <HAL_PCD_MspInit+0x128>)
 8000ce6:	4293      	cmp	r3, r2
 8000ce8:	d17e      	bne.n	8000de8 <HAL_PCD_MspInit+0x120>
  {
  /* USER CODE BEGIN USB_OTG_HS_MspInit 0 */

  /* USER CODE END USB_OTG_HS_MspInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	61bb      	str	r3, [r7, #24]
 8000cee:	4b41      	ldr	r3, [pc, #260]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000cf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf2:	4a40      	ldr	r2, [pc, #256]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000cf4:	f043 0304 	orr.w	r3, r3, #4
 8000cf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfa:	4b3e      	ldr	r3, [pc, #248]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cfe:	f003 0304 	and.w	r3, r3, #4
 8000d02:	61bb      	str	r3, [r7, #24]
 8000d04:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
 8000d0a:	4b3a      	ldr	r3, [pc, #232]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000d0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d0e:	4a39      	ldr	r2, [pc, #228]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000d10:	f043 0301 	orr.w	r3, r3, #1
 8000d14:	6313      	str	r3, [r2, #48]	; 0x30
 8000d16:	4b37      	ldr	r3, [pc, #220]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1a:	f003 0301 	and.w	r3, r3, #1
 8000d1e:	617b      	str	r3, [r7, #20]
 8000d20:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d22:	2300      	movs	r3, #0
 8000d24:	613b      	str	r3, [r7, #16]
 8000d26:	4b33      	ldr	r3, [pc, #204]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000d28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2a:	4a32      	ldr	r2, [pc, #200]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000d2c:	f043 0302 	orr.w	r3, r3, #2
 8000d30:	6313      	str	r3, [r2, #48]	; 0x30
 8000d32:	4b30      	ldr	r3, [pc, #192]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000d34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d36:	f003 0302 	and.w	r3, r3, #2
 8000d3a:	613b      	str	r3, [r7, #16]
 8000d3c:	693b      	ldr	r3, [r7, #16]
    PB10     ------> USB_OTG_HS_ULPI_D3
    PB12     ------> USB_OTG_HS_ULPI_D5
    PB13     ------> USB_OTG_HS_ULPI_D6
    PB5     ------> USB_OTG_HS_ULPI_D7
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_2|GPIO_PIN_3;
 8000d3e:	230d      	movs	r3, #13
 8000d40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d42:	2302      	movs	r3, #2
 8000d44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d46:	2300      	movs	r3, #0
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d4a:	2303      	movs	r3, #3
 8000d4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d4e:	230a      	movs	r3, #10
 8000d50:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	f107 031c 	add.w	r3, r7, #28
 8000d56:	4619      	mov	r1, r3
 8000d58:	4827      	ldr	r0, [pc, #156]	; (8000df8 <HAL_PCD_MspInit+0x130>)
 8000d5a:	f001 fb33 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_5;
 8000d5e:	2328      	movs	r3, #40	; 0x28
 8000d60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d62:	2302      	movs	r3, #2
 8000d64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d66:	2300      	movs	r3, #0
 8000d68:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d6a:	2303      	movs	r3, #3
 8000d6c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d6e:	230a      	movs	r3, #10
 8000d70:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d72:	f107 031c 	add.w	r3, r7, #28
 8000d76:	4619      	mov	r1, r3
 8000d78:	4820      	ldr	r0, [pc, #128]	; (8000dfc <HAL_PCD_MspInit+0x134>)
 8000d7a:	f001 fb23 	bl	80023c4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d7e:	f243 4327 	movw	r3, #13351	; 0x3427
 8000d82:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_5;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d84:	2302      	movs	r3, #2
 8000d86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d88:	2300      	movs	r3, #0
 8000d8a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d8c:	2303      	movs	r3, #3
 8000d8e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_HS;
 8000d90:	230a      	movs	r3, #10
 8000d92:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d94:	f107 031c 	add.w	r3, r7, #28
 8000d98:	4619      	mov	r1, r3
 8000d9a:	4819      	ldr	r0, [pc, #100]	; (8000e00 <HAL_PCD_MspInit+0x138>)
 8000d9c:	f001 fb12 	bl	80023c4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_HS_CLK_ENABLE();
 8000da0:	2300      	movs	r3, #0
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	4b13      	ldr	r3, [pc, #76]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000da8:	4a12      	ldr	r2, [pc, #72]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000daa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000dae:	6313      	str	r3, [r2, #48]	; 0x30
 8000db0:	4b10      	ldr	r3, [pc, #64]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000db4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000db8:	60fb      	str	r3, [r7, #12]
 8000dba:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_USB_OTG_HS_ULPI_CLK_ENABLE();
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	60bb      	str	r3, [r7, #8]
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000dc2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc4:	4a0b      	ldr	r2, [pc, #44]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000dc6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8000dca:	6313      	str	r3, [r2, #48]	; 0x30
 8000dcc:	4b09      	ldr	r3, [pc, #36]	; (8000df4 <HAL_PCD_MspInit+0x12c>)
 8000dce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd0:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8000dd4:	60bb      	str	r3, [r7, #8]
 8000dd6:	68bb      	ldr	r3, [r7, #8]
    /* USB_OTG_HS interrupt Init */
    HAL_NVIC_SetPriority(OTG_HS_IRQn, 0, 0);
 8000dd8:	2200      	movs	r2, #0
 8000dda:	2100      	movs	r1, #0
 8000ddc:	204d      	movs	r0, #77	; 0x4d
 8000dde:	f001 faba 	bl	8002356 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_HS_IRQn);
 8000de2:	204d      	movs	r0, #77	; 0x4d
 8000de4:	f001 fad3 	bl	800238e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_HS_MspInit 1 */
  /* USER CODE END USB_OTG_HS_MspInit 1 */
  }

}
 8000de8:	bf00      	nop
 8000dea:	3730      	adds	r7, #48	; 0x30
 8000dec:	46bd      	mov	sp, r7
 8000dee:	bd80      	pop	{r7, pc}
 8000df0:	40040000 	.word	0x40040000
 8000df4:	40023800 	.word	0x40023800
 8000df8:	40020800 	.word	0x40020800
 8000dfc:	40020000 	.word	0x40020000
 8000e00:	40020400 	.word	0x40020400

08000e04 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <NMI_Handler+0x4>

08000e0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <HardFault_Handler+0x4>

08000e10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <MemManage_Handler+0x4>

08000e16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e1a:	e7fe      	b.n	8000e1a <BusFault_Handler+0x4>

08000e1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e20:	e7fe      	b.n	8000e20 <UsageFault_Handler+0x4>

08000e22 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e22:	b480      	push	{r7}
 8000e24:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e26:	bf00      	nop
 8000e28:	46bd      	mov	sp, r7
 8000e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2e:	4770      	bx	lr

08000e30 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e34:	bf00      	nop
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e3e:	b480      	push	{r7}
 8000e40:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	46bd      	mov	sp, r7
 8000e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4a:	4770      	bx	lr

08000e4c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e50:	f001 f962 	bl	8002118 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <OTG_HS_IRQHandler>:

/**
  * @brief This function handles USB On The Go HS global interrupt.
  */
void OTG_HS_IRQHandler(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_HS_IRQn 0 */

  /* USER CODE END OTG_HS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_HS);
 8000e5c:	4802      	ldr	r0, [pc, #8]	; (8000e68 <OTG_HS_IRQHandler+0x10>)
 8000e5e:	f001 fd9c 	bl	800299a <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_HS_IRQn 1 */

  /* USER CODE END OTG_HS_IRQn 1 */
}
 8000e62:	bf00      	nop
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	200001c4 	.word	0x200001c4

08000e6c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	b086      	sub	sp, #24
 8000e70:	af00      	add	r7, sp, #0
 8000e72:	60f8      	str	r0, [r7, #12]
 8000e74:	60b9      	str	r1, [r7, #8]
 8000e76:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
 8000e7c:	e00a      	b.n	8000e94 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e7e:	f3af 8000 	nop.w
 8000e82:	4601      	mov	r1, r0
 8000e84:	68bb      	ldr	r3, [r7, #8]
 8000e86:	1c5a      	adds	r2, r3, #1
 8000e88:	60ba      	str	r2, [r7, #8]
 8000e8a:	b2ca      	uxtb	r2, r1
 8000e8c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	3301      	adds	r3, #1
 8000e92:	617b      	str	r3, [r7, #20]
 8000e94:	697a      	ldr	r2, [r7, #20]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	429a      	cmp	r2, r3
 8000e9a:	dbf0      	blt.n	8000e7e <_read+0x12>
	}

return len;
 8000e9c:	687b      	ldr	r3, [r7, #4]
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3718      	adds	r7, #24
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bd80      	pop	{r7, pc}

08000ea6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ea6:	b580      	push	{r7, lr}
 8000ea8:	b086      	sub	sp, #24
 8000eaa:	af00      	add	r7, sp, #0
 8000eac:	60f8      	str	r0, [r7, #12]
 8000eae:	60b9      	str	r1, [r7, #8]
 8000eb0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
 8000eb6:	e009      	b.n	8000ecc <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000eb8:	68bb      	ldr	r3, [r7, #8]
 8000eba:	1c5a      	adds	r2, r3, #1
 8000ebc:	60ba      	str	r2, [r7, #8]
 8000ebe:	781b      	ldrb	r3, [r3, #0]
 8000ec0:	4618      	mov	r0, r3
 8000ec2:	f7ff feb5 	bl	8000c30 <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	697b      	ldr	r3, [r7, #20]
 8000ec8:	3301      	adds	r3, #1
 8000eca:	617b      	str	r3, [r7, #20]
 8000ecc:	697a      	ldr	r2, [r7, #20]
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	429a      	cmp	r2, r3
 8000ed2:	dbf1      	blt.n	8000eb8 <_write+0x12>
	}
	return len;
 8000ed4:	687b      	ldr	r3, [r7, #4]
}
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	3718      	adds	r7, #24
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <_close>:

int _close(int file)
{
 8000ede:	b480      	push	{r7}
 8000ee0:	b083      	sub	sp, #12
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
	return -1;
 8000ee6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	370c      	adds	r7, #12
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr

08000ef6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ef6:	b480      	push	{r7}
 8000ef8:	b083      	sub	sp, #12
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
 8000efe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000f06:	605a      	str	r2, [r3, #4]
	return 0;
 8000f08:	2300      	movs	r3, #0
}
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	370c      	adds	r7, #12
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr

08000f16 <_isatty>:

int _isatty(int file)
{
 8000f16:	b480      	push	{r7}
 8000f18:	b083      	sub	sp, #12
 8000f1a:	af00      	add	r7, sp, #0
 8000f1c:	6078      	str	r0, [r7, #4]
	return 1;
 8000f1e:	2301      	movs	r3, #1
}
 8000f20:	4618      	mov	r0, r3
 8000f22:	370c      	adds	r7, #12
 8000f24:	46bd      	mov	sp, r7
 8000f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2a:	4770      	bx	lr

08000f2c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b085      	sub	sp, #20
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	60f8      	str	r0, [r7, #12]
 8000f34:	60b9      	str	r1, [r7, #8]
 8000f36:	607a      	str	r2, [r7, #4]
	return 0;
 8000f38:	2300      	movs	r3, #0
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3714      	adds	r7, #20
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
	...

08000f48 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b086      	sub	sp, #24
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f50:	4a14      	ldr	r2, [pc, #80]	; (8000fa4 <_sbrk+0x5c>)
 8000f52:	4b15      	ldr	r3, [pc, #84]	; (8000fa8 <_sbrk+0x60>)
 8000f54:	1ad3      	subs	r3, r2, r3
 8000f56:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f58:	697b      	ldr	r3, [r7, #20]
 8000f5a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f5c:	4b13      	ldr	r3, [pc, #76]	; (8000fac <_sbrk+0x64>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d102      	bne.n	8000f6a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f64:	4b11      	ldr	r3, [pc, #68]	; (8000fac <_sbrk+0x64>)
 8000f66:	4a12      	ldr	r2, [pc, #72]	; (8000fb0 <_sbrk+0x68>)
 8000f68:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f6a:	4b10      	ldr	r3, [pc, #64]	; (8000fac <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	693a      	ldr	r2, [r7, #16]
 8000f74:	429a      	cmp	r2, r3
 8000f76:	d207      	bcs.n	8000f88 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f78:	f006 fbc6 	bl	8007708 <__errno>
 8000f7c:	4603      	mov	r3, r0
 8000f7e:	220c      	movs	r2, #12
 8000f80:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f82:	f04f 33ff 	mov.w	r3, #4294967295
 8000f86:	e009      	b.n	8000f9c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f88:	4b08      	ldr	r3, [pc, #32]	; (8000fac <_sbrk+0x64>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f8e:	4b07      	ldr	r3, [pc, #28]	; (8000fac <_sbrk+0x64>)
 8000f90:	681a      	ldr	r2, [r3, #0]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	4413      	add	r3, r2
 8000f96:	4a05      	ldr	r2, [pc, #20]	; (8000fac <_sbrk+0x64>)
 8000f98:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
}
 8000f9c:	4618      	mov	r0, r3
 8000f9e:	3718      	adds	r7, #24
 8000fa0:	46bd      	mov	sp, r7
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	20020000 	.word	0x20020000
 8000fa8:	00000400 	.word	0x00000400
 8000fac:	200006d0 	.word	0x200006d0
 8000fb0:	20002798 	.word	0x20002798

08000fb4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fb4:	b480      	push	{r7}
 8000fb6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fb8:	4b06      	ldr	r3, [pc, #24]	; (8000fd4 <SystemInit+0x20>)
 8000fba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fbe:	4a05      	ldr	r2, [pc, #20]	; (8000fd4 <SystemInit+0x20>)
 8000fc0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fc8:	bf00      	nop
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000ed00 	.word	0xe000ed00

08000fd8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000fd8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001010 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000fdc:	480d      	ldr	r0, [pc, #52]	; (8001014 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000fde:	490e      	ldr	r1, [pc, #56]	; (8001018 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000fe0:	4a0e      	ldr	r2, [pc, #56]	; (800101c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000fe2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fe4:	e002      	b.n	8000fec <LoopCopyDataInit>

08000fe6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fe6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fe8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fea:	3304      	adds	r3, #4

08000fec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ff0:	d3f9      	bcc.n	8000fe6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ff2:	4a0b      	ldr	r2, [pc, #44]	; (8001020 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ff4:	4c0b      	ldr	r4, [pc, #44]	; (8001024 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ff6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ff8:	e001      	b.n	8000ffe <LoopFillZerobss>

08000ffa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ffa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ffc:	3204      	adds	r2, #4

08000ffe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ffe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001000:	d3fb      	bcc.n	8000ffa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001002:	f7ff ffd7 	bl	8000fb4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001006:	f006 fb85 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800100a:	f7ff fcd5 	bl	80009b8 <main>
  bx  lr    
 800100e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001010:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001014:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001018:	200001a8 	.word	0x200001a8
  ldr r2, =_sidata
 800101c:	080088d4 	.word	0x080088d4
  ldr r2, =_sbss
 8001020:	200001a8 	.word	0x200001a8
  ldr r4, =_ebss
 8001024:	20002798 	.word	0x20002798

08001028 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001028:	e7fe      	b.n	8001028 <ADC_IRQHandler>
	...

0800102c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceHS, &HS_Desc, DEVICE_HS) != USBD_OK)
 8001030:	2201      	movs	r2, #1
 8001032:	4912      	ldr	r1, [pc, #72]	; (800107c <MX_USB_DEVICE_Init+0x50>)
 8001034:	4812      	ldr	r0, [pc, #72]	; (8001080 <MX_USB_DEVICE_Init+0x54>)
 8001036:	f005 f88f 	bl	8006158 <USBD_Init>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8001040:	f7ff fe0e 	bl	8000c60 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceHS, &USBD_AUDIO) != USBD_OK)
 8001044:	490f      	ldr	r1, [pc, #60]	; (8001084 <MX_USB_DEVICE_Init+0x58>)
 8001046:	480e      	ldr	r0, [pc, #56]	; (8001080 <MX_USB_DEVICE_Init+0x54>)
 8001048:	f005 f8c6 	bl	80061d8 <USBD_RegisterClass>
 800104c:	4603      	mov	r3, r0
 800104e:	2b00      	cmp	r3, #0
 8001050:	d001      	beq.n	8001056 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8001052:	f7ff fe05 	bl	8000c60 <Error_Handler>
  }
  if (USBD_AUDIO_RegisterInterface(&hUsbDeviceHS, &USBD_AUDIO_fops_HS) != USBD_OK)
 8001056:	490c      	ldr	r1, [pc, #48]	; (8001088 <MX_USB_DEVICE_Init+0x5c>)
 8001058:	4809      	ldr	r0, [pc, #36]	; (8001080 <MX_USB_DEVICE_Init+0x54>)
 800105a:	f000 fb8f 	bl	800177c <USBD_AUDIO_RegisterInterface>
 800105e:	4603      	mov	r3, r0
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <MX_USB_DEVICE_Init+0x3c>
  {
    Error_Handler();
 8001064:	f7ff fdfc 	bl	8000c60 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceHS) != USBD_OK)
 8001068:	4805      	ldr	r0, [pc, #20]	; (8001080 <MX_USB_DEVICE_Init+0x54>)
 800106a:	f005 f8fb 	bl	8006264 <USBD_Start>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_USB_DEVICE_Init+0x4c>
  {
    Error_Handler();
 8001074:	f7ff fdf4 	bl	8000c60 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	200000ec 	.word	0x200000ec
 8001080:	200006d4 	.word	0x200006d4
 8001084:	20000004 	.word	0x20000004
 8001088:	200000d0 	.word	0x200000d0

0800108c <USBD_AUDIO_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	b084      	sub	sp, #16
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
 8001094:	460b      	mov	r3, r1
 8001096:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);
  USBD_AUDIO_HandleTypeDef *haudio;

  /* Allocate Audio structure */
  haudio = (USBD_AUDIO_HandleTypeDef *)USBD_malloc(sizeof(USBD_AUDIO_HandleTypeDef));
 8001098:	f641 30d0 	movw	r0, #7120	; 0x1bd0
 800109c:	f000 ffa6 	bl	8001fec <USBD_static_malloc>
 80010a0:	60f8      	str	r0, [r7, #12]

  if (haudio == NULL)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d109      	bne.n	80010bc <USBD_AUDIO_Init+0x30>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	32b0      	adds	r2, #176	; 0xb0
 80010b2:	2100      	movs	r1, #0
 80010b4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80010b8:	2302      	movs	r3, #2
 80010ba:	e07e      	b.n	80011ba <USBD_AUDIO_Init+0x12e>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)haudio;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	32b0      	adds	r2, #176	; 0xb0
 80010c6:	68f9      	ldr	r1, [r7, #12]
 80010c8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	32b0      	adds	r2, #176	; 0xb0
 80010d6:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	7c1b      	ldrb	r3, [r3, #16]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d10e      	bne.n	8001106 <USBD_AUDIO_Init+0x7a>
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_HS_BINTERVAL;
 80010e8:	4b36      	ldr	r3, [pc, #216]	; (80011c4 <USBD_AUDIO_Init+0x138>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	f003 020f 	and.w	r2, r3, #15
 80010f0:	6879      	ldr	r1, [r7, #4]
 80010f2:	4613      	mov	r3, r2
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4413      	add	r3, r2
 80010f8:	009b      	lsls	r3, r3, #2
 80010fa:	440b      	add	r3, r1
 80010fc:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8001100:	2201      	movs	r2, #1
 8001102:	801a      	strh	r2, [r3, #0]
 8001104:	e00d      	b.n	8001122 <USBD_AUDIO_Init+0x96>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = AUDIO_FS_BINTERVAL;
 8001106:	4b2f      	ldr	r3, [pc, #188]	; (80011c4 <USBD_AUDIO_Init+0x138>)
 8001108:	781b      	ldrb	r3, [r3, #0]
 800110a:	f003 020f 	and.w	r2, r3, #15
 800110e:	6879      	ldr	r1, [r7, #4]
 8001110:	4613      	mov	r3, r2
 8001112:	009b      	lsls	r3, r3, #2
 8001114:	4413      	add	r3, r2
 8001116:	009b      	lsls	r3, r3, #2
 8001118:	440b      	add	r3, r1
 800111a:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 800111e:	2201      	movs	r2, #1
 8001120:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP OUT */
  (void)USBD_LL_OpenEP(pdev, AUDIOOutEpAdd, USBD_EP_TYPE_ISOC, AUDIO_OUT_PACKET);
 8001122:	4b28      	ldr	r3, [pc, #160]	; (80011c4 <USBD_AUDIO_Init+0x138>)
 8001124:	7819      	ldrb	r1, [r3, #0]
 8001126:	2358      	movs	r3, #88	; 0x58
 8001128:	2201      	movs	r2, #1
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f000 fe3b 	bl	8001da6 <USBD_LL_OpenEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 1U;
 8001130:	4b24      	ldr	r3, [pc, #144]	; (80011c4 <USBD_AUDIO_Init+0x138>)
 8001132:	781b      	ldrb	r3, [r3, #0]
 8001134:	f003 020f 	and.w	r2, r3, #15
 8001138:	6879      	ldr	r1, [r7, #4]
 800113a:	4613      	mov	r3, r2
 800113c:	009b      	lsls	r3, r3, #2
 800113e:	4413      	add	r3, r2
 8001140:	009b      	lsls	r3, r3, #2
 8001142:	440b      	add	r3, r1
 8001144:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8001148:	2201      	movs	r2, #1
 800114a:	801a      	strh	r2, [r3, #0]

  haudio->alt_setting = 0U;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
  haudio->offset = AUDIO_OFFSET_UNKNOWN;
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001158:	2203      	movs	r2, #3
 800115a:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
  haudio->wr_ptr = 0U;
 800115e:	68fb      	ldr	r3, [r7, #12]
 8001160:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001164:	2200      	movs	r2, #0
 8001166:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88
  haudio->rd_ptr = 0U;
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001170:	2200      	movs	r2, #0
 8001172:	f8a3 2b86 	strh.w	r2, [r3, #2950]	; 0xb86
  haudio->rd_enable = 0U;
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800117c:	2200      	movs	r2, #0
 800117e:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85

  /* Initialize the Audio output Hardware layer */
  if (((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->Init(USBD_AUDIO_FREQ,
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001188:	687a      	ldr	r2, [r7, #4]
 800118a:	33b0      	adds	r3, #176	; 0xb0
 800118c:	009b      	lsls	r3, r3, #2
 800118e:	4413      	add	r3, r2
 8001190:	685b      	ldr	r3, [r3, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2200      	movs	r2, #0
 8001196:	2146      	movs	r1, #70	; 0x46
 8001198:	f245 6054 	movw	r0, #22100	; 0x5654
 800119c:	4798      	blx	r3
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <USBD_AUDIO_Init+0x11c>
                                                                      AUDIO_DEFAULT_VOLUME,
                                                                      0U) != 0U)
  {
    return (uint8_t)USBD_FAIL;
 80011a4:	2303      	movs	r3, #3
 80011a6:	e008      	b.n	80011ba <USBD_AUDIO_Init+0x12e>
  }

  /* Prepare Out endpoint to receive 1st packet */
  (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd, haudio->buffer,
 80011a8:	4b06      	ldr	r3, [pc, #24]	; (80011c4 <USBD_AUDIO_Init+0x138>)
 80011aa:	7819      	ldrb	r1, [r3, #0]
 80011ac:	68fb      	ldr	r3, [r7, #12]
 80011ae:	1d1a      	adds	r2, r3, #4
 80011b0:	2358      	movs	r3, #88	; 0x58
 80011b2:	6878      	ldr	r0, [r7, #4]
 80011b4:	f000 fee6 	bl	8001f84 <USBD_LL_PrepareReceive>
                               AUDIO_OUT_PACKET);

  return (uint8_t)USBD_OK;
 80011b8:	2300      	movs	r3, #0
}
 80011ba:	4618      	mov	r0, r3
 80011bc:	3710      	adds	r7, #16
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}
 80011c2:	bf00      	nop
 80011c4:	200000ce 	.word	0x200000ce

080011c8 <USBD_AUDIO_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_AUDIO_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	b082      	sub	sp, #8
 80011cc:	af00      	add	r7, sp, #0
 80011ce:	6078      	str	r0, [r7, #4]
 80011d0:	460b      	mov	r3, r1
 80011d2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  /* Open EP OUT */
  (void)USBD_LL_CloseEP(pdev, AUDIOOutEpAdd);
 80011d4:	4b28      	ldr	r3, [pc, #160]	; (8001278 <USBD_AUDIO_DeInit+0xb0>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4619      	mov	r1, r3
 80011da:	6878      	ldr	r0, [r7, #4]
 80011dc:	f000 fe09 	bl	8001df2 <USBD_LL_CloseEP>
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].is_used = 0U;
 80011e0:	4b25      	ldr	r3, [pc, #148]	; (8001278 <USBD_AUDIO_DeInit+0xb0>)
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	f003 020f 	and.w	r2, r3, #15
 80011e8:	6879      	ldr	r1, [r7, #4]
 80011ea:	4613      	mov	r3, r2
 80011ec:	009b      	lsls	r3, r3, #2
 80011ee:	4413      	add	r3, r2
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	440b      	add	r3, r1
 80011f4:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 80011f8:	2200      	movs	r2, #0
 80011fa:	801a      	strh	r2, [r3, #0]
  pdev->ep_out[AUDIOOutEpAdd & 0xFU].bInterval = 0U;
 80011fc:	4b1e      	ldr	r3, [pc, #120]	; (8001278 <USBD_AUDIO_DeInit+0xb0>)
 80011fe:	781b      	ldrb	r3, [r3, #0]
 8001200:	f003 020f 	and.w	r2, r3, #15
 8001204:	6879      	ldr	r1, [r7, #4]
 8001206:	4613      	mov	r3, r2
 8001208:	009b      	lsls	r3, r3, #2
 800120a:	4413      	add	r3, r2
 800120c:	009b      	lsls	r3, r3, #2
 800120e:	440b      	add	r3, r1
 8001210:	f503 73b3 	add.w	r3, r3, #358	; 0x166
 8001214:	2200      	movs	r2, #0
 8001216:	801a      	strh	r2, [r3, #0]

  /* DeInit  physical Interface components */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	32b0      	adds	r2, #176	; 0xb0
 8001222:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001226:	2b00      	cmp	r3, #0
 8001228:	d020      	beq.n	800126c <USBD_AUDIO_DeInit+0xa4>
  {
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->DeInit(0U);
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001230:	687a      	ldr	r2, [r7, #4]
 8001232:	33b0      	adds	r3, #176	; 0xb0
 8001234:	009b      	lsls	r3, r3, #2
 8001236:	4413      	add	r3, r2
 8001238:	685b      	ldr	r3, [r3, #4]
 800123a:	685b      	ldr	r3, [r3, #4]
 800123c:	2000      	movs	r0, #0
 800123e:	4798      	blx	r3
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	32b0      	adds	r2, #176	; 0xb0
 800124a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800124e:	4618      	mov	r0, r3
 8001250:	f000 feda 	bl	8002008 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	32b0      	adds	r2, #176	; 0xb0
 800125e:	2100      	movs	r1, #0
 8001260:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    pdev->pClassData = NULL;
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	2200      	movs	r2, #0
 8001268:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
  }

  return (uint8_t)USBD_OK;
 800126c:	2300      	movs	r3, #0
}
 800126e:	4618      	mov	r0, r3
 8001270:	3708      	adds	r7, #8
 8001272:	46bd      	mov	sp, r7
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200000ce 	.word	0x200000ce

0800127c <USBD_AUDIO_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_AUDIO_Setup(USBD_HandleTypeDef *pdev,
                                USBD_SetupReqTypedef *req)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b086      	sub	sp, #24
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
 8001284:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8001286:	2300      	movs	r3, #0
 8001288:	813b      	strh	r3, [r7, #8]
  USBD_StatusTypeDef ret = USBD_OK;
 800128a:	2300      	movs	r3, #0
 800128c:	75fb      	strb	r3, [r7, #23]

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	32b0      	adds	r2, #176	; 0xb0
 8001298:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800129c:	613b      	str	r3, [r7, #16]

  if (haudio == NULL)
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d101      	bne.n	80012a8 <USBD_AUDIO_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80012a4:	2303      	movs	r3, #3
 80012a6:	e0c1      	b.n	800142c <USBD_AUDIO_Setup+0x1b0>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	781b      	ldrb	r3, [r3, #0]
 80012ac:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80012b0:	2b00      	cmp	r3, #0
 80012b2:	d01a      	beq.n	80012ea <USBD_AUDIO_Setup+0x6e>
 80012b4:	2b20      	cmp	r3, #32
 80012b6:	f040 80b1 	bne.w	800141c <USBD_AUDIO_Setup+0x1a0>
  {
    case USB_REQ_TYPE_CLASS:
      switch (req->bRequest)
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	785b      	ldrb	r3, [r3, #1]
 80012be:	2b01      	cmp	r3, #1
 80012c0:	d006      	beq.n	80012d0 <USBD_AUDIO_Setup+0x54>
 80012c2:	2b81      	cmp	r3, #129	; 0x81
 80012c4:	d109      	bne.n	80012da <USBD_AUDIO_Setup+0x5e>
      {
        case AUDIO_REQ_GET_CUR:
          AUDIO_REQ_GetCurrent(pdev, req);
 80012c6:	6839      	ldr	r1, [r7, #0]
 80012c8:	6878      	ldr	r0, [r7, #4]
 80012ca:	f000 f9d7 	bl	800167c <AUDIO_REQ_GetCurrent>
          break;
 80012ce:	e00b      	b.n	80012e8 <USBD_AUDIO_Setup+0x6c>

        case AUDIO_REQ_SET_CUR:
          AUDIO_REQ_SetCurrent(pdev, req);
 80012d0:	6839      	ldr	r1, [r7, #0]
 80012d2:	6878      	ldr	r0, [r7, #4]
 80012d4:	f000 f9fe 	bl	80016d4 <AUDIO_REQ_SetCurrent>
          break;
 80012d8:	e006      	b.n	80012e8 <USBD_AUDIO_Setup+0x6c>

        default:
          USBD_CtlError(pdev, req);
 80012da:	6839      	ldr	r1, [r7, #0]
 80012dc:	6878      	ldr	r0, [r7, #4]
 80012de:	f006 f922 	bl	8007526 <USBD_CtlError>
          ret = USBD_FAIL;
 80012e2:	2303      	movs	r3, #3
 80012e4:	75fb      	strb	r3, [r7, #23]
          break;
 80012e6:	bf00      	nop
      }
      break;
 80012e8:	e09f      	b.n	800142a <USBD_AUDIO_Setup+0x1ae>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80012ea:	683b      	ldr	r3, [r7, #0]
 80012ec:	785b      	ldrb	r3, [r3, #1]
 80012ee:	2b0b      	cmp	r3, #11
 80012f0:	f200 8089 	bhi.w	8001406 <USBD_AUDIO_Setup+0x18a>
 80012f4:	a201      	add	r2, pc, #4	; (adr r2, 80012fc <USBD_AUDIO_Setup+0x80>)
 80012f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012fa:	bf00      	nop
 80012fc:	0800132d 	.word	0x0800132d
 8001300:	08001415 	.word	0x08001415
 8001304:	08001407 	.word	0x08001407
 8001308:	08001407 	.word	0x08001407
 800130c:	08001407 	.word	0x08001407
 8001310:	08001407 	.word	0x08001407
 8001314:	08001357 	.word	0x08001357
 8001318:	08001407 	.word	0x08001407
 800131c:	08001407 	.word	0x08001407
 8001320:	08001407 	.word	0x08001407
 8001324:	0800139f 	.word	0x0800139f
 8001328:	080013c7 	.word	0x080013c7
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8001332:	b2db      	uxtb	r3, r3
 8001334:	2b03      	cmp	r3, #3
 8001336:	d107      	bne.n	8001348 <USBD_AUDIO_Setup+0xcc>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8001338:	f107 0308 	add.w	r3, r7, #8
 800133c:	2202      	movs	r2, #2
 800133e:	4619      	mov	r1, r3
 8001340:	6878      	ldr	r0, [r7, #4]
 8001342:	f006 f961 	bl	8007608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8001346:	e068      	b.n	800141a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 8001348:	6839      	ldr	r1, [r7, #0]
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	f006 f8eb 	bl	8007526 <USBD_CtlError>
            ret = USBD_FAIL;
 8001350:	2303      	movs	r3, #3
 8001352:	75fb      	strb	r3, [r7, #23]
          break;
 8001354:	e061      	b.n	800141a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == AUDIO_DESCRIPTOR_TYPE)
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	885b      	ldrh	r3, [r3, #2]
 800135a:	0a1b      	lsrs	r3, r3, #8
 800135c:	b29b      	uxth	r3, r3
 800135e:	2b21      	cmp	r3, #33	; 0x21
 8001360:	d15a      	bne.n	8001418 <USBD_AUDIO_Setup+0x19c>
          {
            pbuf = (uint8_t *)USBD_AUDIO_GetAudioHeaderDesc(pdev->pConfDesc);
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	f8d3 32d0 	ldr.w	r3, [r3, #720]	; 0x2d0
 8001368:	4618      	mov	r0, r3
 800136a:	f000 fa21 	bl	80017b0 <USBD_AUDIO_GetAudioHeaderDesc>
 800136e:	60f8      	str	r0, [r7, #12]
            if (pbuf != NULL)
 8001370:	68fb      	ldr	r3, [r7, #12]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d00c      	beq.n	8001390 <USBD_AUDIO_Setup+0x114>
            {
              len = MIN(USB_AUDIO_DESC_SIZ, req->wLength);
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	88db      	ldrh	r3, [r3, #6]
 800137a:	2b09      	cmp	r3, #9
 800137c:	bf28      	it	cs
 800137e:	2309      	movcs	r3, #9
 8001380:	817b      	strh	r3, [r7, #10]
              (void)USBD_CtlSendData(pdev, pbuf, len);
 8001382:	897b      	ldrh	r3, [r7, #10]
 8001384:	461a      	mov	r2, r3
 8001386:	68f9      	ldr	r1, [r7, #12]
 8001388:	6878      	ldr	r0, [r7, #4]
 800138a:	f006 f93d 	bl	8007608 <USBD_CtlSendData>
            {
              USBD_CtlError(pdev, req);
              ret = USBD_FAIL;
            }
          }
          break;
 800138e:	e043      	b.n	8001418 <USBD_AUDIO_Setup+0x19c>
              USBD_CtlError(pdev, req);
 8001390:	6839      	ldr	r1, [r7, #0]
 8001392:	6878      	ldr	r0, [r7, #4]
 8001394:	f006 f8c7 	bl	8007526 <USBD_CtlError>
              ret = USBD_FAIL;
 8001398:	2303      	movs	r3, #3
 800139a:	75fb      	strb	r3, [r7, #23]
          break;
 800139c:	e03c      	b.n	8001418 <USBD_AUDIO_Setup+0x19c>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80013a4:	b2db      	uxtb	r3, r3
 80013a6:	2b03      	cmp	r3, #3
 80013a8:	d106      	bne.n	80013b8 <USBD_AUDIO_Setup+0x13c>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&haudio->alt_setting, 1U);
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	2201      	movs	r2, #1
 80013ae:	4619      	mov	r1, r3
 80013b0:	6878      	ldr	r0, [r7, #4]
 80013b2:	f006 f929 	bl	8007608 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80013b6:	e030      	b.n	800141a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80013b8:	6839      	ldr	r1, [r7, #0]
 80013ba:	6878      	ldr	r0, [r7, #4]
 80013bc:	f006 f8b3 	bl	8007526 <USBD_CtlError>
            ret = USBD_FAIL;
 80013c0:	2303      	movs	r3, #3
 80013c2:	75fb      	strb	r3, [r7, #23]
          break;
 80013c4:	e029      	b.n	800141a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80013cc:	b2db      	uxtb	r3, r3
 80013ce:	2b03      	cmp	r3, #3
 80013d0:	d112      	bne.n	80013f8 <USBD_AUDIO_Setup+0x17c>
          {
            if ((uint8_t)(req->wValue) <= USBD_MAX_NUM_INTERFACES)
 80013d2:	683b      	ldr	r3, [r7, #0]
 80013d4:	885b      	ldrh	r3, [r3, #2]
 80013d6:	b2db      	uxtb	r3, r3
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d806      	bhi.n	80013ea <USBD_AUDIO_Setup+0x16e>
            {
              haudio->alt_setting = (uint8_t)(req->wValue);
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	885b      	ldrh	r3, [r3, #2]
 80013e0:	b2db      	uxtb	r3, r3
 80013e2:	461a      	mov	r2, r3
 80013e4:	693b      	ldr	r3, [r7, #16]
 80013e6:	601a      	str	r2, [r3, #0]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80013e8:	e017      	b.n	800141a <USBD_AUDIO_Setup+0x19e>
              USBD_CtlError(pdev, req);
 80013ea:	6839      	ldr	r1, [r7, #0]
 80013ec:	6878      	ldr	r0, [r7, #4]
 80013ee:	f006 f89a 	bl	8007526 <USBD_CtlError>
              ret = USBD_FAIL;
 80013f2:	2303      	movs	r3, #3
 80013f4:	75fb      	strb	r3, [r7, #23]
          break;
 80013f6:	e010      	b.n	800141a <USBD_AUDIO_Setup+0x19e>
            USBD_CtlError(pdev, req);
 80013f8:	6839      	ldr	r1, [r7, #0]
 80013fa:	6878      	ldr	r0, [r7, #4]
 80013fc:	f006 f893 	bl	8007526 <USBD_CtlError>
            ret = USBD_FAIL;
 8001400:	2303      	movs	r3, #3
 8001402:	75fb      	strb	r3, [r7, #23]
          break;
 8001404:	e009      	b.n	800141a <USBD_AUDIO_Setup+0x19e>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8001406:	6839      	ldr	r1, [r7, #0]
 8001408:	6878      	ldr	r0, [r7, #4]
 800140a:	f006 f88c 	bl	8007526 <USBD_CtlError>
          ret = USBD_FAIL;
 800140e:	2303      	movs	r3, #3
 8001410:	75fb      	strb	r3, [r7, #23]
          break;
 8001412:	e002      	b.n	800141a <USBD_AUDIO_Setup+0x19e>
          break;
 8001414:	bf00      	nop
 8001416:	e008      	b.n	800142a <USBD_AUDIO_Setup+0x1ae>
          break;
 8001418:	bf00      	nop
      }
      break;
 800141a:	e006      	b.n	800142a <USBD_AUDIO_Setup+0x1ae>
    default:
      USBD_CtlError(pdev, req);
 800141c:	6839      	ldr	r1, [r7, #0]
 800141e:	6878      	ldr	r0, [r7, #4]
 8001420:	f006 f881 	bl	8007526 <USBD_CtlError>
      ret = USBD_FAIL;
 8001424:	2303      	movs	r3, #3
 8001426:	75fb      	strb	r3, [r7, #23]
      break;
 8001428:	bf00      	nop
  }

  return (uint8_t)ret;
 800142a:	7dfb      	ldrb	r3, [r7, #23]
}
 800142c:	4618      	mov	r0, r3
 800142e:	3718      	adds	r7, #24
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}

08001434 <USBD_AUDIO_GetCfgDesc>:
  *         return configuration descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetCfgDesc(uint16_t *length)
{
 8001434:	b480      	push	{r7}
 8001436:	b083      	sub	sp, #12
 8001438:	af00      	add	r7, sp, #0
 800143a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_CfgDesc);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2286      	movs	r2, #134	; 0x86
 8001440:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_CfgDesc;
 8001442:	4b03      	ldr	r3, [pc, #12]	; (8001450 <USBD_AUDIO_GetCfgDesc+0x1c>)
}
 8001444:	4618      	mov	r0, r3
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	2000003c 	.word	0x2000003c

08001454 <USBD_AUDIO_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001454:	b480      	push	{r7}
 8001456:	b083      	sub	sp, #12
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	460b      	mov	r3, r1
 800145e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  /* Only OUT data are processed */
  return (uint8_t)USBD_OK;
 8001460:	2300      	movs	r3, #0
}
 8001462:	4618      	mov	r0, r3
 8001464:	370c      	adds	r7, #12
 8001466:	46bd      	mov	sp, r7
 8001468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146c:	4770      	bx	lr

0800146e <USBD_AUDIO_EP0_RxReady>:
  *         handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 800146e:	b580      	push	{r7, lr}
 8001470:	b084      	sub	sp, #16
 8001472:	af00      	add	r7, sp, #0
 8001474:	6078      	str	r0, [r7, #4]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	32b0      	adds	r2, #176	; 0xb0
 8001480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001484:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	2b00      	cmp	r3, #0
 800148a:	d101      	bne.n	8001490 <USBD_AUDIO_EP0_RxReady+0x22>
  {
    return (uint8_t)USBD_FAIL;
 800148c:	2303      	movs	r3, #3
 800148e:	e02a      	b.n	80014e6 <USBD_AUDIO_EP0_RxReady+0x78>
  }

  if (haudio->control.cmd == AUDIO_REQ_SET_CUR)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001496:	f893 3b8a 	ldrb.w	r3, [r3, #2954]	; 0xb8a
 800149a:	2b01      	cmp	r3, #1
 800149c:	d122      	bne.n	80014e4 <USBD_AUDIO_EP0_RxReady+0x76>
  {
    /* In this driver, to simplify code, only SET_CUR request is managed */

    if (haudio->control.unit == AUDIO_OUT_STREAMING_CTRL)
 800149e:	68fb      	ldr	r3, [r7, #12]
 80014a0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014a4:	f893 3bcc 	ldrb.w	r3, [r3, #3020]	; 0xbcc
 80014a8:	2b02      	cmp	r3, #2
 80014aa:	d11b      	bne.n	80014e4 <USBD_AUDIO_EP0_RxReady+0x76>
    {
      ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->MuteCtl(haudio->control.data[0]);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 80014b2:	687a      	ldr	r2, [r7, #4]
 80014b4:	33b0      	adds	r3, #176	; 0xb0
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	4413      	add	r3, r2
 80014ba:	685b      	ldr	r3, [r3, #4]
 80014bc:	691b      	ldr	r3, [r3, #16]
 80014be:	68fa      	ldr	r2, [r7, #12]
 80014c0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80014c4:	f892 2b8b 	ldrb.w	r2, [r2, #2955]	; 0xb8b
 80014c8:	4610      	mov	r0, r2
 80014ca:	4798      	blx	r3
      haudio->control.cmd = 0U;
 80014cc:	68fb      	ldr	r3, [r7, #12]
 80014ce:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014d2:	2200      	movs	r2, #0
 80014d4:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
      haudio->control.len = 0U;
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80014de:	2200      	movs	r2, #0
 80014e0:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    }
  }

  return (uint8_t)USBD_OK;
 80014e4:	2300      	movs	r3, #0
}
 80014e6:	4618      	mov	r0, r3
 80014e8:	3710      	adds	r7, #16
 80014ea:	46bd      	mov	sp, r7
 80014ec:	bd80      	pop	{r7, pc}

080014ee <USBD_AUDIO_EP0_TxReady>:
  *         handle EP0 TRx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_EP0_TxReady(USBD_HandleTypeDef *pdev)
{
 80014ee:	b480      	push	{r7}
 80014f0:	b083      	sub	sp, #12
 80014f2:	af00      	add	r7, sp, #0
 80014f4:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  /* Only OUT control data are processed */
  return (uint8_t)USBD_OK;
 80014f6:	2300      	movs	r3, #0
}
 80014f8:	4618      	mov	r0, r3
 80014fa:	370c      	adds	r7, #12
 80014fc:	46bd      	mov	sp, r7
 80014fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001502:	4770      	bx	lr

08001504 <USBD_AUDIO_SOF>:
  *         handle SOF event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t USBD_AUDIO_SOF(USBD_HandleTypeDef *pdev)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(pdev);

  return (uint8_t)USBD_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	370c      	adds	r7, #12
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr

0800151a <USBD_AUDIO_IsoINIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoINIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800151a:	b480      	push	{r7}
 800151c:	b083      	sub	sp, #12
 800151e:	af00      	add	r7, sp, #0
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	370c      	adds	r7, #12
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr

08001534 <USBD_AUDIO_IsoOutIncomplete>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_IsoOutIncomplete(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	460b      	mov	r3, r1
 800153e:	70fb      	strb	r3, [r7, #3]
  UNUSED(pdev);
  UNUSED(epnum);

  return (uint8_t)USBD_OK;
 8001540:	2300      	movs	r3, #0
}
 8001542:	4618      	mov	r0, r3
 8001544:	370c      	adds	r7, #12
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
	...

08001550 <USBD_AUDIO_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_AUDIO_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8001550:	b580      	push	{r7, lr}
 8001552:	b084      	sub	sp, #16
 8001554:	af00      	add	r7, sp, #0
 8001556:	6078      	str	r0, [r7, #4]
 8001558:	460b      	mov	r3, r1
 800155a:	70fb      	strb	r3, [r7, #3]
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  AUDIOOutEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_OUT, USBD_EP_TYPE_ISOC);
#endif /* USE_USBD_COMPOSITE */

  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	32b0      	adds	r2, #176	; 0xb0
 8001566:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800156a:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	2b00      	cmp	r3, #0
 8001570:	d101      	bne.n	8001576 <USBD_AUDIO_DataOut+0x26>
  {
    return (uint8_t)USBD_FAIL;
 8001572:	2303      	movs	r3, #3
 8001574:	e07c      	b.n	8001670 <USBD_AUDIO_DataOut+0x120>
  }

  if (epnum == AUDIOOutEpAdd)
 8001576:	4b40      	ldr	r3, [pc, #256]	; (8001678 <USBD_AUDIO_DataOut+0x128>)
 8001578:	781b      	ldrb	r3, [r3, #0]
 800157a:	78fa      	ldrb	r2, [r7, #3]
 800157c:	429a      	cmp	r2, r3
 800157e:	d176      	bne.n	800166e <USBD_AUDIO_DataOut+0x11e>
  {
    /* Get received data packet length */
    PacketSize = (uint16_t)USBD_LL_GetRxDataSize(pdev, epnum);
 8001580:	78fb      	ldrb	r3, [r7, #3]
 8001582:	4619      	mov	r1, r3
 8001584:	6878      	ldr	r0, [r7, #4]
 8001586:	f000 fd1e 	bl	8001fc6 <USBD_LL_GetRxDataSize>
 800158a:	4603      	mov	r3, r0
 800158c:	817b      	strh	r3, [r7, #10]

    /* Packet received Callback */
    ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->PeriodicTC(&haudio->buffer[haudio->wr_ptr],
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	33b0      	adds	r3, #176	; 0xb0
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	4413      	add	r3, r2
 800159c:	685b      	ldr	r3, [r3, #4]
 800159e:	695b      	ldr	r3, [r3, #20]
 80015a0:	68fa      	ldr	r2, [r7, #12]
 80015a2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80015a6:	f8b2 2b88 	ldrh.w	r2, [r2, #2952]	; 0xb88
 80015aa:	4611      	mov	r1, r2
 80015ac:	68fa      	ldr	r2, [r7, #12]
 80015ae:	440a      	add	r2, r1
 80015b0:	1d10      	adds	r0, r2, #4
 80015b2:	8979      	ldrh	r1, [r7, #10]
 80015b4:	2201      	movs	r2, #1
 80015b6:	4798      	blx	r3
                                                                          PacketSize, AUDIO_OUT_TC);

    /* Increment the Buffer pointer or roll it back when all buffers are full */
    haudio->wr_ptr += PacketSize;
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015be:	f8b3 2b88 	ldrh.w	r2, [r3, #2952]	; 0xb88
 80015c2:	897b      	ldrh	r3, [r7, #10]
 80015c4:	4413      	add	r3, r2
 80015c6:	b29a      	uxth	r2, r3
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015ce:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

    if (haudio->wr_ptr == AUDIO_TOTAL_BUF_SIZE)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015d8:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 80015dc:	f5b3 5fdc 	cmp.w	r3, #7040	; 0x1b80
 80015e0:	d121      	bne.n	8001626 <USBD_AUDIO_DataOut+0xd6>
    {
      /* All buffers are full: roll back */
      haudio->wr_ptr = 0U;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015e8:	2200      	movs	r2, #0
 80015ea:	f8a3 2b88 	strh.w	r2, [r3, #2952]	; 0xb88

      if (haudio->offset == AUDIO_OFFSET_UNKNOWN)
 80015ee:	68fb      	ldr	r3, [r7, #12]
 80015f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80015f4:	f893 3b84 	ldrb.w	r3, [r3, #2948]	; 0xb84
 80015f8:	2b03      	cmp	r3, #3
 80015fa:	d114      	bne.n	8001626 <USBD_AUDIO_DataOut+0xd6>
      {
        ((USBD_AUDIO_ItfTypeDef *)pdev->pUserData[pdev->classId])->AudioCmd(&haudio->buffer[0],
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001602:	687a      	ldr	r2, [r7, #4]
 8001604:	33b0      	adds	r3, #176	; 0xb0
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	4413      	add	r3, r2
 800160a:	685b      	ldr	r3, [r3, #4]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	68fa      	ldr	r2, [r7, #12]
 8001610:	1d10      	adds	r0, r2, #4
 8001612:	2201      	movs	r2, #1
 8001614:	f44f 615c 	mov.w	r1, #3520	; 0xdc0
 8001618:	4798      	blx	r3
                                                                            AUDIO_TOTAL_BUF_SIZE / 2U,
                                                                            AUDIO_CMD_START);
        haudio->offset = AUDIO_OFFSET_NONE;
 800161a:	68fb      	ldr	r3, [r7, #12]
 800161c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001620:	2200      	movs	r2, #0
 8001622:	f883 2b84 	strb.w	r2, [r3, #2948]	; 0xb84
      }
    }

    if (haudio->rd_enable == 0U)
 8001626:	68fb      	ldr	r3, [r7, #12]
 8001628:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800162c:	f893 3b85 	ldrb.w	r3, [r3, #2949]	; 0xb85
 8001630:	2b00      	cmp	r3, #0
 8001632:	d10d      	bne.n	8001650 <USBD_AUDIO_DataOut+0x100>
    {
      if (haudio->wr_ptr == (AUDIO_TOTAL_BUF_SIZE / 2U))
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800163a:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 800163e:	f5b3 6f5c 	cmp.w	r3, #3520	; 0xdc0
 8001642:	d105      	bne.n	8001650 <USBD_AUDIO_DataOut+0x100>
      {
        haudio->rd_enable = 1U;
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800164a:	2201      	movs	r2, #1
 800164c:	f883 2b85 	strb.w	r2, [r3, #2949]	; 0xb85
      }
    }

    /* Prepare Out endpoint to receive next audio packet */
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8001650:	4b09      	ldr	r3, [pc, #36]	; (8001678 <USBD_AUDIO_DataOut+0x128>)
 8001652:	7819      	ldrb	r1, [r3, #0]
                                 &haudio->buffer[haudio->wr_ptr],
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800165a:	f8b3 3b88 	ldrh.w	r3, [r3, #2952]	; 0xb88
 800165e:	461a      	mov	r2, r3
    (void)USBD_LL_PrepareReceive(pdev, AUDIOOutEpAdd,
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	1d1a      	adds	r2, r3, #4
 8001666:	2358      	movs	r3, #88	; 0x58
 8001668:	6878      	ldr	r0, [r7, #4]
 800166a:	f000 fc8b 	bl	8001f84 <USBD_LL_PrepareReceive>
                                 AUDIO_OUT_PACKET);
  }

  return (uint8_t)USBD_OK;
 800166e:	2300      	movs	r3, #0
}
 8001670:	4618      	mov	r0, r3
 8001672:	3710      	adds	r7, #16
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	200000ce 	.word	0x200000ce

0800167c <AUDIO_REQ_GetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_GetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	32b0      	adds	r2, #176	; 0xb0
 8001690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001694:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	2b00      	cmp	r3, #0
 800169a:	d017      	beq.n	80016cc <AUDIO_REQ_GetCurrent+0x50>
  {
    return;
  }

  (void)USBD_memset(haudio->control.data, 0, USB_MAX_EP0_SIZE);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80016a2:	330b      	adds	r3, #11
 80016a4:	2240      	movs	r2, #64	; 0x40
 80016a6:	2100      	movs	r1, #0
 80016a8:	4618      	mov	r0, r3
 80016aa:	f006 f857 	bl	800775c <memset>

  /* Send the current mute state */
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 80016b4:	330b      	adds	r3, #11
                         MIN(req->wLength, USB_MAX_EP0_SIZE));
 80016b6:	683a      	ldr	r2, [r7, #0]
 80016b8:	88d2      	ldrh	r2, [r2, #6]
 80016ba:	2a40      	cmp	r2, #64	; 0x40
 80016bc:	bf28      	it	cs
 80016be:	2240      	movcs	r2, #64	; 0x40
 80016c0:	b292      	uxth	r2, r2
  (void)USBD_CtlSendData(pdev, haudio->control.data,
 80016c2:	4619      	mov	r1, r3
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f005 ff9f 	bl	8007608 <USBD_CtlSendData>
 80016ca:	e000      	b.n	80016ce <AUDIO_REQ_GetCurrent+0x52>
    return;
 80016cc:	bf00      	nop
}
 80016ce:	3710      	adds	r7, #16
 80016d0:	46bd      	mov	sp, r7
 80016d2:	bd80      	pop	{r7, pc}

080016d4 <AUDIO_REQ_SetCurrent>:
  * @param  pdev: device instance
  * @param  req: setup class request
  * @retval status
  */
static void AUDIO_REQ_SetCurrent(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b084      	sub	sp, #16
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  USBD_AUDIO_HandleTypeDef *haudio;
  haudio = (USBD_AUDIO_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	32b0      	adds	r2, #176	; 0xb0
 80016e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80016ec:	60fb      	str	r3, [r7, #12]

  if (haudio == NULL)
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d02f      	beq.n	8001754 <AUDIO_REQ_SetCurrent+0x80>
  {
    return;
  }

  if (req->wLength != 0U)
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	88db      	ldrh	r3, [r3, #6]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d02c      	beq.n	8001756 <AUDIO_REQ_SetCurrent+0x82>
  {
    haudio->control.cmd = AUDIO_REQ_SET_CUR;     /* Set the request value */
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001702:	2201      	movs	r2, #1
 8001704:	f883 2b8a 	strb.w	r2, [r3, #2954]	; 0xb8a
    haudio->control.len = (uint8_t)MIN(req->wLength, USB_MAX_EP0_SIZE);  /* Set the request data length */
 8001708:	683b      	ldr	r3, [r7, #0]
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	2b3f      	cmp	r3, #63	; 0x3f
 800170e:	d803      	bhi.n	8001718 <AUDIO_REQ_SetCurrent+0x44>
 8001710:	683b      	ldr	r3, [r7, #0]
 8001712:	88db      	ldrh	r3, [r3, #6]
 8001714:	b2da      	uxtb	r2, r3
 8001716:	e000      	b.n	800171a <AUDIO_REQ_SetCurrent+0x46>
 8001718:	2240      	movs	r2, #64	; 0x40
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001720:	f883 2bcb 	strb.w	r2, [r3, #3019]	; 0xbcb
    haudio->control.unit = HIBYTE(req->wIndex);  /* Set the request target unit */
 8001724:	683b      	ldr	r3, [r7, #0]
 8001726:	889b      	ldrh	r3, [r3, #4]
 8001728:	0a1b      	lsrs	r3, r3, #8
 800172a:	b29b      	uxth	r3, r3
 800172c:	b2da      	uxtb	r2, r3
 800172e:	68fb      	ldr	r3, [r7, #12]
 8001730:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001734:	f883 2bcc 	strb.w	r2, [r3, #3020]	; 0xbcc

    /* Prepare the reception of the buffer over EP0 */
    (void)USBD_CtlPrepareRx(pdev, haudio->control.data, haudio->control.len);
 8001738:	68fb      	ldr	r3, [r7, #12]
 800173a:	f503 53dc 	add.w	r3, r3, #7040	; 0x1b80
 800173e:	330b      	adds	r3, #11
 8001740:	68fa      	ldr	r2, [r7, #12]
 8001742:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001746:	f892 2bcb 	ldrb.w	r2, [r2, #3019]	; 0xbcb
 800174a:	4619      	mov	r1, r3
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f005 ff87 	bl	8007660 <USBD_CtlPrepareRx>
 8001752:	e000      	b.n	8001756 <AUDIO_REQ_SetCurrent+0x82>
    return;
 8001754:	bf00      	nop
  }
}
 8001756:	3710      	adds	r7, #16
 8001758:	46bd      	mov	sp, r7
 800175a:	bd80      	pop	{r7, pc}

0800175c <USBD_AUDIO_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_AUDIO_GetDeviceQualifierDesc(uint16_t *length)
{
 800175c:	b480      	push	{r7}
 800175e:	b083      	sub	sp, #12
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_AUDIO_DeviceQualifierDesc);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	220a      	movs	r2, #10
 8001768:	801a      	strh	r2, [r3, #0]

  return USBD_AUDIO_DeviceQualifierDesc;
 800176a:	4b03      	ldr	r3, [pc, #12]	; (8001778 <USBD_AUDIO_GetDeviceQualifierDesc+0x1c>)
}
 800176c:	4618      	mov	r0, r3
 800176e:	370c      	adds	r7, #12
 8001770:	46bd      	mov	sp, r7
 8001772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001776:	4770      	bx	lr
 8001778:	200000c4 	.word	0x200000c4

0800177c <USBD_AUDIO_RegisterInterface>:
  * @param  fops: Audio interface callback
  * @retval status
  */
uint8_t USBD_AUDIO_RegisterInterface(USBD_HandleTypeDef *pdev,
                                     USBD_AUDIO_ItfTypeDef *fops)
{
 800177c:	b480      	push	{r7}
 800177e:	b083      	sub	sp, #12
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
 8001784:	6039      	str	r1, [r7, #0]
  if (fops == NULL)
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d101      	bne.n	8001790 <USBD_AUDIO_RegisterInterface+0x14>
  {
    return (uint8_t)USBD_FAIL;
 800178c:	2303      	movs	r3, #3
 800178e:	e009      	b.n	80017a4 <USBD_AUDIO_RegisterInterface+0x28>
  }

  pdev->pUserData[pdev->classId] = fops;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	f8d3 32d4 	ldr.w	r3, [r3, #724]	; 0x2d4
 8001796:	687a      	ldr	r2, [r7, #4]
 8001798:	33b0      	adds	r3, #176	; 0xb0
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	605a      	str	r2, [r3, #4]

  return (uint8_t)USBD_OK;
 80017a2:	2300      	movs	r3, #0
}
 80017a4:	4618      	mov	r0, r3
 80017a6:	370c      	adds	r7, #12
 80017a8:	46bd      	mov	sp, r7
 80017aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ae:	4770      	bx	lr

080017b0 <USBD_AUDIO_GetAudioHeaderDesc>:
  * @param  pdev: device instance
  * @param  pConfDesc:  pointer to Bos descriptor
  * @retval pointer to the Audio AC Header descriptor
  */
static void *USBD_AUDIO_GetAudioHeaderDesc(uint8_t *pConfDesc)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b086      	sub	sp, #24
 80017b4:	af00      	add	r7, sp, #0
 80017b6:	6078      	str	r0, [r7, #4]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	60fb      	str	r3, [r7, #12]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	617b      	str	r3, [r7, #20]
  uint8_t *pAudioDesc =  NULL;
 80017c0:	2300      	movs	r3, #0
 80017c2:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80017c4:	68fb      	ldr	r3, [r7, #12]
 80017c6:	885b      	ldrh	r3, [r3, #2]
 80017c8:	b29a      	uxth	r2, r3
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	b29b      	uxth	r3, r3
 80017d0:	429a      	cmp	r2, r3
 80017d2:	d91c      	bls.n	800180e <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
  {
    ptr = desc->bLength;
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	781b      	ldrb	r3, [r3, #0]
 80017d8:	b29b      	uxth	r3, r3
 80017da:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80017dc:	e011      	b.n	8001802 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80017de:	f107 030a 	add.w	r3, r7, #10
 80017e2:	4619      	mov	r1, r3
 80017e4:	6978      	ldr	r0, [r7, #20]
 80017e6:	f005 f8a0 	bl	800692a <USBD_GetNextDesc>
 80017ea:	6178      	str	r0, [r7, #20]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	785b      	ldrb	r3, [r3, #1]
 80017f0:	2b24      	cmp	r3, #36	; 0x24
 80017f2:	d106      	bne.n	8001802 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
          (pdesc->bDescriptorSubType == AUDIO_CONTROL_HEADER))
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	789b      	ldrb	r3, [r3, #2]
      if ((pdesc->bDescriptorType == AUDIO_INTERFACE_DESCRIPTOR_TYPE) &&
 80017f8:	2b01      	cmp	r3, #1
 80017fa:	d102      	bne.n	8001802 <USBD_AUDIO_GetAudioHeaderDesc+0x52>
      {
        pAudioDesc = (uint8_t *)pdesc;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	613b      	str	r3, [r7, #16]
        break;
 8001800:	e005      	b.n	800180e <USBD_AUDIO_GetAudioHeaderDesc+0x5e>
    while (ptr < desc->wTotalLength)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	885b      	ldrh	r3, [r3, #2]
 8001806:	b29a      	uxth	r2, r3
 8001808:	897b      	ldrh	r3, [r7, #10]
 800180a:	429a      	cmp	r2, r3
 800180c:	d8e7      	bhi.n	80017de <USBD_AUDIO_GetAudioHeaderDesc+0x2e>
      }
    }
  }
  return pAudioDesc;
 800180e:	693b      	ldr	r3, [r7, #16]
}
 8001810:	4618      	mov	r0, r3
 8001812:	3718      	adds	r7, #24
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}

08001818 <AUDIO_Init_HS>:
  * @param  Volume: Initial volume level (from 0 (Mute) to 100 (Max))
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_Init_HS(uint32_t AudioFreq, uint32_t Volume, uint32_t options)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	60f8      	str	r0, [r7, #12]
 8001820:	60b9      	str	r1, [r7, #8]
 8001822:	607a      	str	r2, [r7, #4]
  /* USER CODE BEGIN 9 */
  UNUSED(AudioFreq);
  UNUSED(Volume);
  UNUSED(options);
  return (USBD_OK);
 8001824:	2300      	movs	r3, #0
  /* USER CODE END 9 */
}
 8001826:	4618      	mov	r0, r3
 8001828:	3714      	adds	r7, #20
 800182a:	46bd      	mov	sp, r7
 800182c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001830:	4770      	bx	lr

08001832 <AUDIO_DeInit_HS>:
  * @brief  DeInitializes the AUDIO media low layer
  * @param  options: Reserved for future use
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_DeInit_HS(uint32_t options)
{
 8001832:	b480      	push	{r7}
 8001834:	b083      	sub	sp, #12
 8001836:	af00      	add	r7, sp, #0
 8001838:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 10 */
  UNUSED(options);
  return (USBD_OK);
 800183a:	2300      	movs	r3, #0
  /* USER CODE END 10 */
}
 800183c:	4618      	mov	r0, r3
 800183e:	370c      	adds	r7, #12
 8001840:	46bd      	mov	sp, r7
 8001842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001846:	4770      	bx	lr

08001848 <AUDIO_AudioCmd_HS>:
  * @param  size: Number of data to be sent (in bytes)
  * @param  cmd: Command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_AudioCmd_HS(uint8_t* pbuf, uint32_t size, uint8_t cmd)
{
 8001848:	b480      	push	{r7}
 800184a:	b085      	sub	sp, #20
 800184c:	af00      	add	r7, sp, #0
 800184e:	60f8      	str	r0, [r7, #12]
 8001850:	60b9      	str	r1, [r7, #8]
 8001852:	4613      	mov	r3, r2
 8001854:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 11 */
  switch(cmd)
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	2b01      	cmp	r3, #1
 800185a:	d001      	beq.n	8001860 <AUDIO_AudioCmd_HS+0x18>
 800185c:	2b02      	cmp	r3, #2
  {
    case AUDIO_CMD_START:
    break;

    case AUDIO_CMD_PLAY:
    break;
 800185e:	e000      	b.n	8001862 <AUDIO_AudioCmd_HS+0x1a>
    break;
 8001860:	bf00      	nop
  }
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 8001862:	2300      	movs	r3, #0
  /* USER CODE END 11 */
}
 8001864:	4618      	mov	r0, r3
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr

08001870 <AUDIO_VolumeCtl_HS>:
  * @brief  Controls AUDIO Volume.
  * @param  vol: volume level (0..100)
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_VolumeCtl_HS(uint8_t vol)
{
 8001870:	b480      	push	{r7}
 8001872:	b083      	sub	sp, #12
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 12 */
  UNUSED(vol);
  return (USBD_OK);
 800187a:	2300      	movs	r3, #0
  /* USER CODE END 12 */
}
 800187c:	4618      	mov	r0, r3
 800187e:	370c      	adds	r7, #12
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr

08001888 <AUDIO_MuteCtl_HS>:
  * @brief  Controls AUDIO Mute.
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_MuteCtl_HS(uint8_t cmd)
{
 8001888:	b480      	push	{r7}
 800188a:	b083      	sub	sp, #12
 800188c:	af00      	add	r7, sp, #0
 800188e:	4603      	mov	r3, r0
 8001890:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 13 */
  UNUSED(cmd);
  return (USBD_OK);
 8001892:	2300      	movs	r3, #0
  /* USER CODE END 13 */
}
 8001894:	4618      	mov	r0, r3
 8001896:	370c      	adds	r7, #12
 8001898:	46bd      	mov	sp, r7
 800189a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189e:	4770      	bx	lr

080018a0 <AUDIO_PeriodicTC_HS>:
  * @brief  AUDIO_PeriodicTC_HS
  * @param  cmd: command opcode
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_PeriodicTC_HS(uint8_t *pbuf, uint32_t size, uint8_t cmd)
{
 80018a0:	b480      	push	{r7}
 80018a2:	b085      	sub	sp, #20
 80018a4:	af00      	add	r7, sp, #0
 80018a6:	60f8      	str	r0, [r7, #12]
 80018a8:	60b9      	str	r1, [r7, #8]
 80018aa:	4613      	mov	r3, r2
 80018ac:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN 14 */
  UNUSED(pbuf);
  UNUSED(size);
  UNUSED(cmd);
  return (USBD_OK);
 80018ae:	2300      	movs	r3, #0
  /* USER CODE END 14 */
}
 80018b0:	4618      	mov	r0, r3
 80018b2:	3714      	adds	r7, #20
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <AUDIO_GetState_HS>:
/**
  * @brief  Gets AUDIO state.
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t AUDIO_GetState_HS(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 15 */
  return (USBD_OK);
 80018c0:	2300      	movs	r3, #0
  /* USER CODE END 15 */
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	46bd      	mov	sp, r7
 80018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ca:	4770      	bx	lr

080018cc <USBD_HS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b083      	sub	sp, #12
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	4603      	mov	r3, r0
 80018d4:	6039      	str	r1, [r7, #0]
 80018d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_HS_DeviceDesc);
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	2212      	movs	r2, #18
 80018dc:	801a      	strh	r2, [r3, #0]
  return USBD_HS_DeviceDesc;
 80018de:	4b03      	ldr	r3, [pc, #12]	; (80018ec <USBD_HS_DeviceDescriptor+0x20>)
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr
 80018ec:	20000108 	.word	0x20000108

080018f0 <USBD_HS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b083      	sub	sp, #12
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	4603      	mov	r3, r0
 80018f8:	6039      	str	r1, [r7, #0]
 80018fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80018fc:	683b      	ldr	r3, [r7, #0]
 80018fe:	2204      	movs	r2, #4
 8001900:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8001902:	4b03      	ldr	r3, [pc, #12]	; (8001910 <USBD_HS_LangIDStrDescriptor+0x20>)
}
 8001904:	4618      	mov	r0, r3
 8001906:	370c      	adds	r7, #12
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	2000011c 	.word	0x2000011c

08001914 <USBD_HS_ProductStrDescriptor>:
  * @param  speed : current device speed
  * @param  length : pointer to data length variable
  * @retval pointer to descriptor buffer
  */
uint8_t * USBD_HS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	6039      	str	r1, [r7, #0]
 800191e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d105      	bne.n	8001932 <USBD_HS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8001926:	683a      	ldr	r2, [r7, #0]
 8001928:	4907      	ldr	r1, [pc, #28]	; (8001948 <USBD_HS_ProductStrDescriptor+0x34>)
 800192a:	4808      	ldr	r0, [pc, #32]	; (800194c <USBD_HS_ProductStrDescriptor+0x38>)
 800192c:	f005 fe0c 	bl	8007548 <USBD_GetString>
 8001930:	e004      	b.n	800193c <USBD_HS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_HS, USBD_StrDesc, length);
 8001932:	683a      	ldr	r2, [r7, #0]
 8001934:	4904      	ldr	r1, [pc, #16]	; (8001948 <USBD_HS_ProductStrDescriptor+0x34>)
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <USBD_HS_ProductStrDescriptor+0x38>)
 8001938:	f005 fe06 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <USBD_HS_ProductStrDescriptor+0x34>)
}
 800193e:	4618      	mov	r0, r3
 8001940:	3708      	adds	r7, #8
 8001942:	46bd      	mov	sp, r7
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200009b0 	.word	0x200009b0
 800194c:	0800878c 	.word	0x0800878c

08001950 <USBD_HS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	b082      	sub	sp, #8
 8001954:	af00      	add	r7, sp, #0
 8001956:	4603      	mov	r3, r0
 8001958:	6039      	str	r1, [r7, #0]
 800195a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 800195c:	683a      	ldr	r2, [r7, #0]
 800195e:	4904      	ldr	r1, [pc, #16]	; (8001970 <USBD_HS_ManufacturerStrDescriptor+0x20>)
 8001960:	4804      	ldr	r0, [pc, #16]	; (8001974 <USBD_HS_ManufacturerStrDescriptor+0x24>)
 8001962:	f005 fdf1 	bl	8007548 <USBD_GetString>
  return USBD_StrDesc;
 8001966:	4b02      	ldr	r3, [pc, #8]	; (8001970 <USBD_HS_ManufacturerStrDescriptor+0x20>)
}
 8001968:	4618      	mov	r0, r3
 800196a:	3708      	adds	r7, #8
 800196c:	46bd      	mov	sp, r7
 800196e:	bd80      	pop	{r7, pc}
 8001970:	200009b0 	.word	0x200009b0
 8001974:	080087a0 	.word	0x080087a0

08001978 <USBD_HS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	b082      	sub	sp, #8
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8001984:	683b      	ldr	r3, [r7, #0]
 8001986:	221a      	movs	r2, #26
 8001988:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800198a:	f000 f843 	bl	8001a14 <Get_SerialNum>
  /* USER CODE BEGIN USBD_HS_SerialStrDescriptor */

  /* USER CODE END USBD_HS_SerialStrDescriptor */

  return (uint8_t *) USBD_StringSerial;
 800198e:	4b02      	ldr	r3, [pc, #8]	; (8001998 <USBD_HS_SerialStrDescriptor+0x20>)
}
 8001990:	4618      	mov	r0, r3
 8001992:	3708      	adds	r7, #8
 8001994:	46bd      	mov	sp, r7
 8001996:	bd80      	pop	{r7, pc}
 8001998:	20000120 	.word	0x20000120

0800199c <USBD_HS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	6039      	str	r1, [r7, #0]
 80019a6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d105      	bne.n	80019ba <USBD_HS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80019ae:	683a      	ldr	r2, [r7, #0]
 80019b0:	4907      	ldr	r1, [pc, #28]	; (80019d0 <USBD_HS_ConfigStrDescriptor+0x34>)
 80019b2:	4808      	ldr	r0, [pc, #32]	; (80019d4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80019b4:	f005 fdc8 	bl	8007548 <USBD_GetString>
 80019b8:	e004      	b.n	80019c4 <USBD_HS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_HS, USBD_StrDesc, length);
 80019ba:	683a      	ldr	r2, [r7, #0]
 80019bc:	4904      	ldr	r1, [pc, #16]	; (80019d0 <USBD_HS_ConfigStrDescriptor+0x34>)
 80019be:	4805      	ldr	r0, [pc, #20]	; (80019d4 <USBD_HS_ConfigStrDescriptor+0x38>)
 80019c0:	f005 fdc2 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 80019c4:	4b02      	ldr	r3, [pc, #8]	; (80019d0 <USBD_HS_ConfigStrDescriptor+0x34>)
}
 80019c6:	4618      	mov	r0, r3
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	200009b0 	.word	0x200009b0
 80019d4:	080087b4 	.word	0x080087b4

080019d8 <USBD_HS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_HS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80019d8:	b580      	push	{r7, lr}
 80019da:	b082      	sub	sp, #8
 80019dc:	af00      	add	r7, sp, #0
 80019de:	4603      	mov	r3, r0
 80019e0:	6039      	str	r1, [r7, #0]
 80019e2:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d105      	bne.n	80019f6 <USBD_HS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80019ea:	683a      	ldr	r2, [r7, #0]
 80019ec:	4907      	ldr	r1, [pc, #28]	; (8001a0c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80019ee:	4808      	ldr	r0, [pc, #32]	; (8001a10 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80019f0:	f005 fdaa 	bl	8007548 <USBD_GetString>
 80019f4:	e004      	b.n	8001a00 <USBD_HS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_HS, USBD_StrDesc, length);
 80019f6:	683a      	ldr	r2, [r7, #0]
 80019f8:	4904      	ldr	r1, [pc, #16]	; (8001a0c <USBD_HS_InterfaceStrDescriptor+0x34>)
 80019fa:	4805      	ldr	r0, [pc, #20]	; (8001a10 <USBD_HS_InterfaceStrDescriptor+0x38>)
 80019fc:	f005 fda4 	bl	8007548 <USBD_GetString>
  }
  return USBD_StrDesc;
 8001a00:	4b02      	ldr	r3, [pc, #8]	; (8001a0c <USBD_HS_InterfaceStrDescriptor+0x34>)
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3708      	adds	r7, #8
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
 8001a0a:	bf00      	nop
 8001a0c:	200009b0 	.word	0x200009b0
 8001a10:	080087c4 	.word	0x080087c4

08001a14 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8001a1a:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <Get_SerialNum+0x44>)
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8001a20:	4b0e      	ldr	r3, [pc, #56]	; (8001a5c <Get_SerialNum+0x48>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8001a26:	4b0e      	ldr	r3, [pc, #56]	; (8001a60 <Get_SerialNum+0x4c>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8001a2c:	68fa      	ldr	r2, [r7, #12]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	4413      	add	r3, r2
 8001a32:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	2b00      	cmp	r3, #0
 8001a38:	d009      	beq.n	8001a4e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8001a3a:	2208      	movs	r2, #8
 8001a3c:	4909      	ldr	r1, [pc, #36]	; (8001a64 <Get_SerialNum+0x50>)
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f000 f814 	bl	8001a6c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8001a44:	2204      	movs	r2, #4
 8001a46:	4908      	ldr	r1, [pc, #32]	; (8001a68 <Get_SerialNum+0x54>)
 8001a48:	68b8      	ldr	r0, [r7, #8]
 8001a4a:	f000 f80f 	bl	8001a6c <IntToUnicode>
  }
}
 8001a4e:	bf00      	nop
 8001a50:	3710      	adds	r7, #16
 8001a52:	46bd      	mov	sp, r7
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	1fff7a10 	.word	0x1fff7a10
 8001a5c:	1fff7a14 	.word	0x1fff7a14
 8001a60:	1fff7a18 	.word	0x1fff7a18
 8001a64:	20000122 	.word	0x20000122
 8001a68:	20000132 	.word	0x20000132

08001a6c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b087      	sub	sp, #28
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	60f8      	str	r0, [r7, #12]
 8001a74:	60b9      	str	r1, [r7, #8]
 8001a76:	4613      	mov	r3, r2
 8001a78:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8001a7a:	2300      	movs	r3, #0
 8001a7c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8001a7e:	2300      	movs	r3, #0
 8001a80:	75fb      	strb	r3, [r7, #23]
 8001a82:	e027      	b.n	8001ad4 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	0f1b      	lsrs	r3, r3, #28
 8001a88:	2b09      	cmp	r3, #9
 8001a8a:	d80b      	bhi.n	8001aa4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	0f1b      	lsrs	r3, r3, #28
 8001a90:	b2da      	uxtb	r2, r3
 8001a92:	7dfb      	ldrb	r3, [r7, #23]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	4619      	mov	r1, r3
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	440b      	add	r3, r1
 8001a9c:	3230      	adds	r2, #48	; 0x30
 8001a9e:	b2d2      	uxtb	r2, r2
 8001aa0:	701a      	strb	r2, [r3, #0]
 8001aa2:	e00a      	b.n	8001aba <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	0f1b      	lsrs	r3, r3, #28
 8001aa8:	b2da      	uxtb	r2, r3
 8001aaa:	7dfb      	ldrb	r3, [r7, #23]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	4619      	mov	r1, r3
 8001ab0:	68bb      	ldr	r3, [r7, #8]
 8001ab2:	440b      	add	r3, r1
 8001ab4:	3237      	adds	r2, #55	; 0x37
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8001aba:	68fb      	ldr	r3, [r7, #12]
 8001abc:	011b      	lsls	r3, r3, #4
 8001abe:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8001ac0:	7dfb      	ldrb	r3, [r7, #23]
 8001ac2:	005b      	lsls	r3, r3, #1
 8001ac4:	3301      	adds	r3, #1
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4413      	add	r3, r2
 8001aca:	2200      	movs	r2, #0
 8001acc:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8001ace:	7dfb      	ldrb	r3, [r7, #23]
 8001ad0:	3301      	adds	r3, #1
 8001ad2:	75fb      	strb	r3, [r7, #23]
 8001ad4:	7dfa      	ldrb	r2, [r7, #23]
 8001ad6:	79fb      	ldrb	r3, [r7, #7]
 8001ad8:	429a      	cmp	r2, r3
 8001ada:	d3d3      	bcc.n	8001a84 <IntToUnicode+0x18>
  }
}
 8001adc:	bf00      	nop
 8001ade:	bf00      	nop
 8001ae0:	371c      	adds	r7, #28
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr

08001aea <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001aea:	b580      	push	{r7, lr}
 8001aec:	b082      	sub	sp, #8
 8001aee:	af00      	add	r7, sp, #0
 8001af0:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001afe:	4619      	mov	r1, r3
 8001b00:	4610      	mov	r0, r2
 8001b02:	f004 fbfc 	bl	80062fe <USBD_LL_SetupStage>
}
 8001b06:	bf00      	nop
 8001b08:	3708      	adds	r7, #8
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bd80      	pop	{r7, pc}

08001b0e <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001b0e:	b580      	push	{r7, lr}
 8001b10:	b082      	sub	sp, #8
 8001b12:	af00      	add	r7, sp, #0
 8001b14:	6078      	str	r0, [r7, #4]
 8001b16:	460b      	mov	r3, r1
 8001b18:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8001b20:	78fa      	ldrb	r2, [r7, #3]
 8001b22:	6879      	ldr	r1, [r7, #4]
 8001b24:	4613      	mov	r3, r2
 8001b26:	00db      	lsls	r3, r3, #3
 8001b28:	4413      	add	r3, r2
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	78fb      	ldrb	r3, [r7, #3]
 8001b36:	4619      	mov	r1, r3
 8001b38:	f004 fc36 	bl	80063a8 <USBD_LL_DataOutStage>
}
 8001b3c:	bf00      	nop
 8001b3e:	3708      	adds	r7, #8
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}

08001b44 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	460b      	mov	r3, r1
 8001b4e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8001b56:	78fa      	ldrb	r2, [r7, #3]
 8001b58:	6879      	ldr	r1, [r7, #4]
 8001b5a:	4613      	mov	r3, r2
 8001b5c:	00db      	lsls	r3, r3, #3
 8001b5e:	4413      	add	r3, r2
 8001b60:	009b      	lsls	r3, r3, #2
 8001b62:	440b      	add	r3, r1
 8001b64:	334c      	adds	r3, #76	; 0x4c
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	78fb      	ldrb	r3, [r7, #3]
 8001b6a:	4619      	mov	r1, r3
 8001b6c:	f004 fccf 	bl	800650e <USBD_LL_DataInStage>
}
 8001b70:	bf00      	nop
 8001b72:	3708      	adds	r7, #8
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}

08001b78 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b082      	sub	sp, #8
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001b86:	4618      	mov	r0, r3
 8001b88:	f004 fe03 	bl	8006792 <USBD_LL_SOF>
}
 8001b8c:	bf00      	nop
 8001b8e:	3708      	adds	r7, #8
 8001b90:	46bd      	mov	sp, r7
 8001b92:	bd80      	pop	{r7, pc}

08001b94 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	b084      	sub	sp, #16
 8001b98:	af00      	add	r7, sp, #0
 8001b9a:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8001b9c:	2301      	movs	r3, #1
 8001b9e:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed == PCD_SPEED_HIGH)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	68db      	ldr	r3, [r3, #12]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d102      	bne.n	8001bae <HAL_PCD_ResetCallback+0x1a>
  {
    speed = USBD_SPEED_HIGH;
 8001ba8:	2300      	movs	r3, #0
 8001baa:	73fb      	strb	r3, [r7, #15]
 8001bac:	e008      	b.n	8001bc0 <HAL_PCD_ResetCallback+0x2c>
  }
  else if ( hpcd->Init.speed == PCD_SPEED_FULL)
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	68db      	ldr	r3, [r3, #12]
 8001bb2:	2b02      	cmp	r3, #2
 8001bb4:	d102      	bne.n	8001bbc <HAL_PCD_ResetCallback+0x28>
  {
    speed = USBD_SPEED_FULL;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	73fb      	strb	r3, [r7, #15]
 8001bba:	e001      	b.n	8001bc0 <HAL_PCD_ResetCallback+0x2c>
  }
  else
  {
    Error_Handler();
 8001bbc:	f7ff f850 	bl	8000c60 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001bc6:	7bfa      	ldrb	r2, [r7, #15]
 8001bc8:	4611      	mov	r1, r2
 8001bca:	4618      	mov	r0, r3
 8001bcc:	f004 fda3 	bl	8006716 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f004 fd4b 	bl	8006672 <USBD_LL_Reset>
}
 8001bdc:	bf00      	nop
 8001bde:	3710      	adds	r7, #16
 8001be0:	46bd      	mov	sp, r7
 8001be2:	bd80      	pop	{r7, pc}

08001be4 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f004 fd9f 	bl	8006736 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	687a      	ldr	r2, [r7, #4]
 8001c04:	6812      	ldr	r2, [r2, #0]
 8001c06:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8001c0a:	f043 0301 	orr.w	r3, r3, #1
 8001c0e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	6a1b      	ldr	r3, [r3, #32]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d005      	beq.n	8001c24 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8001c18:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <HAL_PCD_SuspendCallback+0x48>)
 8001c1a:	691b      	ldr	r3, [r3, #16]
 8001c1c:	4a03      	ldr	r2, [pc, #12]	; (8001c2c <HAL_PCD_SuspendCallback+0x48>)
 8001c1e:	f043 0306 	orr.w	r3, r3, #6
 8001c22:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8001c24:	bf00      	nop
 8001c26:	3708      	adds	r7, #8
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	bd80      	pop	{r7, pc}
 8001c2c:	e000ed00 	.word	0xe000ed00

08001c30 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001c3e:	4618      	mov	r0, r3
 8001c40:	f004 fd8f 	bl	8006762 <USBD_LL_Resume>
}
 8001c44:	bf00      	nop
 8001c46:	3708      	adds	r7, #8
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	bd80      	pop	{r7, pc}

08001c4c <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	460b      	mov	r3, r1
 8001c56:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001c5e:	78fa      	ldrb	r2, [r7, #3]
 8001c60:	4611      	mov	r1, r2
 8001c62:	4618      	mov	r0, r3
 8001c64:	f004 fde7 	bl	8006836 <USBD_LL_IsoOUTIncomplete>
}
 8001c68:	bf00      	nop
 8001c6a:	3708      	adds	r7, #8
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	bd80      	pop	{r7, pc}

08001c70 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	b082      	sub	sp, #8
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
 8001c78:	460b      	mov	r3, r1
 8001c7a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001c82:	78fa      	ldrb	r2, [r7, #3]
 8001c84:	4611      	mov	r1, r2
 8001c86:	4618      	mov	r0, r3
 8001c88:	f004 fda3 	bl	80067d2 <USBD_LL_IsoINIncomplete>
}
 8001c8c:	bf00      	nop
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}

08001c94 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f004 fdf9 	bl	800689a <USBD_LL_DevConnected>
}
 8001ca8:	bf00      	nop
 8001caa:	3708      	adds	r7, #8
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b082      	sub	sp, #8
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	f004 fdf6 	bl	80068b0 <USBD_LL_DevDisconnected>
}
 8001cc4:	bf00      	nop
 8001cc6:	3708      	adds	r7, #8
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b082      	sub	sp, #8
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_HS) {
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	2b01      	cmp	r3, #1
 8001cda:	d140      	bne.n	8001d5e <USBD_LL_Init+0x92>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_HS.pData = pdev;
 8001cdc:	4a22      	ldr	r2, [pc, #136]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_HS;
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a20      	ldr	r2, [pc, #128]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001ce8:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_HS.Instance = USB_OTG_HS;
 8001cec:	4b1e      	ldr	r3, [pc, #120]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001cee:	4a1f      	ldr	r2, [pc, #124]	; (8001d6c <USBD_LL_Init+0xa0>)
 8001cf0:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_HS.Init.dev_endpoints = 8;
 8001cf2:	4b1d      	ldr	r3, [pc, #116]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001cf4:	2208      	movs	r2, #8
 8001cf6:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_HS.Init.speed = PCD_SPEED_HIGH;
 8001cf8:	4b1b      	ldr	r3, [pc, #108]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_HS.Init.dma_enable = DISABLE;
 8001cfe:	4b1a      	ldr	r3, [pc, #104]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_HS.Init.phy_itface = USB_OTG_ULPI_PHY;
 8001d04:	4b18      	ldr	r3, [pc, #96]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d06:	2201      	movs	r2, #1
 8001d08:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_HS.Init.Sof_enable = DISABLE;
 8001d0a:	4b17      	ldr	r3, [pc, #92]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_HS.Init.low_power_enable = DISABLE;
 8001d10:	4b15      	ldr	r3, [pc, #84]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_HS.Init.lpm_enable = DISABLE;
 8001d16:	4b14      	ldr	r3, [pc, #80]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_HS.Init.vbus_sensing_enable = DISABLE;
 8001d1c:	4b12      	ldr	r3, [pc, #72]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_HS.Init.use_dedicated_ep1 = DISABLE;
 8001d22:	4b11      	ldr	r3, [pc, #68]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d24:	2200      	movs	r2, #0
 8001d26:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_HS.Init.use_external_vbus = DISABLE;
 8001d28:	4b0f      	ldr	r3, [pc, #60]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d2a:	2200      	movs	r2, #0
 8001d2c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_PCD_Init(&hpcd_USB_OTG_HS) != HAL_OK)
 8001d2e:	480e      	ldr	r0, [pc, #56]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d30:	f000 fcdc 	bl	80026ec <HAL_PCD_Init>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <USBD_LL_Init+0x72>
  {
    Error_Handler( );
 8001d3a:	f7fe ff91 	bl	8000c60 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_HS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_HS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_HS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_HS, 0x200);
 8001d3e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001d42:	4809      	ldr	r0, [pc, #36]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d44:	f001 ff67 	bl	8003c16 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 0, 0x80);
 8001d48:	2280      	movs	r2, #128	; 0x80
 8001d4a:	2100      	movs	r1, #0
 8001d4c:	4806      	ldr	r0, [pc, #24]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d4e:	f001 ff1b 	bl	8003b88 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_HS, 1, 0x174);
 8001d52:	f44f 72ba 	mov.w	r2, #372	; 0x174
 8001d56:	2101      	movs	r1, #1
 8001d58:	4803      	ldr	r0, [pc, #12]	; (8001d68 <USBD_LL_Init+0x9c>)
 8001d5a:	f001 ff15 	bl	8003b88 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8001d5e:	2300      	movs	r3, #0
}
 8001d60:	4618      	mov	r0, r3
 8001d62:	3708      	adds	r7, #8
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200001c4 	.word	0x200001c4
 8001d6c:	40040000 	.word	0x40040000

08001d70 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b084      	sub	sp, #16
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001d78:	2300      	movs	r3, #0
 8001d7a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001d7c:	2300      	movs	r3, #0
 8001d7e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001d86:	4618      	mov	r0, r3
 8001d88:	f000 fdd4 	bl	8002934 <HAL_PCD_Start>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001d90:	7bfb      	ldrb	r3, [r7, #15]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f942 	bl	800201c <USBD_Get_USB_Status>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001d9c:	7bbb      	ldrb	r3, [r7, #14]
}
 8001d9e:	4618      	mov	r0, r3
 8001da0:	3710      	adds	r7, #16
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}

08001da6 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8001da6:	b580      	push	{r7, lr}
 8001da8:	b084      	sub	sp, #16
 8001daa:	af00      	add	r7, sp, #0
 8001dac:	6078      	str	r0, [r7, #4]
 8001dae:	4608      	mov	r0, r1
 8001db0:	4611      	mov	r1, r2
 8001db2:	461a      	mov	r2, r3
 8001db4:	4603      	mov	r3, r0
 8001db6:	70fb      	strb	r3, [r7, #3]
 8001db8:	460b      	mov	r3, r1
 8001dba:	70bb      	strb	r3, [r7, #2]
 8001dbc:	4613      	mov	r3, r2
 8001dbe:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001dce:	78bb      	ldrb	r3, [r7, #2]
 8001dd0:	883a      	ldrh	r2, [r7, #0]
 8001dd2:	78f9      	ldrb	r1, [r7, #3]
 8001dd4:	f001 fad2 	bl	800337c <HAL_PCD_EP_Open>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001ddc:	7bfb      	ldrb	r3, [r7, #15]
 8001dde:	4618      	mov	r0, r3
 8001de0:	f000 f91c 	bl	800201c <USBD_Get_USB_Status>
 8001de4:	4603      	mov	r3, r0
 8001de6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001de8:	7bbb      	ldrb	r3, [r7, #14]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3710      	adds	r7, #16
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}

08001df2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001e02:	2300      	movs	r3, #0
 8001e04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001e0c:	78fa      	ldrb	r2, [r7, #3]
 8001e0e:	4611      	mov	r1, r2
 8001e10:	4618      	mov	r0, r3
 8001e12:	f001 fb1b 	bl	800344c <HAL_PCD_EP_Close>
 8001e16:	4603      	mov	r3, r0
 8001e18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	4618      	mov	r0, r3
 8001e1e:	f000 f8fd 	bl	800201c <USBD_Get_USB_Status>
 8001e22:	4603      	mov	r3, r0
 8001e24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001e26:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e28:	4618      	mov	r0, r3
 8001e2a:	3710      	adds	r7, #16
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	460b      	mov	r3, r1
 8001e3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001e40:	2300      	movs	r3, #0
 8001e42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001e4a:	78fa      	ldrb	r2, [r7, #3]
 8001e4c:	4611      	mov	r1, r2
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f001 fbf3 	bl	800363a <HAL_PCD_EP_SetStall>
 8001e54:	4603      	mov	r3, r0
 8001e56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001e58:	7bfb      	ldrb	r3, [r7, #15]
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f000 f8de 	bl	800201c <USBD_Get_USB_Status>
 8001e60:	4603      	mov	r3, r0
 8001e62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001e64:	7bbb      	ldrb	r3, [r7, #14]
}
 8001e66:	4618      	mov	r0, r3
 8001e68:	3710      	adds	r7, #16
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}

08001e6e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001e6e:	b580      	push	{r7, lr}
 8001e70:	b084      	sub	sp, #16
 8001e72:	af00      	add	r7, sp, #0
 8001e74:	6078      	str	r0, [r7, #4]
 8001e76:	460b      	mov	r3, r1
 8001e78:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001e7e:	2300      	movs	r3, #0
 8001e80:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001e88:	78fa      	ldrb	r2, [r7, #3]
 8001e8a:	4611      	mov	r1, r2
 8001e8c:	4618      	mov	r0, r3
 8001e8e:	f001 fc38 	bl	8003702 <HAL_PCD_EP_ClrStall>
 8001e92:	4603      	mov	r3, r0
 8001e94:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001e96:	7bfb      	ldrb	r3, [r7, #15]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 f8bf 	bl	800201c <USBD_Get_USB_Status>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001ea2:	7bbb      	ldrb	r3, [r7, #14]
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}

08001eac <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001eac:	b480      	push	{r7}
 8001eae:	b085      	sub	sp, #20
 8001eb0:	af00      	add	r7, sp, #0
 8001eb2:	6078      	str	r0, [r7, #4]
 8001eb4:	460b      	mov	r3, r1
 8001eb6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001ebe:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8001ec0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	da0b      	bge.n	8001ee0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8001ec8:	78fb      	ldrb	r3, [r7, #3]
 8001eca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ece:	68f9      	ldr	r1, [r7, #12]
 8001ed0:	4613      	mov	r3, r2
 8001ed2:	00db      	lsls	r3, r3, #3
 8001ed4:	4413      	add	r3, r2
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	440b      	add	r3, r1
 8001eda:	333e      	adds	r3, #62	; 0x3e
 8001edc:	781b      	ldrb	r3, [r3, #0]
 8001ede:	e00b      	b.n	8001ef8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8001ee0:	78fb      	ldrb	r3, [r7, #3]
 8001ee2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8001ee6:	68f9      	ldr	r1, [r7, #12]
 8001ee8:	4613      	mov	r3, r2
 8001eea:	00db      	lsls	r3, r3, #3
 8001eec:	4413      	add	r3, r2
 8001eee:	009b      	lsls	r3, r3, #2
 8001ef0:	440b      	add	r3, r1
 8001ef2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8001ef6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	3714      	adds	r7, #20
 8001efc:	46bd      	mov	sp, r7
 8001efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f02:	4770      	bx	lr

08001f04 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001f10:	2300      	movs	r3, #0
 8001f12:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001f14:	2300      	movs	r3, #0
 8001f16:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001f1e:	78fa      	ldrb	r2, [r7, #3]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f001 fa05 	bl	8003332 <HAL_PCD_SetAddress>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001f2c:	7bfb      	ldrb	r3, [r7, #15]
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f000 f874 	bl	800201c <USBD_Get_USB_Status>
 8001f34:	4603      	mov	r3, r0
 8001f36:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8001f38:	7bbb      	ldrb	r3, [r7, #14]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3710      	adds	r7, #16
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}

08001f42 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001f42:	b580      	push	{r7, lr}
 8001f44:	b086      	sub	sp, #24
 8001f46:	af00      	add	r7, sp, #0
 8001f48:	60f8      	str	r0, [r7, #12]
 8001f4a:	607a      	str	r2, [r7, #4]
 8001f4c:	603b      	str	r3, [r7, #0]
 8001f4e:	460b      	mov	r3, r1
 8001f50:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001f52:	2300      	movs	r3, #0
 8001f54:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001f56:	2300      	movs	r3, #0
 8001f58:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001f60:	7af9      	ldrb	r1, [r7, #11]
 8001f62:	683b      	ldr	r3, [r7, #0]
 8001f64:	687a      	ldr	r2, [r7, #4]
 8001f66:	f001 fb1e 	bl	80035a6 <HAL_PCD_EP_Transmit>
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001f6e:	7dfb      	ldrb	r3, [r7, #23]
 8001f70:	4618      	mov	r0, r3
 8001f72:	f000 f853 	bl	800201c <USBD_Get_USB_Status>
 8001f76:	4603      	mov	r3, r0
 8001f78:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001f7a:	7dbb      	ldrb	r3, [r7, #22]
}
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	3718      	adds	r7, #24
 8001f80:	46bd      	mov	sp, r7
 8001f82:	bd80      	pop	{r7, pc}

08001f84 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8001f84:	b580      	push	{r7, lr}
 8001f86:	b086      	sub	sp, #24
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	60f8      	str	r0, [r7, #12]
 8001f8c:	607a      	str	r2, [r7, #4]
 8001f8e:	603b      	str	r3, [r7, #0]
 8001f90:	460b      	mov	r3, r1
 8001f92:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8001f94:	2300      	movs	r3, #0
 8001f96:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8001f98:	2300      	movs	r3, #0
 8001f9a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8001fa2:	7af9      	ldrb	r1, [r7, #11]
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	687a      	ldr	r2, [r7, #4]
 8001fa8:	f001 fa9a 	bl	80034e0 <HAL_PCD_EP_Receive>
 8001fac:	4603      	mov	r3, r0
 8001fae:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8001fb0:	7dfb      	ldrb	r3, [r7, #23]
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f832 	bl	800201c <USBD_Get_USB_Status>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8001fbc:	7dbb      	ldrb	r3, [r7, #22]
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3718      	adds	r7, #24
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}

08001fc6 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8001fc6:	b580      	push	{r7, lr}
 8001fc8:	b082      	sub	sp, #8
 8001fca:	af00      	add	r7, sp, #0
 8001fcc:	6078      	str	r0, [r7, #4]
 8001fce:	460b      	mov	r3, r1
 8001fd0:	70fb      	strb	r3, [r7, #3]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8001fd8:	78fa      	ldrb	r2, [r7, #3]
 8001fda:	4611      	mov	r1, r2
 8001fdc:	4618      	mov	r0, r3
 8001fde:	f001 faca 	bl	8003576 <HAL_PCD_EP_GetRxCount>
 8001fe2:	4603      	mov	r3, r0
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3708      	adds	r7, #8
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8001fec:	b480      	push	{r7}
 8001fee:	b083      	sub	sp, #12
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_AUDIO_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8001ff4:	4b03      	ldr	r3, [pc, #12]	; (8002004 <USBD_static_malloc+0x18>)
}
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	20000bb0 	.word	0x20000bb0

08002008 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]

}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800201a:	4770      	bx	lr

0800201c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	4603      	mov	r3, r0
 8002024:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8002026:	2300      	movs	r3, #0
 8002028:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800202a:	79fb      	ldrb	r3, [r7, #7]
 800202c:	2b03      	cmp	r3, #3
 800202e:	d817      	bhi.n	8002060 <USBD_Get_USB_Status+0x44>
 8002030:	a201      	add	r2, pc, #4	; (adr r2, 8002038 <USBD_Get_USB_Status+0x1c>)
 8002032:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002036:	bf00      	nop
 8002038:	08002049 	.word	0x08002049
 800203c:	0800204f 	.word	0x0800204f
 8002040:	08002055 	.word	0x08002055
 8002044:	0800205b 	.word	0x0800205b
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8002048:	2300      	movs	r3, #0
 800204a:	73fb      	strb	r3, [r7, #15]
    break;
 800204c:	e00b      	b.n	8002066 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800204e:	2303      	movs	r3, #3
 8002050:	73fb      	strb	r3, [r7, #15]
    break;
 8002052:	e008      	b.n	8002066 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8002054:	2301      	movs	r3, #1
 8002056:	73fb      	strb	r3, [r7, #15]
    break;
 8002058:	e005      	b.n	8002066 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800205a:	2303      	movs	r3, #3
 800205c:	73fb      	strb	r3, [r7, #15]
    break;
 800205e:	e002      	b.n	8002066 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8002060:	2303      	movs	r3, #3
 8002062:	73fb      	strb	r3, [r7, #15]
    break;
 8002064:	bf00      	nop
  }
  return usb_status;
 8002066:	7bfb      	ldrb	r3, [r7, #15]
}
 8002068:	4618      	mov	r0, r3
 800206a:	3714      	adds	r7, #20
 800206c:	46bd      	mov	sp, r7
 800206e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002072:	4770      	bx	lr

08002074 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002078:	4b0e      	ldr	r3, [pc, #56]	; (80020b4 <HAL_Init+0x40>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	4a0d      	ldr	r2, [pc, #52]	; (80020b4 <HAL_Init+0x40>)
 800207e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002082:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002084:	4b0b      	ldr	r3, [pc, #44]	; (80020b4 <HAL_Init+0x40>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a0a      	ldr	r2, [pc, #40]	; (80020b4 <HAL_Init+0x40>)
 800208a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800208e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002090:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_Init+0x40>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a07      	ldr	r2, [pc, #28]	; (80020b4 <HAL_Init+0x40>)
 8002096:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800209a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800209c:	2003      	movs	r0, #3
 800209e:	f000 f94f 	bl	8002340 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020a2:	200f      	movs	r0, #15
 80020a4:	f000 f808 	bl	80020b8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020a8:	f7fe fde6 	bl	8000c78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020ac:	2300      	movs	r3, #0
}
 80020ae:	4618      	mov	r0, r3
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40023c00 	.word	0x40023c00

080020b8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80020b8:	b580      	push	{r7, lr}
 80020ba:	b082      	sub	sp, #8
 80020bc:	af00      	add	r7, sp, #0
 80020be:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80020c0:	4b12      	ldr	r3, [pc, #72]	; (800210c <HAL_InitTick+0x54>)
 80020c2:	681a      	ldr	r2, [r3, #0]
 80020c4:	4b12      	ldr	r3, [pc, #72]	; (8002110 <HAL_InitTick+0x58>)
 80020c6:	781b      	ldrb	r3, [r3, #0]
 80020c8:	4619      	mov	r1, r3
 80020ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80020ce:	fbb3 f3f1 	udiv	r3, r3, r1
 80020d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020d6:	4618      	mov	r0, r3
 80020d8:	f000 f967 	bl	80023aa <HAL_SYSTICK_Config>
 80020dc:	4603      	mov	r3, r0
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d001      	beq.n	80020e6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020e2:	2301      	movs	r3, #1
 80020e4:	e00e      	b.n	8002104 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2b0f      	cmp	r3, #15
 80020ea:	d80a      	bhi.n	8002102 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020ec:	2200      	movs	r2, #0
 80020ee:	6879      	ldr	r1, [r7, #4]
 80020f0:	f04f 30ff 	mov.w	r0, #4294967295
 80020f4:	f000 f92f 	bl	8002356 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020f8:	4a06      	ldr	r2, [pc, #24]	; (8002114 <HAL_InitTick+0x5c>)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020fe:	2300      	movs	r3, #0
 8002100:	e000      	b.n	8002104 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002102:	2301      	movs	r3, #1
}
 8002104:	4618      	mov	r0, r3
 8002106:	3708      	adds	r7, #8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	20000000 	.word	0x20000000
 8002110:	20000140 	.word	0x20000140
 8002114:	2000013c 	.word	0x2000013c

08002118 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002118:	b480      	push	{r7}
 800211a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800211c:	4b06      	ldr	r3, [pc, #24]	; (8002138 <HAL_IncTick+0x20>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	461a      	mov	r2, r3
 8002122:	4b06      	ldr	r3, [pc, #24]	; (800213c <HAL_IncTick+0x24>)
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4413      	add	r3, r2
 8002128:	4a04      	ldr	r2, [pc, #16]	; (800213c <HAL_IncTick+0x24>)
 800212a:	6013      	str	r3, [r2, #0]
}
 800212c:	bf00      	nop
 800212e:	46bd      	mov	sp, r7
 8002130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002134:	4770      	bx	lr
 8002136:	bf00      	nop
 8002138:	20000140 	.word	0x20000140
 800213c:	20002784 	.word	0x20002784

08002140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return uwTick;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_GetTick+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20002784 	.word	0x20002784

08002158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b084      	sub	sp, #16
 800215c:	af00      	add	r7, sp, #0
 800215e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002160:	f7ff ffee 	bl	8002140 <HAL_GetTick>
 8002164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002170:	d005      	beq.n	800217e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002172:	4b0a      	ldr	r3, [pc, #40]	; (800219c <HAL_Delay+0x44>)
 8002174:	781b      	ldrb	r3, [r3, #0]
 8002176:	461a      	mov	r2, r3
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	4413      	add	r3, r2
 800217c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800217e:	bf00      	nop
 8002180:	f7ff ffde 	bl	8002140 <HAL_GetTick>
 8002184:	4602      	mov	r2, r0
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	1ad3      	subs	r3, r2, r3
 800218a:	68fa      	ldr	r2, [r7, #12]
 800218c:	429a      	cmp	r2, r3
 800218e:	d8f7      	bhi.n	8002180 <HAL_Delay+0x28>
  {
  }
}
 8002190:	bf00      	nop
 8002192:	bf00      	nop
 8002194:	3710      	adds	r7, #16
 8002196:	46bd      	mov	sp, r7
 8002198:	bd80      	pop	{r7, pc}
 800219a:	bf00      	nop
 800219c:	20000140 	.word	0x20000140

080021a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80021a0:	b480      	push	{r7}
 80021a2:	b085      	sub	sp, #20
 80021a4:	af00      	add	r7, sp, #0
 80021a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80021b0:	4b0c      	ldr	r3, [pc, #48]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021b2:	68db      	ldr	r3, [r3, #12]
 80021b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80021b6:	68ba      	ldr	r2, [r7, #8]
 80021b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80021bc:	4013      	ands	r3, r2
 80021be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80021c4:	68bb      	ldr	r3, [r7, #8]
 80021c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80021c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80021cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80021d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80021d2:	4a04      	ldr	r2, [pc, #16]	; (80021e4 <__NVIC_SetPriorityGrouping+0x44>)
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	60d3      	str	r3, [r2, #12]
}
 80021d8:	bf00      	nop
 80021da:	3714      	adds	r7, #20
 80021dc:	46bd      	mov	sp, r7
 80021de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e2:	4770      	bx	lr
 80021e4:	e000ed00 	.word	0xe000ed00

080021e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021e8:	b480      	push	{r7}
 80021ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021ec:	4b04      	ldr	r3, [pc, #16]	; (8002200 <__NVIC_GetPriorityGrouping+0x18>)
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	0a1b      	lsrs	r3, r3, #8
 80021f2:	f003 0307 	and.w	r3, r3, #7
}
 80021f6:	4618      	mov	r0, r3
 80021f8:	46bd      	mov	sp, r7
 80021fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fe:	4770      	bx	lr
 8002200:	e000ed00 	.word	0xe000ed00

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800220e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002212:	2b00      	cmp	r3, #0
 8002214:	db0b      	blt.n	800222e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002216:	79fb      	ldrb	r3, [r7, #7]
 8002218:	f003 021f 	and.w	r2, r3, #31
 800221c:	4907      	ldr	r1, [pc, #28]	; (800223c <__NVIC_EnableIRQ+0x38>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	095b      	lsrs	r3, r3, #5
 8002224:	2001      	movs	r0, #1
 8002226:	fa00 f202 	lsl.w	r2, r0, r2
 800222a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800222e:	bf00      	nop
 8002230:	370c      	adds	r7, #12
 8002232:	46bd      	mov	sp, r7
 8002234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002238:	4770      	bx	lr
 800223a:	bf00      	nop
 800223c:	e000e100 	.word	0xe000e100

08002240 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002240:	b480      	push	{r7}
 8002242:	b083      	sub	sp, #12
 8002244:	af00      	add	r7, sp, #0
 8002246:	4603      	mov	r3, r0
 8002248:	6039      	str	r1, [r7, #0]
 800224a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800224c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002250:	2b00      	cmp	r3, #0
 8002252:	db0a      	blt.n	800226a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	b2da      	uxtb	r2, r3
 8002258:	490c      	ldr	r1, [pc, #48]	; (800228c <__NVIC_SetPriority+0x4c>)
 800225a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800225e:	0112      	lsls	r2, r2, #4
 8002260:	b2d2      	uxtb	r2, r2
 8002262:	440b      	add	r3, r1
 8002264:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002268:	e00a      	b.n	8002280 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	b2da      	uxtb	r2, r3
 800226e:	4908      	ldr	r1, [pc, #32]	; (8002290 <__NVIC_SetPriority+0x50>)
 8002270:	79fb      	ldrb	r3, [r7, #7]
 8002272:	f003 030f 	and.w	r3, r3, #15
 8002276:	3b04      	subs	r3, #4
 8002278:	0112      	lsls	r2, r2, #4
 800227a:	b2d2      	uxtb	r2, r2
 800227c:	440b      	add	r3, r1
 800227e:	761a      	strb	r2, [r3, #24]
}
 8002280:	bf00      	nop
 8002282:	370c      	adds	r7, #12
 8002284:	46bd      	mov	sp, r7
 8002286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228a:	4770      	bx	lr
 800228c:	e000e100 	.word	0xe000e100
 8002290:	e000ed00 	.word	0xe000ed00

08002294 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002294:	b480      	push	{r7}
 8002296:	b089      	sub	sp, #36	; 0x24
 8002298:	af00      	add	r7, sp, #0
 800229a:	60f8      	str	r0, [r7, #12]
 800229c:	60b9      	str	r1, [r7, #8]
 800229e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f003 0307 	and.w	r3, r3, #7
 80022a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	f1c3 0307 	rsb	r3, r3, #7
 80022ae:	2b04      	cmp	r3, #4
 80022b0:	bf28      	it	cs
 80022b2:	2304      	movcs	r3, #4
 80022b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80022b6:	69fb      	ldr	r3, [r7, #28]
 80022b8:	3304      	adds	r3, #4
 80022ba:	2b06      	cmp	r3, #6
 80022bc:	d902      	bls.n	80022c4 <NVIC_EncodePriority+0x30>
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	3b03      	subs	r3, #3
 80022c2:	e000      	b.n	80022c6 <NVIC_EncodePriority+0x32>
 80022c4:	2300      	movs	r3, #0
 80022c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022c8:	f04f 32ff 	mov.w	r2, #4294967295
 80022cc:	69bb      	ldr	r3, [r7, #24]
 80022ce:	fa02 f303 	lsl.w	r3, r2, r3
 80022d2:	43da      	mvns	r2, r3
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	401a      	ands	r2, r3
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022dc:	f04f 31ff 	mov.w	r1, #4294967295
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	fa01 f303 	lsl.w	r3, r1, r3
 80022e6:	43d9      	mvns	r1, r3
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022ec:	4313      	orrs	r3, r2
         );
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3724      	adds	r7, #36	; 0x24
 80022f2:	46bd      	mov	sp, r7
 80022f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f8:	4770      	bx	lr
	...

080022fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022fc:	b580      	push	{r7, lr}
 80022fe:	b082      	sub	sp, #8
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	3b01      	subs	r3, #1
 8002308:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800230c:	d301      	bcc.n	8002312 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800230e:	2301      	movs	r3, #1
 8002310:	e00f      	b.n	8002332 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002312:	4a0a      	ldr	r2, [pc, #40]	; (800233c <SysTick_Config+0x40>)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	3b01      	subs	r3, #1
 8002318:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800231a:	210f      	movs	r1, #15
 800231c:	f04f 30ff 	mov.w	r0, #4294967295
 8002320:	f7ff ff8e 	bl	8002240 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002324:	4b05      	ldr	r3, [pc, #20]	; (800233c <SysTick_Config+0x40>)
 8002326:	2200      	movs	r2, #0
 8002328:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800232a:	4b04      	ldr	r3, [pc, #16]	; (800233c <SysTick_Config+0x40>)
 800232c:	2207      	movs	r2, #7
 800232e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002330:	2300      	movs	r3, #0
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	e000e010 	.word	0xe000e010

08002340 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff ff29 	bl	80021a0 <__NVIC_SetPriorityGrouping>
}
 800234e:	bf00      	nop
 8002350:	3708      	adds	r7, #8
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002356:	b580      	push	{r7, lr}
 8002358:	b086      	sub	sp, #24
 800235a:	af00      	add	r7, sp, #0
 800235c:	4603      	mov	r3, r0
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	607a      	str	r2, [r7, #4]
 8002362:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002364:	2300      	movs	r3, #0
 8002366:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002368:	f7ff ff3e 	bl	80021e8 <__NVIC_GetPriorityGrouping>
 800236c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	68b9      	ldr	r1, [r7, #8]
 8002372:	6978      	ldr	r0, [r7, #20]
 8002374:	f7ff ff8e 	bl	8002294 <NVIC_EncodePriority>
 8002378:	4602      	mov	r2, r0
 800237a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800237e:	4611      	mov	r1, r2
 8002380:	4618      	mov	r0, r3
 8002382:	f7ff ff5d 	bl	8002240 <__NVIC_SetPriority>
}
 8002386:	bf00      	nop
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b082      	sub	sp, #8
 8002392:	af00      	add	r7, sp, #0
 8002394:	4603      	mov	r3, r0
 8002396:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002398:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff ff31 	bl	8002204 <__NVIC_EnableIRQ>
}
 80023a2:	bf00      	nop
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}

080023aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023aa:	b580      	push	{r7, lr}
 80023ac:	b082      	sub	sp, #8
 80023ae:	af00      	add	r7, sp, #0
 80023b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80023b2:	6878      	ldr	r0, [r7, #4]
 80023b4:	f7ff ffa2 	bl	80022fc <SysTick_Config>
 80023b8:	4603      	mov	r3, r0
}
 80023ba:	4618      	mov	r0, r3
 80023bc:	3708      	adds	r7, #8
 80023be:	46bd      	mov	sp, r7
 80023c0:	bd80      	pop	{r7, pc}
	...

080023c4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c4:	b480      	push	{r7}
 80023c6:	b089      	sub	sp, #36	; 0x24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
 80023cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80023ce:	2300      	movs	r3, #0
 80023d0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80023d2:	2300      	movs	r3, #0
 80023d4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80023d6:	2300      	movs	r3, #0
 80023d8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023da:	2300      	movs	r3, #0
 80023dc:	61fb      	str	r3, [r7, #28]
 80023de:	e165      	b.n	80026ac <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80023e0:	2201      	movs	r2, #1
 80023e2:	69fb      	ldr	r3, [r7, #28]
 80023e4:	fa02 f303 	lsl.w	r3, r2, r3
 80023e8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	697a      	ldr	r2, [r7, #20]
 80023f0:	4013      	ands	r3, r2
 80023f2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	429a      	cmp	r2, r3
 80023fa:	f040 8154 	bne.w	80026a6 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f003 0303 	and.w	r3, r3, #3
 8002406:	2b01      	cmp	r3, #1
 8002408:	d005      	beq.n	8002416 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	685b      	ldr	r3, [r3, #4]
 800240e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002412:	2b02      	cmp	r3, #2
 8002414:	d130      	bne.n	8002478 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	2203      	movs	r2, #3
 8002422:	fa02 f303 	lsl.w	r3, r2, r3
 8002426:	43db      	mvns	r3, r3
 8002428:	69ba      	ldr	r2, [r7, #24]
 800242a:	4013      	ands	r3, r2
 800242c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	68da      	ldr	r2, [r3, #12]
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	fa02 f303 	lsl.w	r3, r2, r3
 800243a:	69ba      	ldr	r2, [r7, #24]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800244c:	2201      	movs	r2, #1
 800244e:	69fb      	ldr	r3, [r7, #28]
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	43db      	mvns	r3, r3
 8002456:	69ba      	ldr	r2, [r7, #24]
 8002458:	4013      	ands	r3, r2
 800245a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	685b      	ldr	r3, [r3, #4]
 8002460:	091b      	lsrs	r3, r3, #4
 8002462:	f003 0201 	and.w	r2, r3, #1
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	fa02 f303 	lsl.w	r3, r2, r3
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	4313      	orrs	r3, r2
 8002470:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	69ba      	ldr	r2, [r7, #24]
 8002476:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f003 0303 	and.w	r3, r3, #3
 8002480:	2b03      	cmp	r3, #3
 8002482:	d017      	beq.n	80024b4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68db      	ldr	r3, [r3, #12]
 8002488:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	2203      	movs	r2, #3
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	4013      	ands	r3, r2
 800249a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	689a      	ldr	r2, [r3, #8]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	fa02 f303 	lsl.w	r3, r2, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4313      	orrs	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	69ba      	ldr	r2, [r7, #24]
 80024b2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f003 0303 	and.w	r3, r3, #3
 80024bc:	2b02      	cmp	r3, #2
 80024be:	d123      	bne.n	8002508 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80024c0:	69fb      	ldr	r3, [r7, #28]
 80024c2:	08da      	lsrs	r2, r3, #3
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	3208      	adds	r2, #8
 80024c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80024cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	220f      	movs	r2, #15
 80024d8:	fa02 f303 	lsl.w	r3, r2, r3
 80024dc:	43db      	mvns	r3, r3
 80024de:	69ba      	ldr	r2, [r7, #24]
 80024e0:	4013      	ands	r3, r2
 80024e2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	69fb      	ldr	r3, [r7, #28]
 80024ea:	f003 0307 	and.w	r3, r3, #7
 80024ee:	009b      	lsls	r3, r3, #2
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	69ba      	ldr	r2, [r7, #24]
 80024f6:	4313      	orrs	r3, r2
 80024f8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80024fa:	69fb      	ldr	r3, [r7, #28]
 80024fc:	08da      	lsrs	r2, r3, #3
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	3208      	adds	r2, #8
 8002502:	69b9      	ldr	r1, [r7, #24]
 8002504:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800250e:	69fb      	ldr	r3, [r7, #28]
 8002510:	005b      	lsls	r3, r3, #1
 8002512:	2203      	movs	r2, #3
 8002514:	fa02 f303 	lsl.w	r3, r2, r3
 8002518:	43db      	mvns	r3, r3
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4013      	ands	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	685b      	ldr	r3, [r3, #4]
 8002524:	f003 0203 	and.w	r2, r3, #3
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	005b      	lsls	r3, r3, #1
 800252c:	fa02 f303 	lsl.w	r3, r2, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4313      	orrs	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002544:	2b00      	cmp	r3, #0
 8002546:	f000 80ae 	beq.w	80026a6 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b5d      	ldr	r3, [pc, #372]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a5c      	ldr	r2, [pc, #368]	; (80026c4 <HAL_GPIO_Init+0x300>)
 8002554:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b5a      	ldr	r3, [pc, #360]	; (80026c4 <HAL_GPIO_Init+0x300>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002566:	4a58      	ldr	r2, [pc, #352]	; (80026c8 <HAL_GPIO_Init+0x304>)
 8002568:	69fb      	ldr	r3, [r7, #28]
 800256a:	089b      	lsrs	r3, r3, #2
 800256c:	3302      	adds	r3, #2
 800256e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002572:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	009b      	lsls	r3, r3, #2
 800257c:	220f      	movs	r2, #15
 800257e:	fa02 f303 	lsl.w	r3, r2, r3
 8002582:	43db      	mvns	r3, r3
 8002584:	69ba      	ldr	r2, [r7, #24]
 8002586:	4013      	ands	r3, r2
 8002588:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	4a4f      	ldr	r2, [pc, #316]	; (80026cc <HAL_GPIO_Init+0x308>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d025      	beq.n	80025de <HAL_GPIO_Init+0x21a>
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	4a4e      	ldr	r2, [pc, #312]	; (80026d0 <HAL_GPIO_Init+0x30c>)
 8002596:	4293      	cmp	r3, r2
 8002598:	d01f      	beq.n	80025da <HAL_GPIO_Init+0x216>
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	4a4d      	ldr	r2, [pc, #308]	; (80026d4 <HAL_GPIO_Init+0x310>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d019      	beq.n	80025d6 <HAL_GPIO_Init+0x212>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4a4c      	ldr	r2, [pc, #304]	; (80026d8 <HAL_GPIO_Init+0x314>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	d013      	beq.n	80025d2 <HAL_GPIO_Init+0x20e>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	4a4b      	ldr	r2, [pc, #300]	; (80026dc <HAL_GPIO_Init+0x318>)
 80025ae:	4293      	cmp	r3, r2
 80025b0:	d00d      	beq.n	80025ce <HAL_GPIO_Init+0x20a>
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	4a4a      	ldr	r2, [pc, #296]	; (80026e0 <HAL_GPIO_Init+0x31c>)
 80025b6:	4293      	cmp	r3, r2
 80025b8:	d007      	beq.n	80025ca <HAL_GPIO_Init+0x206>
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	4a49      	ldr	r2, [pc, #292]	; (80026e4 <HAL_GPIO_Init+0x320>)
 80025be:	4293      	cmp	r3, r2
 80025c0:	d101      	bne.n	80025c6 <HAL_GPIO_Init+0x202>
 80025c2:	2306      	movs	r3, #6
 80025c4:	e00c      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025c6:	2307      	movs	r3, #7
 80025c8:	e00a      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025ca:	2305      	movs	r3, #5
 80025cc:	e008      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025ce:	2304      	movs	r3, #4
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025d2:	2303      	movs	r3, #3
 80025d4:	e004      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025d6:	2302      	movs	r3, #2
 80025d8:	e002      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025da:	2301      	movs	r3, #1
 80025dc:	e000      	b.n	80025e0 <HAL_GPIO_Init+0x21c>
 80025de:	2300      	movs	r3, #0
 80025e0:	69fa      	ldr	r2, [r7, #28]
 80025e2:	f002 0203 	and.w	r2, r2, #3
 80025e6:	0092      	lsls	r2, r2, #2
 80025e8:	4093      	lsls	r3, r2
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4313      	orrs	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80025f0:	4935      	ldr	r1, [pc, #212]	; (80026c8 <HAL_GPIO_Init+0x304>)
 80025f2:	69fb      	ldr	r3, [r7, #28]
 80025f4:	089b      	lsrs	r3, r3, #2
 80025f6:	3302      	adds	r3, #2
 80025f8:	69ba      	ldr	r2, [r7, #24]
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025fe:	4b3a      	ldr	r3, [pc, #232]	; (80026e8 <HAL_GPIO_Init+0x324>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002604:	693b      	ldr	r3, [r7, #16]
 8002606:	43db      	mvns	r3, r3
 8002608:	69ba      	ldr	r2, [r7, #24]
 800260a:	4013      	ands	r3, r2
 800260c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800260e:	683b      	ldr	r3, [r7, #0]
 8002610:	685b      	ldr	r3, [r3, #4]
 8002612:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002616:	2b00      	cmp	r3, #0
 8002618:	d003      	beq.n	8002622 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 800261a:	69ba      	ldr	r2, [r7, #24]
 800261c:	693b      	ldr	r3, [r7, #16]
 800261e:	4313      	orrs	r3, r2
 8002620:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002622:	4a31      	ldr	r2, [pc, #196]	; (80026e8 <HAL_GPIO_Init+0x324>)
 8002624:	69bb      	ldr	r3, [r7, #24]
 8002626:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002628:	4b2f      	ldr	r3, [pc, #188]	; (80026e8 <HAL_GPIO_Init+0x324>)
 800262a:	68db      	ldr	r3, [r3, #12]
 800262c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800262e:	693b      	ldr	r3, [r7, #16]
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002640:	2b00      	cmp	r3, #0
 8002642:	d003      	beq.n	800264c <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8002644:	69ba      	ldr	r2, [r7, #24]
 8002646:	693b      	ldr	r3, [r7, #16]
 8002648:	4313      	orrs	r3, r2
 800264a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800264c:	4a26      	ldr	r2, [pc, #152]	; (80026e8 <HAL_GPIO_Init+0x324>)
 800264e:	69bb      	ldr	r3, [r7, #24]
 8002650:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002652:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_GPIO_Init+0x324>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002658:	693b      	ldr	r3, [r7, #16]
 800265a:	43db      	mvns	r3, r3
 800265c:	69ba      	ldr	r2, [r7, #24]
 800265e:	4013      	ands	r3, r2
 8002660:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	685b      	ldr	r3, [r3, #4]
 8002666:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d003      	beq.n	8002676 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	4313      	orrs	r3, r2
 8002674:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002676:	4a1c      	ldr	r2, [pc, #112]	; (80026e8 <HAL_GPIO_Init+0x324>)
 8002678:	69bb      	ldr	r3, [r7, #24]
 800267a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800267c:	4b1a      	ldr	r3, [pc, #104]	; (80026e8 <HAL_GPIO_Init+0x324>)
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002682:	693b      	ldr	r3, [r7, #16]
 8002684:	43db      	mvns	r3, r3
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	4013      	ands	r3, r2
 800268a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d003      	beq.n	80026a0 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002698:	69ba      	ldr	r2, [r7, #24]
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	4313      	orrs	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80026a0:	4a11      	ldr	r2, [pc, #68]	; (80026e8 <HAL_GPIO_Init+0x324>)
 80026a2:	69bb      	ldr	r3, [r7, #24]
 80026a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80026a6:	69fb      	ldr	r3, [r7, #28]
 80026a8:	3301      	adds	r3, #1
 80026aa:	61fb      	str	r3, [r7, #28]
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	2b0f      	cmp	r3, #15
 80026b0:	f67f ae96 	bls.w	80023e0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80026b4:	bf00      	nop
 80026b6:	bf00      	nop
 80026b8:	3724      	adds	r7, #36	; 0x24
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	40023800 	.word	0x40023800
 80026c8:	40013800 	.word	0x40013800
 80026cc:	40020000 	.word	0x40020000
 80026d0:	40020400 	.word	0x40020400
 80026d4:	40020800 	.word	0x40020800
 80026d8:	40020c00 	.word	0x40020c00
 80026dc:	40021000 	.word	0x40021000
 80026e0:	40021400 	.word	0x40021400
 80026e4:	40021800 	.word	0x40021800
 80026e8:	40013c00 	.word	0x40013c00

080026ec <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80026ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026ee:	b08f      	sub	sp, #60	; 0x3c
 80026f0:	af0a      	add	r7, sp, #40	; 0x28
 80026f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d101      	bne.n	80026fe <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
 80026fc:	e116      	b.n	800292c <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800270a:	b2db      	uxtb	r3, r3
 800270c:	2b00      	cmp	r3, #0
 800270e:	d106      	bne.n	800271e <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2200      	movs	r2, #0
 8002714:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f7fe fad5 	bl	8000cc8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2203      	movs	r2, #3
 8002722:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002726:	68bb      	ldr	r3, [r7, #8]
 8002728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800272a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800272e:	2b00      	cmp	r3, #0
 8002730:	d102      	bne.n	8002738 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2200      	movs	r2, #0
 8002736:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	4618      	mov	r0, r3
 800273e:	f002 f9a2 	bl	8004a86 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	603b      	str	r3, [r7, #0]
 8002748:	687e      	ldr	r6, [r7, #4]
 800274a:	466d      	mov	r5, sp
 800274c:	f106 0410 	add.w	r4, r6, #16
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002756:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002758:	e894 0003 	ldmia.w	r4, {r0, r1}
 800275c:	e885 0003 	stmia.w	r5, {r0, r1}
 8002760:	1d33      	adds	r3, r6, #4
 8002762:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002764:	6838      	ldr	r0, [r7, #0]
 8002766:	f002 f879 	bl	800485c <USB_CoreInit>
 800276a:	4603      	mov	r3, r0
 800276c:	2b00      	cmp	r3, #0
 800276e:	d005      	beq.n	800277c <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2202      	movs	r2, #2
 8002774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0d7      	b.n	800292c <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	2100      	movs	r1, #0
 8002782:	4618      	mov	r0, r3
 8002784:	f002 f990 	bl	8004aa8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002788:	2300      	movs	r3, #0
 800278a:	73fb      	strb	r3, [r7, #15]
 800278c:	e04a      	b.n	8002824 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800278e:	7bfa      	ldrb	r2, [r7, #15]
 8002790:	6879      	ldr	r1, [r7, #4]
 8002792:	4613      	mov	r3, r2
 8002794:	00db      	lsls	r3, r3, #3
 8002796:	4413      	add	r3, r2
 8002798:	009b      	lsls	r3, r3, #2
 800279a:	440b      	add	r3, r1
 800279c:	333d      	adds	r3, #61	; 0x3d
 800279e:	2201      	movs	r2, #1
 80027a0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80027a2:	7bfa      	ldrb	r2, [r7, #15]
 80027a4:	6879      	ldr	r1, [r7, #4]
 80027a6:	4613      	mov	r3, r2
 80027a8:	00db      	lsls	r3, r3, #3
 80027aa:	4413      	add	r3, r2
 80027ac:	009b      	lsls	r3, r3, #2
 80027ae:	440b      	add	r3, r1
 80027b0:	333c      	adds	r3, #60	; 0x3c
 80027b2:	7bfa      	ldrb	r2, [r7, #15]
 80027b4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80027b6:	7bfa      	ldrb	r2, [r7, #15]
 80027b8:	7bfb      	ldrb	r3, [r7, #15]
 80027ba:	b298      	uxth	r0, r3
 80027bc:	6879      	ldr	r1, [r7, #4]
 80027be:	4613      	mov	r3, r2
 80027c0:	00db      	lsls	r3, r3, #3
 80027c2:	4413      	add	r3, r2
 80027c4:	009b      	lsls	r3, r3, #2
 80027c6:	440b      	add	r3, r1
 80027c8:	3344      	adds	r3, #68	; 0x44
 80027ca:	4602      	mov	r2, r0
 80027cc:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80027ce:	7bfa      	ldrb	r2, [r7, #15]
 80027d0:	6879      	ldr	r1, [r7, #4]
 80027d2:	4613      	mov	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	4413      	add	r3, r2
 80027d8:	009b      	lsls	r3, r3, #2
 80027da:	440b      	add	r3, r1
 80027dc:	3340      	adds	r3, #64	; 0x40
 80027de:	2200      	movs	r2, #0
 80027e0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80027e2:	7bfa      	ldrb	r2, [r7, #15]
 80027e4:	6879      	ldr	r1, [r7, #4]
 80027e6:	4613      	mov	r3, r2
 80027e8:	00db      	lsls	r3, r3, #3
 80027ea:	4413      	add	r3, r2
 80027ec:	009b      	lsls	r3, r3, #2
 80027ee:	440b      	add	r3, r1
 80027f0:	3348      	adds	r3, #72	; 0x48
 80027f2:	2200      	movs	r2, #0
 80027f4:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80027f6:	7bfa      	ldrb	r2, [r7, #15]
 80027f8:	6879      	ldr	r1, [r7, #4]
 80027fa:	4613      	mov	r3, r2
 80027fc:	00db      	lsls	r3, r3, #3
 80027fe:	4413      	add	r3, r2
 8002800:	009b      	lsls	r3, r3, #2
 8002802:	440b      	add	r3, r1
 8002804:	334c      	adds	r3, #76	; 0x4c
 8002806:	2200      	movs	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800280a:	7bfa      	ldrb	r2, [r7, #15]
 800280c:	6879      	ldr	r1, [r7, #4]
 800280e:	4613      	mov	r3, r2
 8002810:	00db      	lsls	r3, r3, #3
 8002812:	4413      	add	r3, r2
 8002814:	009b      	lsls	r3, r3, #2
 8002816:	440b      	add	r3, r1
 8002818:	3354      	adds	r3, #84	; 0x54
 800281a:	2200      	movs	r2, #0
 800281c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800281e:	7bfb      	ldrb	r3, [r7, #15]
 8002820:	3301      	adds	r3, #1
 8002822:	73fb      	strb	r3, [r7, #15]
 8002824:	7bfa      	ldrb	r2, [r7, #15]
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	429a      	cmp	r2, r3
 800282c:	d3af      	bcc.n	800278e <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800282e:	2300      	movs	r3, #0
 8002830:	73fb      	strb	r3, [r7, #15]
 8002832:	e044      	b.n	80028be <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002834:	7bfa      	ldrb	r2, [r7, #15]
 8002836:	6879      	ldr	r1, [r7, #4]
 8002838:	4613      	mov	r3, r2
 800283a:	00db      	lsls	r3, r3, #3
 800283c:	4413      	add	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	440b      	add	r3, r1
 8002842:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800284a:	7bfa      	ldrb	r2, [r7, #15]
 800284c:	6879      	ldr	r1, [r7, #4]
 800284e:	4613      	mov	r3, r2
 8002850:	00db      	lsls	r3, r3, #3
 8002852:	4413      	add	r3, r2
 8002854:	009b      	lsls	r3, r3, #2
 8002856:	440b      	add	r3, r1
 8002858:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800285c:	7bfa      	ldrb	r2, [r7, #15]
 800285e:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002860:	7bfa      	ldrb	r2, [r7, #15]
 8002862:	6879      	ldr	r1, [r7, #4]
 8002864:	4613      	mov	r3, r2
 8002866:	00db      	lsls	r3, r3, #3
 8002868:	4413      	add	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	440b      	add	r3, r1
 800286e:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002872:	2200      	movs	r2, #0
 8002874:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002876:	7bfa      	ldrb	r2, [r7, #15]
 8002878:	6879      	ldr	r1, [r7, #4]
 800287a:	4613      	mov	r3, r2
 800287c:	00db      	lsls	r3, r3, #3
 800287e:	4413      	add	r3, r2
 8002880:	009b      	lsls	r3, r3, #2
 8002882:	440b      	add	r3, r1
 8002884:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002888:	2200      	movs	r2, #0
 800288a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800288c:	7bfa      	ldrb	r2, [r7, #15]
 800288e:	6879      	ldr	r1, [r7, #4]
 8002890:	4613      	mov	r3, r2
 8002892:	00db      	lsls	r3, r3, #3
 8002894:	4413      	add	r3, r2
 8002896:	009b      	lsls	r3, r3, #2
 8002898:	440b      	add	r3, r1
 800289a:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800289e:	2200      	movs	r2, #0
 80028a0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80028a2:	7bfa      	ldrb	r2, [r7, #15]
 80028a4:	6879      	ldr	r1, [r7, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	00db      	lsls	r3, r3, #3
 80028aa:	4413      	add	r3, r2
 80028ac:	009b      	lsls	r3, r3, #2
 80028ae:	440b      	add	r3, r1
 80028b0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80028b4:	2200      	movs	r2, #0
 80028b6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028b8:	7bfb      	ldrb	r3, [r7, #15]
 80028ba:	3301      	adds	r3, #1
 80028bc:	73fb      	strb	r3, [r7, #15]
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	685b      	ldr	r3, [r3, #4]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d3b5      	bcc.n	8002834 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	603b      	str	r3, [r7, #0]
 80028ce:	687e      	ldr	r6, [r7, #4]
 80028d0:	466d      	mov	r5, sp
 80028d2:	f106 0410 	add.w	r4, r6, #16
 80028d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028de:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028e2:	e885 0003 	stmia.w	r5, {r0, r1}
 80028e6:	1d33      	adds	r3, r6, #4
 80028e8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028ea:	6838      	ldr	r0, [r7, #0]
 80028ec:	f002 f928 	bl	8004b40 <USB_DevInit>
 80028f0:	4603      	mov	r3, r0
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d005      	beq.n	8002902 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2202      	movs	r2, #2
 80028fa:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e014      	b.n	800292c <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	2201      	movs	r2, #1
 800290e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002916:	2b01      	cmp	r3, #1
 8002918:	d102      	bne.n	8002920 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800291a:	6878      	ldr	r0, [r7, #4]
 800291c:	f001 f98c 	bl	8003c38 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4618      	mov	r0, r3
 8002926:	f003 fa6a 	bl	8005dfe <USB_DevDisconnect>

  return HAL_OK;
 800292a:	2300      	movs	r3, #0
}
 800292c:	4618      	mov	r0, r3
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002934 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b084      	sub	sp, #16
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002948:	2b01      	cmp	r3, #1
 800294a:	d101      	bne.n	8002950 <HAL_PCD_Start+0x1c>
 800294c:	2302      	movs	r3, #2
 800294e:	e020      	b.n	8002992 <HAL_PCD_Start+0x5e>
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800295c:	2b01      	cmp	r3, #1
 800295e:	d109      	bne.n	8002974 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002964:	2b01      	cmp	r3, #1
 8002966:	d005      	beq.n	8002974 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800296c:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f002 f873 	bl	8004a64 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f003 fa1a 	bl	8005dbc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	2200      	movs	r2, #0
 800298c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002990:	2300      	movs	r3, #0
}
 8002992:	4618      	mov	r0, r3
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800299a:	b590      	push	{r4, r7, lr}
 800299c:	b08d      	sub	sp, #52	; 0x34
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80029a8:	6a3b      	ldr	r3, [r7, #32]
 80029aa:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4618      	mov	r0, r3
 80029b2:	f003 fad8 	bl	8005f66 <USB_GetMode>
 80029b6:	4603      	mov	r3, r0
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f040 84b7 	bne.w	800332c <HAL_PCD_IRQHandler+0x992>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4618      	mov	r0, r3
 80029c4:	f003 fa3c 	bl	8005e40 <USB_ReadInterrupts>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	f000 84ad 	beq.w	800332a <HAL_PCD_IRQHandler+0x990>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80029d0:	69fb      	ldr	r3, [r7, #28]
 80029d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029d6:	689b      	ldr	r3, [r3, #8]
 80029d8:	0a1b      	lsrs	r3, r3, #8
 80029da:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4618      	mov	r0, r3
 80029ea:	f003 fa29 	bl	8005e40 <USB_ReadInterrupts>
 80029ee:	4603      	mov	r3, r0
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b02      	cmp	r3, #2
 80029f6:	d107      	bne.n	8002a08 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	695a      	ldr	r2, [r3, #20]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	f002 0202 	and.w	r2, r2, #2
 8002a06:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4618      	mov	r0, r3
 8002a0e:	f003 fa17 	bl	8005e40 <USB_ReadInterrupts>
 8002a12:	4603      	mov	r3, r0
 8002a14:	f003 0310 	and.w	r3, r3, #16
 8002a18:	2b10      	cmp	r3, #16
 8002a1a:	d161      	bne.n	8002ae0 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	699a      	ldr	r2, [r3, #24]
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f022 0210 	bic.w	r2, r2, #16
 8002a2a:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002a2c:	6a3b      	ldr	r3, [r7, #32]
 8002a2e:	6a1b      	ldr	r3, [r3, #32]
 8002a30:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002a32:	69bb      	ldr	r3, [r7, #24]
 8002a34:	f003 020f 	and.w	r2, r3, #15
 8002a38:	4613      	mov	r3, r2
 8002a3a:	00db      	lsls	r3, r3, #3
 8002a3c:	4413      	add	r3, r2
 8002a3e:	009b      	lsls	r3, r3, #2
 8002a40:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a44:	687a      	ldr	r2, [r7, #4]
 8002a46:	4413      	add	r3, r2
 8002a48:	3304      	adds	r3, #4
 8002a4a:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002a4c:	69bb      	ldr	r3, [r7, #24]
 8002a4e:	0c5b      	lsrs	r3, r3, #17
 8002a50:	f003 030f 	and.w	r3, r3, #15
 8002a54:	2b02      	cmp	r3, #2
 8002a56:	d124      	bne.n	8002aa2 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002a58:	69ba      	ldr	r2, [r7, #24]
 8002a5a:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002a5e:	4013      	ands	r3, r2
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d035      	beq.n	8002ad0 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002a68:	69bb      	ldr	r3, [r7, #24]
 8002a6a:	091b      	lsrs	r3, r3, #4
 8002a6c:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002a6e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a72:	b29b      	uxth	r3, r3
 8002a74:	461a      	mov	r2, r3
 8002a76:	6a38      	ldr	r0, [r7, #32]
 8002a78:	f003 f84e 	bl	8005b18 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	691a      	ldr	r2, [r3, #16]
 8002a80:	69bb      	ldr	r3, [r7, #24]
 8002a82:	091b      	lsrs	r3, r3, #4
 8002a84:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a88:	441a      	add	r2, r3
 8002a8a:	697b      	ldr	r3, [r7, #20]
 8002a8c:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002a8e:	697b      	ldr	r3, [r7, #20]
 8002a90:	6a1a      	ldr	r2, [r3, #32]
 8002a92:	69bb      	ldr	r3, [r7, #24]
 8002a94:	091b      	lsrs	r3, r3, #4
 8002a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002a9a:	441a      	add	r2, r3
 8002a9c:	697b      	ldr	r3, [r7, #20]
 8002a9e:	621a      	str	r2, [r3, #32]
 8002aa0:	e016      	b.n	8002ad0 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002aa2:	69bb      	ldr	r3, [r7, #24]
 8002aa4:	0c5b      	lsrs	r3, r3, #17
 8002aa6:	f003 030f 	and.w	r3, r3, #15
 8002aaa:	2b06      	cmp	r3, #6
 8002aac:	d110      	bne.n	8002ad0 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ab4:	2208      	movs	r2, #8
 8002ab6:	4619      	mov	r1, r3
 8002ab8:	6a38      	ldr	r0, [r7, #32]
 8002aba:	f003 f82d 	bl	8005b18 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002abe:	697b      	ldr	r3, [r7, #20]
 8002ac0:	6a1a      	ldr	r2, [r3, #32]
 8002ac2:	69bb      	ldr	r3, [r7, #24]
 8002ac4:	091b      	lsrs	r3, r3, #4
 8002ac6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002aca:	441a      	add	r2, r3
 8002acc:	697b      	ldr	r3, [r7, #20]
 8002ace:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	699a      	ldr	r2, [r3, #24]
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	f042 0210 	orr.w	r2, r2, #16
 8002ade:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	f003 f9ab 	bl	8005e40 <USB_ReadInterrupts>
 8002aea:	4603      	mov	r3, r0
 8002aec:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002af0:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002af4:	f040 80a7 	bne.w	8002c46 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f003 f9b0 	bl	8005e66 <USB_ReadDevAllOutEpInterrupt>
 8002b06:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002b08:	e099      	b.n	8002c3e <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002b0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b0c:	f003 0301 	and.w	r3, r3, #1
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	f000 808e 	beq.w	8002c32 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1c:	b2d2      	uxtb	r2, r2
 8002b1e:	4611      	mov	r1, r2
 8002b20:	4618      	mov	r0, r3
 8002b22:	f003 f9d4 	bl	8005ece <USB_ReadDevOutEPInterrupt>
 8002b26:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f003 0301 	and.w	r3, r3, #1
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d00c      	beq.n	8002b4c <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002b32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b34:	015a      	lsls	r2, r3, #5
 8002b36:	69fb      	ldr	r3, [r7, #28]
 8002b38:	4413      	add	r3, r2
 8002b3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b3e:	461a      	mov	r2, r3
 8002b40:	2301      	movs	r3, #1
 8002b42:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002b44:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f000 fef0 	bl	800392c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002b4c:	693b      	ldr	r3, [r7, #16]
 8002b4e:	f003 0308 	and.w	r3, r3, #8
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00c      	beq.n	8002b70 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	015a      	lsls	r2, r3, #5
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	4413      	add	r3, r2
 8002b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b62:	461a      	mov	r2, r3
 8002b64:	2308      	movs	r3, #8
 8002b66:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002b68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	f000 ffc6 	bl	8003afc <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	f003 0310 	and.w	r3, r3, #16
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d008      	beq.n	8002b8c <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7c:	015a      	lsls	r2, r3, #5
 8002b7e:	69fb      	ldr	r3, [r7, #28]
 8002b80:	4413      	add	r3, r2
 8002b82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b86:	461a      	mov	r2, r3
 8002b88:	2310      	movs	r3, #16
 8002b8a:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002b8c:	693b      	ldr	r3, [r7, #16]
 8002b8e:	f003 0302 	and.w	r3, r3, #2
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d030      	beq.n	8002bf8 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002b96:	6a3b      	ldr	r3, [r7, #32]
 8002b98:	695b      	ldr	r3, [r3, #20]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d109      	bne.n	8002bb6 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	69fa      	ldr	r2, [r7, #28]
 8002bac:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002bb0:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002bb4:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002bb6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb8:	4613      	mov	r3, r2
 8002bba:	00db      	lsls	r3, r3, #3
 8002bbc:	4413      	add	r3, r2
 8002bbe:	009b      	lsls	r3, r3, #2
 8002bc0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002bc4:	687a      	ldr	r2, [r7, #4]
 8002bc6:	4413      	add	r3, r2
 8002bc8:	3304      	adds	r3, #4
 8002bca:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bcc:	697b      	ldr	r3, [r7, #20]
 8002bce:	78db      	ldrb	r3, [r3, #3]
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d108      	bne.n	8002be6 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002bd4:	697b      	ldr	r3, [r7, #20]
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bdc:	b2db      	uxtb	r3, r3
 8002bde:	4619      	mov	r1, r3
 8002be0:	6878      	ldr	r0, [r7, #4]
 8002be2:	f7ff f833 	bl	8001c4c <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002be6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be8:	015a      	lsls	r2, r3, #5
 8002bea:	69fb      	ldr	r3, [r7, #28]
 8002bec:	4413      	add	r3, r2
 8002bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002bf2:	461a      	mov	r2, r3
 8002bf4:	2302      	movs	r3, #2
 8002bf6:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002bf8:	693b      	ldr	r3, [r7, #16]
 8002bfa:	f003 0320 	and.w	r3, r3, #32
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c04:	015a      	lsls	r2, r3, #5
 8002c06:	69fb      	ldr	r3, [r7, #28]
 8002c08:	4413      	add	r3, r2
 8002c0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c0e:	461a      	mov	r2, r3
 8002c10:	2320      	movs	r3, #32
 8002c12:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002c14:	693b      	ldr	r3, [r7, #16]
 8002c16:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d009      	beq.n	8002c32 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c20:	015a      	lsls	r2, r3, #5
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	4413      	add	r3, r2
 8002c26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2a:	461a      	mov	r2, r3
 8002c2c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c30:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002c32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c34:	3301      	adds	r3, #1
 8002c36:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c3a:	085b      	lsrs	r3, r3, #1
 8002c3c:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	f47f af62 	bne.w	8002b0a <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f003 f8f8 	bl	8005e40 <USB_ReadInterrupts>
 8002c50:	4603      	mov	r3, r0
 8002c52:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c56:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002c5a:	f040 80db 	bne.w	8002e14 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	4618      	mov	r0, r3
 8002c64:	f003 f919 	bl	8005e9a <USB_ReadDevAllInEpInterrupt>
 8002c68:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002c6a:	2300      	movs	r3, #0
 8002c6c:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002c6e:	e0cd      	b.n	8002e0c <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002c70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c72:	f003 0301 	and.w	r3, r3, #1
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f000 80c2 	beq.w	8002e00 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c82:	b2d2      	uxtb	r2, r2
 8002c84:	4611      	mov	r1, r2
 8002c86:	4618      	mov	r0, r3
 8002c88:	f003 f93f 	bl	8005f0a <USB_ReadDevInEPInterrupt>
 8002c8c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0301 	and.w	r3, r3, #1
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d057      	beq.n	8002d48 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002c98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c9a:	f003 030f 	and.w	r3, r3, #15
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca4:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cac:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69f9      	ldr	r1, [r7, #28]
 8002cb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002cb8:	4013      	ands	r3, r2
 8002cba:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cbe:	015a      	lsls	r2, r3, #5
 8002cc0:	69fb      	ldr	r3, [r7, #28]
 8002cc2:	4413      	add	r3, r2
 8002cc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002cc8:	461a      	mov	r2, r3
 8002cca:	2301      	movs	r3, #1
 8002ccc:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	691b      	ldr	r3, [r3, #16]
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d132      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002cd6:	6879      	ldr	r1, [r7, #4]
 8002cd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cda:	4613      	mov	r3, r2
 8002cdc:	00db      	lsls	r3, r3, #3
 8002cde:	4413      	add	r3, r2
 8002ce0:	009b      	lsls	r3, r3, #2
 8002ce2:	440b      	add	r3, r1
 8002ce4:	334c      	adds	r3, #76	; 0x4c
 8002ce6:	6819      	ldr	r1, [r3, #0]
 8002ce8:	6878      	ldr	r0, [r7, #4]
 8002cea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cec:	4613      	mov	r3, r2
 8002cee:	00db      	lsls	r3, r3, #3
 8002cf0:	4413      	add	r3, r2
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	4403      	add	r3, r0
 8002cf6:	3348      	adds	r3, #72	; 0x48
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	4419      	add	r1, r3
 8002cfc:	6878      	ldr	r0, [r7, #4]
 8002cfe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d00:	4613      	mov	r3, r2
 8002d02:	00db      	lsls	r3, r3, #3
 8002d04:	4413      	add	r3, r2
 8002d06:	009b      	lsls	r3, r3, #2
 8002d08:	4403      	add	r3, r0
 8002d0a:	334c      	adds	r3, #76	; 0x4c
 8002d0c:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002d0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d113      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x3a2>
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d18:	4613      	mov	r3, r2
 8002d1a:	00db      	lsls	r3, r3, #3
 8002d1c:	4413      	add	r3, r2
 8002d1e:	009b      	lsls	r3, r3, #2
 8002d20:	440b      	add	r3, r1
 8002d22:	3354      	adds	r3, #84	; 0x54
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d108      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6818      	ldr	r0, [r3, #0]
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d34:	461a      	mov	r2, r3
 8002d36:	2101      	movs	r1, #1
 8002d38:	f003 f946 	bl	8005fc8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	b2db      	uxtb	r3, r3
 8002d40:	4619      	mov	r1, r3
 8002d42:	6878      	ldr	r0, [r7, #4]
 8002d44:	f7fe fefe 	bl	8001b44 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d008      	beq.n	8002d64 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002d52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d54:	015a      	lsls	r2, r3, #5
 8002d56:	69fb      	ldr	r3, [r7, #28]
 8002d58:	4413      	add	r3, r2
 8002d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d5e:	461a      	mov	r2, r3
 8002d60:	2308      	movs	r3, #8
 8002d62:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002d64:	693b      	ldr	r3, [r7, #16]
 8002d66:	f003 0310 	and.w	r3, r3, #16
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d008      	beq.n	8002d80 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002d6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d70:	015a      	lsls	r2, r3, #5
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	4413      	add	r3, r2
 8002d76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d7a:	461a      	mov	r2, r3
 8002d7c:	2310      	movs	r3, #16
 8002d7e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002d80:	693b      	ldr	r3, [r7, #16]
 8002d82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d008      	beq.n	8002d9c <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8c:	015a      	lsls	r2, r3, #5
 8002d8e:	69fb      	ldr	r3, [r7, #28]
 8002d90:	4413      	add	r3, r2
 8002d92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d96:	461a      	mov	r2, r3
 8002d98:	2340      	movs	r3, #64	; 0x40
 8002d9a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002d9c:	693b      	ldr	r3, [r7, #16]
 8002d9e:	f003 0302 	and.w	r3, r3, #2
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d023      	beq.n	8002dee <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002da6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002da8:	6a38      	ldr	r0, [r7, #32]
 8002daa:	f002 f827 	bl	8004dfc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db0:	4613      	mov	r3, r2
 8002db2:	00db      	lsls	r3, r3, #3
 8002db4:	4413      	add	r3, r2
 8002db6:	009b      	lsls	r3, r3, #2
 8002db8:	3338      	adds	r3, #56	; 0x38
 8002dba:	687a      	ldr	r2, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	3304      	adds	r3, #4
 8002dc0:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002dc2:	697b      	ldr	r3, [r7, #20]
 8002dc4:	78db      	ldrb	r3, [r3, #3]
 8002dc6:	2b01      	cmp	r3, #1
 8002dc8:	d108      	bne.n	8002ddc <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002dca:	697b      	ldr	r3, [r7, #20]
 8002dcc:	2200      	movs	r2, #0
 8002dce:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	6878      	ldr	r0, [r7, #4]
 8002dd8:	f7fe ff4a 	bl	8001c70 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002ddc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dde:	015a      	lsls	r2, r3, #5
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	4413      	add	r3, r2
 8002de4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002de8:	461a      	mov	r2, r3
 8002dea:	2302      	movs	r3, #2
 8002dec:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d003      	beq.n	8002e00 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002df8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fd08 	bl	8003810 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e02:	3301      	adds	r3, #1
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002e0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f47f af2e 	bne.w	8002c70 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f003 f811 	bl	8005e40 <USB_ReadInterrupts>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002e24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002e28:	d122      	bne.n	8002e70 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e30:	685b      	ldr	r3, [r3, #4]
 8002e32:	69fa      	ldr	r2, [r7, #28]
 8002e34:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e38:	f023 0301 	bic.w	r3, r3, #1
 8002e3c:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d108      	bne.n	8002e5a <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002e50:	2100      	movs	r1, #0
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 ff14 	bl	8003c80 <HAL_PCDEx_LPM_Callback>
 8002e58:	e002      	b.n	8002e60 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002e5a:	6878      	ldr	r0, [r7, #4]
 8002e5c:	f7fe fee8 	bl	8001c30 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	695a      	ldr	r2, [r3, #20]
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002e6e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4618      	mov	r0, r3
 8002e76:	f002 ffe3 	bl	8005e40 <USB_ReadInterrupts>
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e80:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002e84:	d112      	bne.n	8002eac <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002e86:	69fb      	ldr	r3, [r7, #28]
 8002e88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e8c:	689b      	ldr	r3, [r3, #8]
 8002e8e:	f003 0301 	and.w	r3, r3, #1
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d102      	bne.n	8002e9c <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f7fe fea4 	bl	8001be4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002eaa:	615a      	str	r2, [r3, #20]
    }
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
    /* Handle LPM Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 ffc5 	bl	8005e40 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ebc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ec0:	d121      	bne.n	8002f06 <HAL_PCD_IRQHandler+0x56c>
    {
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_LPMINT);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	695a      	ldr	r2, [r3, #20]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f002 6200 	and.w	r2, r2, #134217728	; 0x8000000
 8002ed0:	615a      	str	r2, [r3, #20]

      if (hpcd->LPM_State == LPM_L0)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d111      	bne.n	8002f00 <HAL_PCD_IRQHandler+0x566>
      {
        hpcd->LPM_State = LPM_L1;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	2201      	movs	r2, #1
 8002ee0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
        hpcd->BESL = (hpcd->Instance->GLPMCFG & USB_OTG_GLPMCFG_BESL) >> 2U;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002eea:	089b      	lsrs	r3, r3, #2
 8002eec:	f003 020f 	and.w	r2, r3, #15
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	f8c3 24f8 	str.w	r2, [r3, #1272]	; 0x4f8

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8002ef6:	2101      	movs	r1, #1
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fec1 	bl	8003c80 <HAL_PCDEx_LPM_Callback>
 8002efe:	e002      	b.n	8002f06 <HAL_PCD_IRQHandler+0x56c>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f00:	6878      	ldr	r0, [r7, #4]
 8002f02:	f7fe fe6f 	bl	8001be4 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f002 ff98 	bl	8005e40 <USB_ReadInterrupts>
 8002f10:	4603      	mov	r3, r0
 8002f12:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002f16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f1a:	f040 80b7 	bne.w	800308c <HAL_PCD_IRQHandler+0x6f2>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f1e:	69fb      	ldr	r3, [r7, #28]
 8002f20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	69fa      	ldr	r2, [r7, #28]
 8002f28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f2c:	f023 0301 	bic.w	r3, r3, #1
 8002f30:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	2110      	movs	r1, #16
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f001 ff5f 	bl	8004dfc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002f3e:	2300      	movs	r3, #0
 8002f40:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002f42:	e046      	b.n	8002fd2 <HAL_PCD_IRQHandler+0x638>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002f44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f46:	015a      	lsls	r2, r3, #5
 8002f48:	69fb      	ldr	r3, [r7, #28]
 8002f4a:	4413      	add	r3, r2
 8002f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f50:	461a      	mov	r2, r3
 8002f52:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f56:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f5a:	015a      	lsls	r2, r3, #5
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	4413      	add	r3, r2
 8002f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f68:	0151      	lsls	r1, r2, #5
 8002f6a:	69fa      	ldr	r2, [r7, #28]
 8002f6c:	440a      	add	r2, r1
 8002f6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002f72:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002f76:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f7a:	015a      	lsls	r2, r3, #5
 8002f7c:	69fb      	ldr	r3, [r7, #28]
 8002f7e:	4413      	add	r3, r2
 8002f80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f84:	461a      	mov	r2, r3
 8002f86:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002f8a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002f8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8e:	015a      	lsls	r2, r3, #5
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	4413      	add	r3, r2
 8002f94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002f9c:	0151      	lsls	r1, r2, #5
 8002f9e:	69fa      	ldr	r2, [r7, #28]
 8002fa0:	440a      	add	r2, r1
 8002fa2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fa6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002faa:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002fac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fae:	015a      	lsls	r2, r3, #5
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	4413      	add	r3, r2
 8002fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fbc:	0151      	lsls	r1, r2, #5
 8002fbe:	69fa      	ldr	r2, [r7, #28]
 8002fc0:	440a      	add	r2, r1
 8002fc2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002fc6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002fca:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fce:	3301      	adds	r3, #1
 8002fd0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002fd8:	429a      	cmp	r2, r3
 8002fda:	d3b3      	bcc.n	8002f44 <HAL_PCD_IRQHandler+0x5aa>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	69fa      	ldr	r2, [r7, #28]
 8002fe6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fea:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002fee:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d016      	beq.n	8003026 <HAL_PCD_IRQHandler+0x68c>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ffe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003002:	69fa      	ldr	r2, [r7, #28]
 8003004:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003008:	f043 030b 	orr.w	r3, r3, #11
 800300c:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8003010:	69fb      	ldr	r3, [r7, #28]
 8003012:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003016:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003018:	69fa      	ldr	r2, [r7, #28]
 800301a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800301e:	f043 030b 	orr.w	r3, r3, #11
 8003022:	6453      	str	r3, [r2, #68]	; 0x44
 8003024:	e015      	b.n	8003052 <HAL_PCD_IRQHandler+0x6b8>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800302c:	695b      	ldr	r3, [r3, #20]
 800302e:	69fa      	ldr	r2, [r7, #28]
 8003030:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003034:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003038:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800303c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	691b      	ldr	r3, [r3, #16]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304c:	f043 030b 	orr.w	r3, r3, #11
 8003050:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	69fa      	ldr	r2, [r7, #28]
 800305c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003060:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003064:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	6818      	ldr	r0, [r3, #0]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	691b      	ldr	r3, [r3, #16]
 800306e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003076:	461a      	mov	r2, r3
 8003078:	f002 ffa6 	bl	8005fc8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	695a      	ldr	r2, [r3, #20]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800308a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4618      	mov	r0, r3
 8003092:	f002 fed5 	bl	8005e40 <USB_ReadInterrupts>
 8003096:	4603      	mov	r3, r0
 8003098:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800309c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80030a0:	d124      	bne.n	80030ec <HAL_PCD_IRQHandler+0x752>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4618      	mov	r0, r3
 80030a8:	f002 ff6b 	bl	8005f82 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f001 ff20 	bl	8004ef6 <USB_GetDevSpeed>
 80030b6:	4603      	mov	r3, r0
 80030b8:	461a      	mov	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681c      	ldr	r4, [r3, #0]
 80030c2:	f000 fde9 	bl	8003c98 <HAL_RCC_GetHCLKFreq>
 80030c6:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	461a      	mov	r2, r3
 80030d0:	4620      	mov	r0, r4
 80030d2:	f001 fc25 	bl	8004920 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80030d6:	6878      	ldr	r0, [r7, #4]
 80030d8:	f7fe fd5c 	bl	8001b94 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80030ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4618      	mov	r0, r3
 80030f2:	f002 fea5 	bl	8005e40 <USB_ReadInterrupts>
 80030f6:	4603      	mov	r3, r0
 80030f8:	f003 0308 	and.w	r3, r3, #8
 80030fc:	2b08      	cmp	r3, #8
 80030fe:	d10a      	bne.n	8003116 <HAL_PCD_IRQHandler+0x77c>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8003100:	6878      	ldr	r0, [r7, #4]
 8003102:	f7fe fd39 	bl	8001b78 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	695a      	ldr	r2, [r3, #20]
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	f002 0208 	and.w	r2, r2, #8
 8003114:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f002 fe90 	bl	8005e40 <USB_ReadInterrupts>
 8003120:	4603      	mov	r3, r0
 8003122:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003126:	2b80      	cmp	r3, #128	; 0x80
 8003128:	d122      	bne.n	8003170 <HAL_PCD_IRQHandler+0x7d6>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 800312a:	6a3b      	ldr	r3, [r7, #32]
 800312c:	699b      	ldr	r3, [r3, #24]
 800312e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003132:	6a3b      	ldr	r3, [r7, #32]
 8003134:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003136:	2301      	movs	r3, #1
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
 800313a:	e014      	b.n	8003166 <HAL_PCD_IRQHandler+0x7cc>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 800313c:	6879      	ldr	r1, [r7, #4]
 800313e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003140:	4613      	mov	r3, r2
 8003142:	00db      	lsls	r3, r3, #3
 8003144:	4413      	add	r3, r2
 8003146:	009b      	lsls	r3, r3, #2
 8003148:	440b      	add	r3, r1
 800314a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800314e:	781b      	ldrb	r3, [r3, #0]
 8003150:	2b01      	cmp	r3, #1
 8003152:	d105      	bne.n	8003160 <HAL_PCD_IRQHandler+0x7c6>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003154:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003156:	b2db      	uxtb	r3, r3
 8003158:	4619      	mov	r1, r3
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f000 fb27 	bl	80037ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003162:	3301      	adds	r3, #1
 8003164:	627b      	str	r3, [r7, #36]	; 0x24
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800316c:	429a      	cmp	r2, r3
 800316e:	d3e5      	bcc.n	800313c <HAL_PCD_IRQHandler+0x7a2>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	4618      	mov	r0, r3
 8003176:	f002 fe63 	bl	8005e40 <USB_ReadInterrupts>
 800317a:	4603      	mov	r3, r0
 800317c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003180:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003184:	d13b      	bne.n	80031fe <HAL_PCD_IRQHandler+0x864>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003186:	2301      	movs	r3, #1
 8003188:	627b      	str	r3, [r7, #36]	; 0x24
 800318a:	e02b      	b.n	80031e4 <HAL_PCD_IRQHandler+0x84a>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 800318c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318e:	015a      	lsls	r2, r3, #5
 8003190:	69fb      	ldr	r3, [r7, #28]
 8003192:	4413      	add	r3, r2
 8003194:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800319c:	6879      	ldr	r1, [r7, #4]
 800319e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031a0:	4613      	mov	r3, r2
 80031a2:	00db      	lsls	r3, r3, #3
 80031a4:	4413      	add	r3, r2
 80031a6:	009b      	lsls	r3, r3, #2
 80031a8:	440b      	add	r3, r1
 80031aa:	3340      	adds	r3, #64	; 0x40
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d115      	bne.n	80031de <HAL_PCD_IRQHandler+0x844>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80031b2:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80031b4:	2b00      	cmp	r3, #0
 80031b6:	da12      	bge.n	80031de <HAL_PCD_IRQHandler+0x844>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80031b8:	6879      	ldr	r1, [r7, #4]
 80031ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	333f      	adds	r3, #63	; 0x3f
 80031c8:	2201      	movs	r2, #1
 80031ca:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80031cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031ce:	b2db      	uxtb	r3, r3
 80031d0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80031d4:	b2db      	uxtb	r3, r3
 80031d6:	4619      	mov	r1, r3
 80031d8:	6878      	ldr	r0, [r7, #4]
 80031da:	f000 fae8 	bl	80037ae <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031e0:	3301      	adds	r3, #1
 80031e2:	627b      	str	r3, [r7, #36]	; 0x24
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d3ce      	bcc.n	800318c <HAL_PCD_IRQHandler+0x7f2>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	695a      	ldr	r2, [r3, #20]
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80031fc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4618      	mov	r0, r3
 8003204:	f002 fe1c 	bl	8005e40 <USB_ReadInterrupts>
 8003208:	4603      	mov	r3, r0
 800320a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800320e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003212:	d155      	bne.n	80032c0 <HAL_PCD_IRQHandler+0x926>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003214:	2301      	movs	r3, #1
 8003216:	627b      	str	r3, [r7, #36]	; 0x24
 8003218:	e045      	b.n	80032a6 <HAL_PCD_IRQHandler+0x90c>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 800321a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800321c:	015a      	lsls	r2, r3, #5
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	4413      	add	r3, r2
 8003222:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800322a:	6879      	ldr	r1, [r7, #4]
 800322c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800322e:	4613      	mov	r3, r2
 8003230:	00db      	lsls	r3, r3, #3
 8003232:	4413      	add	r3, r2
 8003234:	009b      	lsls	r3, r3, #2
 8003236:	440b      	add	r3, r1
 8003238:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800323c:	781b      	ldrb	r3, [r3, #0]
 800323e:	2b01      	cmp	r3, #1
 8003240:	d12e      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003242:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003244:	2b00      	cmp	r3, #0
 8003246:	da2b      	bge.n	80032a0 <HAL_PCD_IRQHandler+0x906>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003254:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003258:	429a      	cmp	r2, r3
 800325a:	d121      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x906>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800326e:	2201      	movs	r2, #1
 8003270:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003272:	6a3b      	ldr	r3, [r7, #32]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800327a:	6a3b      	ldr	r3, [r7, #32]
 800327c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800327e:	6a3b      	ldr	r3, [r7, #32]
 8003280:	695b      	ldr	r3, [r3, #20]
 8003282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003286:	2b00      	cmp	r3, #0
 8003288:	d10a      	bne.n	80032a0 <HAL_PCD_IRQHandler+0x906>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800328a:	69fb      	ldr	r3, [r7, #28]
 800328c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	69fa      	ldr	r2, [r7, #28]
 8003294:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003298:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800329c:	6053      	str	r3, [r2, #4]
            break;
 800329e:	e007      	b.n	80032b0 <HAL_PCD_IRQHandler+0x916>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032a2:	3301      	adds	r3, #1
 80032a4:	627b      	str	r3, [r7, #36]	; 0x24
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	685b      	ldr	r3, [r3, #4]
 80032aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d3b4      	bcc.n	800321a <HAL_PCD_IRQHandler+0x880>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	695a      	ldr	r2, [r3, #20]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80032be:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4618      	mov	r0, r3
 80032c6:	f002 fdbb 	bl	8005e40 <USB_ReadInterrupts>
 80032ca:	4603      	mov	r3, r0
 80032cc:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d10a      	bne.n	80032ec <HAL_PCD_IRQHandler+0x952>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f7fe fcdc 	bl	8001c94 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	695a      	ldr	r2, [r3, #20]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80032ea:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	4618      	mov	r0, r3
 80032f2:	f002 fda5 	bl	8005e40 <USB_ReadInterrupts>
 80032f6:	4603      	mov	r3, r0
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b04      	cmp	r3, #4
 80032fe:	d115      	bne.n	800332c <HAL_PCD_IRQHandler+0x992>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	f003 0304 	and.w	r3, r3, #4
 800330e:	2b00      	cmp	r3, #0
 8003310:	d002      	beq.n	8003318 <HAL_PCD_IRQHandler+0x97e>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8003312:	6878      	ldr	r0, [r7, #4]
 8003314:	f7fe fccc 	bl	8001cb0 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	6859      	ldr	r1, [r3, #4]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	69ba      	ldr	r2, [r7, #24]
 8003324:	430a      	orrs	r2, r1
 8003326:	605a      	str	r2, [r3, #4]
 8003328:	e000      	b.n	800332c <HAL_PCD_IRQHandler+0x992>
      return;
 800332a:	bf00      	nop
    }
  }
}
 800332c:	3734      	adds	r7, #52	; 0x34
 800332e:	46bd      	mov	sp, r7
 8003330:	bd90      	pop	{r4, r7, pc}

08003332 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8003332:	b580      	push	{r7, lr}
 8003334:	b082      	sub	sp, #8
 8003336:	af00      	add	r7, sp, #0
 8003338:	6078      	str	r0, [r7, #4]
 800333a:	460b      	mov	r3, r1
 800333c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003344:	2b01      	cmp	r3, #1
 8003346:	d101      	bne.n	800334c <HAL_PCD_SetAddress+0x1a>
 8003348:	2302      	movs	r3, #2
 800334a:	e013      	b.n	8003374 <HAL_PCD_SetAddress+0x42>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	78fa      	ldrb	r2, [r7, #3]
 8003358:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	78fa      	ldrb	r2, [r7, #3]
 8003362:	4611      	mov	r1, r2
 8003364:	4618      	mov	r0, r3
 8003366:	f002 fd03 	bl	8005d70 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003372:	2300      	movs	r3, #0
}
 8003374:	4618      	mov	r0, r3
 8003376:	3708      	adds	r7, #8
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}

0800337c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b084      	sub	sp, #16
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	4608      	mov	r0, r1
 8003386:	4611      	mov	r1, r2
 8003388:	461a      	mov	r2, r3
 800338a:	4603      	mov	r3, r0
 800338c:	70fb      	strb	r3, [r7, #3]
 800338e:	460b      	mov	r3, r1
 8003390:	803b      	strh	r3, [r7, #0]
 8003392:	4613      	mov	r3, r2
 8003394:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003396:	2300      	movs	r3, #0
 8003398:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800339a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	da0f      	bge.n	80033c2 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033a2:	78fb      	ldrb	r3, [r7, #3]
 80033a4:	f003 020f 	and.w	r2, r3, #15
 80033a8:	4613      	mov	r3, r2
 80033aa:	00db      	lsls	r3, r3, #3
 80033ac:	4413      	add	r3, r2
 80033ae:	009b      	lsls	r3, r3, #2
 80033b0:	3338      	adds	r3, #56	; 0x38
 80033b2:	687a      	ldr	r2, [r7, #4]
 80033b4:	4413      	add	r3, r2
 80033b6:	3304      	adds	r3, #4
 80033b8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	2201      	movs	r2, #1
 80033be:	705a      	strb	r2, [r3, #1]
 80033c0:	e00f      	b.n	80033e2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80033c2:	78fb      	ldrb	r3, [r7, #3]
 80033c4:	f003 020f 	and.w	r2, r3, #15
 80033c8:	4613      	mov	r3, r2
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	4413      	add	r3, r2
 80033ce:	009b      	lsls	r3, r3, #2
 80033d0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80033d4:	687a      	ldr	r2, [r7, #4]
 80033d6:	4413      	add	r3, r2
 80033d8:	3304      	adds	r3, #4
 80033da:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80033e2:	78fb      	ldrb	r3, [r7, #3]
 80033e4:	f003 030f 	and.w	r3, r3, #15
 80033e8:	b2da      	uxtb	r2, r3
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80033ee:	883a      	ldrh	r2, [r7, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	78ba      	ldrb	r2, [r7, #2]
 80033f8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	785b      	ldrb	r3, [r3, #1]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d004      	beq.n	800340c <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b29a      	uxth	r2, r3
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800340c:	78bb      	ldrb	r3, [r7, #2]
 800340e:	2b02      	cmp	r3, #2
 8003410:	d102      	bne.n	8003418 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2200      	movs	r2, #0
 8003416:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800341e:	2b01      	cmp	r3, #1
 8003420:	d101      	bne.n	8003426 <HAL_PCD_EP_Open+0xaa>
 8003422:	2302      	movs	r3, #2
 8003424:	e00e      	b.n	8003444 <HAL_PCD_EP_Open+0xc8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	2201      	movs	r2, #1
 800342a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	68f9      	ldr	r1, [r7, #12]
 8003434:	4618      	mov	r0, r3
 8003436:	f001 fd83 	bl	8004f40 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	2200      	movs	r2, #0
 800343e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003442:	7afb      	ldrb	r3, [r7, #11]
}
 8003444:	4618      	mov	r0, r3
 8003446:	3710      	adds	r7, #16
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}

0800344c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b084      	sub	sp, #16
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	460b      	mov	r3, r1
 8003456:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003458:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800345c:	2b00      	cmp	r3, #0
 800345e:	da0f      	bge.n	8003480 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 020f 	and.w	r2, r3, #15
 8003466:	4613      	mov	r3, r2
 8003468:	00db      	lsls	r3, r3, #3
 800346a:	4413      	add	r3, r2
 800346c:	009b      	lsls	r3, r3, #2
 800346e:	3338      	adds	r3, #56	; 0x38
 8003470:	687a      	ldr	r2, [r7, #4]
 8003472:	4413      	add	r3, r2
 8003474:	3304      	adds	r3, #4
 8003476:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	705a      	strb	r2, [r3, #1]
 800347e:	e00f      	b.n	80034a0 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003480:	78fb      	ldrb	r3, [r7, #3]
 8003482:	f003 020f 	and.w	r2, r3, #15
 8003486:	4613      	mov	r3, r2
 8003488:	00db      	lsls	r3, r3, #3
 800348a:	4413      	add	r3, r2
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	4413      	add	r3, r2
 8003496:	3304      	adds	r3, #4
 8003498:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	2200      	movs	r2, #0
 800349e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80034a0:	78fb      	ldrb	r3, [r7, #3]
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	b2da      	uxtb	r2, r3
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d101      	bne.n	80034ba <HAL_PCD_EP_Close+0x6e>
 80034b6:	2302      	movs	r3, #2
 80034b8:	e00e      	b.n	80034d8 <HAL_PCD_EP_Close+0x8c>
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	2201      	movs	r2, #1
 80034be:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	68f9      	ldr	r1, [r7, #12]
 80034c8:	4618      	mov	r0, r3
 80034ca:	f001 fdc1 	bl	8005050 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80034d6:	2300      	movs	r3, #0
}
 80034d8:	4618      	mov	r0, r3
 80034da:	3710      	adds	r7, #16
 80034dc:	46bd      	mov	sp, r7
 80034de:	bd80      	pop	{r7, pc}

080034e0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b086      	sub	sp, #24
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	60f8      	str	r0, [r7, #12]
 80034e8:	607a      	str	r2, [r7, #4]
 80034ea:	603b      	str	r3, [r7, #0]
 80034ec:	460b      	mov	r3, r1
 80034ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034f0:	7afb      	ldrb	r3, [r7, #11]
 80034f2:	f003 020f 	and.w	r2, r3, #15
 80034f6:	4613      	mov	r3, r2
 80034f8:	00db      	lsls	r3, r3, #3
 80034fa:	4413      	add	r3, r2
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003502:	68fa      	ldr	r2, [r7, #12]
 8003504:	4413      	add	r3, r2
 8003506:	3304      	adds	r3, #4
 8003508:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800350a:	697b      	ldr	r3, [r7, #20]
 800350c:	687a      	ldr	r2, [r7, #4]
 800350e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003510:	697b      	ldr	r3, [r7, #20]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2200      	movs	r2, #0
 800351a:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	2200      	movs	r2, #0
 8003520:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003522:	7afb      	ldrb	r3, [r7, #11]
 8003524:	f003 030f 	and.w	r3, r3, #15
 8003528:	b2da      	uxtb	r2, r3
 800352a:	697b      	ldr	r3, [r7, #20]
 800352c:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	2b01      	cmp	r3, #1
 8003534:	d102      	bne.n	800353c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800353c:	7afb      	ldrb	r3, [r7, #11]
 800353e:	f003 030f 	and.w	r3, r3, #15
 8003542:	2b00      	cmp	r3, #0
 8003544:	d109      	bne.n	800355a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	6818      	ldr	r0, [r3, #0]
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	b2db      	uxtb	r3, r3
 8003550:	461a      	mov	r2, r3
 8003552:	6979      	ldr	r1, [r7, #20]
 8003554:	f002 f8a0 	bl	8005698 <USB_EP0StartXfer>
 8003558:	e008      	b.n	800356c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	6818      	ldr	r0, [r3, #0]
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	691b      	ldr	r3, [r3, #16]
 8003562:	b2db      	uxtb	r3, r3
 8003564:	461a      	mov	r2, r3
 8003566:	6979      	ldr	r1, [r7, #20]
 8003568:	f001 fe4e 	bl	8005208 <USB_EPStartXfer>
  }

  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3718      	adds	r7, #24
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}

08003576 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003576:	b480      	push	{r7}
 8003578:	b083      	sub	sp, #12
 800357a:	af00      	add	r7, sp, #0
 800357c:	6078      	str	r0, [r7, #4]
 800357e:	460b      	mov	r3, r1
 8003580:	70fb      	strb	r3, [r7, #3]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 8003582:	78fb      	ldrb	r3, [r7, #3]
 8003584:	f003 020f 	and.w	r2, r3, #15
 8003588:	6879      	ldr	r1, [r7, #4]
 800358a:	4613      	mov	r3, r2
 800358c:	00db      	lsls	r3, r3, #3
 800358e:	4413      	add	r3, r2
 8003590:	009b      	lsls	r3, r3, #2
 8003592:	440b      	add	r3, r1
 8003594:	f503 7327 	add.w	r3, r3, #668	; 0x29c
 8003598:	681b      	ldr	r3, [r3, #0]
}
 800359a:	4618      	mov	r0, r3
 800359c:	370c      	adds	r7, #12
 800359e:	46bd      	mov	sp, r7
 80035a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a4:	4770      	bx	lr

080035a6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035a6:	b580      	push	{r7, lr}
 80035a8:	b086      	sub	sp, #24
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	60f8      	str	r0, [r7, #12]
 80035ae:	607a      	str	r2, [r7, #4]
 80035b0:	603b      	str	r3, [r7, #0]
 80035b2:	460b      	mov	r3, r1
 80035b4:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80035b6:	7afb      	ldrb	r3, [r7, #11]
 80035b8:	f003 020f 	and.w	r2, r3, #15
 80035bc:	4613      	mov	r3, r2
 80035be:	00db      	lsls	r3, r3, #3
 80035c0:	4413      	add	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	3338      	adds	r3, #56	; 0x38
 80035c6:	68fa      	ldr	r2, [r7, #12]
 80035c8:	4413      	add	r3, r2
 80035ca:	3304      	adds	r3, #4
 80035cc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	687a      	ldr	r2, [r7, #4]
 80035d2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80035d4:	697b      	ldr	r3, [r7, #20]
 80035d6:	683a      	ldr	r2, [r7, #0]
 80035d8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2200      	movs	r2, #0
 80035de:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	2201      	movs	r2, #1
 80035e4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035e6:	7afb      	ldrb	r3, [r7, #11]
 80035e8:	f003 030f 	and.w	r3, r3, #15
 80035ec:	b2da      	uxtb	r2, r3
 80035ee:	697b      	ldr	r3, [r7, #20]
 80035f0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	691b      	ldr	r3, [r3, #16]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d102      	bne.n	8003600 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035fa:	687a      	ldr	r2, [r7, #4]
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003600:	7afb      	ldrb	r3, [r7, #11]
 8003602:	f003 030f 	and.w	r3, r3, #15
 8003606:	2b00      	cmp	r3, #0
 8003608:	d109      	bne.n	800361e <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	6818      	ldr	r0, [r3, #0]
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	b2db      	uxtb	r3, r3
 8003614:	461a      	mov	r2, r3
 8003616:	6979      	ldr	r1, [r7, #20]
 8003618:	f002 f83e 	bl	8005698 <USB_EP0StartXfer>
 800361c:	e008      	b.n	8003630 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	6818      	ldr	r0, [r3, #0]
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	691b      	ldr	r3, [r3, #16]
 8003626:	b2db      	uxtb	r3, r3
 8003628:	461a      	mov	r2, r3
 800362a:	6979      	ldr	r1, [r7, #20]
 800362c:	f001 fdec 	bl	8005208 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}

0800363a <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800363a:	b580      	push	{r7, lr}
 800363c:	b084      	sub	sp, #16
 800363e:	af00      	add	r7, sp, #0
 8003640:	6078      	str	r0, [r7, #4]
 8003642:	460b      	mov	r3, r1
 8003644:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003646:	78fb      	ldrb	r3, [r7, #3]
 8003648:	f003 020f 	and.w	r2, r3, #15
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	685b      	ldr	r3, [r3, #4]
 8003650:	429a      	cmp	r2, r3
 8003652:	d901      	bls.n	8003658 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003654:	2301      	movs	r3, #1
 8003656:	e050      	b.n	80036fa <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003658:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800365c:	2b00      	cmp	r3, #0
 800365e:	da0f      	bge.n	8003680 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003660:	78fb      	ldrb	r3, [r7, #3]
 8003662:	f003 020f 	and.w	r2, r3, #15
 8003666:	4613      	mov	r3, r2
 8003668:	00db      	lsls	r3, r3, #3
 800366a:	4413      	add	r3, r2
 800366c:	009b      	lsls	r3, r3, #2
 800366e:	3338      	adds	r3, #56	; 0x38
 8003670:	687a      	ldr	r2, [r7, #4]
 8003672:	4413      	add	r3, r2
 8003674:	3304      	adds	r3, #4
 8003676:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2201      	movs	r2, #1
 800367c:	705a      	strb	r2, [r3, #1]
 800367e:	e00d      	b.n	800369c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003680:	78fa      	ldrb	r2, [r7, #3]
 8003682:	4613      	mov	r3, r2
 8003684:	00db      	lsls	r3, r3, #3
 8003686:	4413      	add	r3, r2
 8003688:	009b      	lsls	r3, r3, #2
 800368a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800368e:	687a      	ldr	r2, [r7, #4]
 8003690:	4413      	add	r3, r2
 8003692:	3304      	adds	r3, #4
 8003694:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	2200      	movs	r2, #0
 800369a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	2201      	movs	r2, #1
 80036a0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036a2:	78fb      	ldrb	r3, [r7, #3]
 80036a4:	f003 030f 	and.w	r3, r3, #15
 80036a8:	b2da      	uxtb	r2, r3
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d101      	bne.n	80036bc <HAL_PCD_EP_SetStall+0x82>
 80036b8:	2302      	movs	r3, #2
 80036ba:	e01e      	b.n	80036fa <HAL_PCD_EP_SetStall+0xc0>
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2201      	movs	r2, #1
 80036c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	68f9      	ldr	r1, [r7, #12]
 80036ca:	4618      	mov	r0, r3
 80036cc:	f002 fa7c 	bl	8005bc8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036d0:	78fb      	ldrb	r3, [r7, #3]
 80036d2:	f003 030f 	and.w	r3, r3, #15
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d10a      	bne.n	80036f0 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	6818      	ldr	r0, [r3, #0]
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	b2d9      	uxtb	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80036ea:	461a      	mov	r2, r3
 80036ec:	f002 fc6c 	bl	8005fc8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3710      	adds	r7, #16
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}

08003702 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003702:	b580      	push	{r7, lr}
 8003704:	b084      	sub	sp, #16
 8003706:	af00      	add	r7, sp, #0
 8003708:	6078      	str	r0, [r7, #4]
 800370a:	460b      	mov	r3, r1
 800370c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800370e:	78fb      	ldrb	r3, [r7, #3]
 8003710:	f003 020f 	and.w	r2, r3, #15
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	429a      	cmp	r2, r3
 800371a:	d901      	bls.n	8003720 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800371c:	2301      	movs	r3, #1
 800371e:	e042      	b.n	80037a6 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003720:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003724:	2b00      	cmp	r3, #0
 8003726:	da0f      	bge.n	8003748 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003728:	78fb      	ldrb	r3, [r7, #3]
 800372a:	f003 020f 	and.w	r2, r3, #15
 800372e:	4613      	mov	r3, r2
 8003730:	00db      	lsls	r3, r3, #3
 8003732:	4413      	add	r3, r2
 8003734:	009b      	lsls	r3, r3, #2
 8003736:	3338      	adds	r3, #56	; 0x38
 8003738:	687a      	ldr	r2, [r7, #4]
 800373a:	4413      	add	r3, r2
 800373c:	3304      	adds	r3, #4
 800373e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2201      	movs	r2, #1
 8003744:	705a      	strb	r2, [r3, #1]
 8003746:	e00f      	b.n	8003768 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003748:	78fb      	ldrb	r3, [r7, #3]
 800374a:	f003 020f 	and.w	r2, r3, #15
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2200      	movs	r2, #0
 800376c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_PCD_EP_ClrStall+0x86>
 8003784:	2302      	movs	r3, #2
 8003786:	e00e      	b.n	80037a6 <HAL_PCD_EP_ClrStall+0xa4>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4618      	mov	r0, r3
 8003798:	f002 fa84 	bl	8005ca4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2200      	movs	r2, #0
 80037a0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3710      	adds	r7, #16
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b084      	sub	sp, #16
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	6078      	str	r0, [r7, #4]
 80037b6:	460b      	mov	r3, r1
 80037b8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80037ba:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	da0c      	bge.n	80037dc <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037c2:	78fb      	ldrb	r3, [r7, #3]
 80037c4:	f003 020f 	and.w	r2, r3, #15
 80037c8:	4613      	mov	r3, r2
 80037ca:	00db      	lsls	r3, r3, #3
 80037cc:	4413      	add	r3, r2
 80037ce:	009b      	lsls	r3, r3, #2
 80037d0:	3338      	adds	r3, #56	; 0x38
 80037d2:	687a      	ldr	r2, [r7, #4]
 80037d4:	4413      	add	r3, r2
 80037d6:	3304      	adds	r3, #4
 80037d8:	60fb      	str	r3, [r7, #12]
 80037da:	e00c      	b.n	80037f6 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037dc:	78fb      	ldrb	r3, [r7, #3]
 80037de:	f003 020f 	and.w	r2, r3, #15
 80037e2:	4613      	mov	r3, r2
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	4413      	add	r3, r2
 80037e8:	009b      	lsls	r3, r3, #2
 80037ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ee:	687a      	ldr	r2, [r7, #4]
 80037f0:	4413      	add	r3, r2
 80037f2:	3304      	adds	r3, #4
 80037f4:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68f9      	ldr	r1, [r7, #12]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f002 f8a3 	bl	8005948 <USB_EPStopXfer>
 8003802:	4603      	mov	r3, r0
 8003804:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003806:	7afb      	ldrb	r3, [r7, #11]
}
 8003808:	4618      	mov	r0, r3
 800380a:	3710      	adds	r7, #16
 800380c:	46bd      	mov	sp, r7
 800380e:	bd80      	pop	{r7, pc}

08003810 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b08a      	sub	sp, #40	; 0x28
 8003814:	af02      	add	r7, sp, #8
 8003816:	6078      	str	r0, [r7, #4]
 8003818:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003824:	683a      	ldr	r2, [r7, #0]
 8003826:	4613      	mov	r3, r2
 8003828:	00db      	lsls	r3, r3, #3
 800382a:	4413      	add	r3, r2
 800382c:	009b      	lsls	r3, r3, #2
 800382e:	3338      	adds	r3, #56	; 0x38
 8003830:	687a      	ldr	r2, [r7, #4]
 8003832:	4413      	add	r3, r2
 8003834:	3304      	adds	r3, #4
 8003836:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	6a1a      	ldr	r2, [r3, #32]
 800383c:	68fb      	ldr	r3, [r7, #12]
 800383e:	699b      	ldr	r3, [r3, #24]
 8003840:	429a      	cmp	r2, r3
 8003842:	d901      	bls.n	8003848 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e06c      	b.n	8003922 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	699a      	ldr	r2, [r3, #24]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a1b      	ldr	r3, [r3, #32]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	68db      	ldr	r3, [r3, #12]
 8003858:	69fa      	ldr	r2, [r7, #28]
 800385a:	429a      	cmp	r2, r3
 800385c:	d902      	bls.n	8003864 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	68db      	ldr	r3, [r3, #12]
 8003862:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003864:	69fb      	ldr	r3, [r7, #28]
 8003866:	3303      	adds	r3, #3
 8003868:	089b      	lsrs	r3, r3, #2
 800386a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800386c:	e02b      	b.n	80038c6 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	699a      	ldr	r2, [r3, #24]
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	6a1b      	ldr	r3, [r3, #32]
 8003876:	1ad3      	subs	r3, r2, r3
 8003878:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	68db      	ldr	r3, [r3, #12]
 800387e:	69fa      	ldr	r2, [r7, #28]
 8003880:	429a      	cmp	r2, r3
 8003882:	d902      	bls.n	800388a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	68db      	ldr	r3, [r3, #12]
 8003888:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800388a:	69fb      	ldr	r3, [r7, #28]
 800388c:	3303      	adds	r3, #3
 800388e:	089b      	lsrs	r3, r3, #2
 8003890:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6919      	ldr	r1, [r3, #16]
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	b2da      	uxtb	r2, r3
 800389a:	69fb      	ldr	r3, [r7, #28]
 800389c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80038a2:	b2db      	uxtb	r3, r3
 80038a4:	9300      	str	r3, [sp, #0]
 80038a6:	4603      	mov	r3, r0
 80038a8:	6978      	ldr	r0, [r7, #20]
 80038aa:	f002 f8f7 	bl	8005a9c <USB_WritePacket>

    ep->xfer_buff  += len;
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	691a      	ldr	r2, [r3, #16]
 80038b2:	69fb      	ldr	r3, [r7, #28]
 80038b4:	441a      	add	r2, r3
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	6a1a      	ldr	r2, [r3, #32]
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	441a      	add	r2, r3
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	015a      	lsls	r2, r3, #5
 80038ca:	693b      	ldr	r3, [r7, #16]
 80038cc:	4413      	add	r3, r2
 80038ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	69ba      	ldr	r2, [r7, #24]
 80038d8:	429a      	cmp	r2, r3
 80038da:	d809      	bhi.n	80038f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	6a1a      	ldr	r2, [r3, #32]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e4:	429a      	cmp	r2, r3
 80038e6:	d203      	bcs.n	80038f0 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	699b      	ldr	r3, [r3, #24]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d1be      	bne.n	800386e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	699a      	ldr	r2, [r3, #24]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a1b      	ldr	r3, [r3, #32]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d811      	bhi.n	8003920 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80038fc:	683b      	ldr	r3, [r7, #0]
 80038fe:	f003 030f 	and.w	r3, r3, #15
 8003902:	2201      	movs	r2, #1
 8003904:	fa02 f303 	lsl.w	r3, r2, r3
 8003908:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003910:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003912:	68bb      	ldr	r3, [r7, #8]
 8003914:	43db      	mvns	r3, r3
 8003916:	6939      	ldr	r1, [r7, #16]
 8003918:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800391c:	4013      	ands	r3, r2
 800391e:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003920:	2300      	movs	r3, #0
}
 8003922:	4618      	mov	r0, r3
 8003924:	3720      	adds	r7, #32
 8003926:	46bd      	mov	sp, r7
 8003928:	bd80      	pop	{r7, pc}
	...

0800392c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800392c:	b580      	push	{r7, lr}
 800392e:	b088      	sub	sp, #32
 8003930:	af00      	add	r7, sp, #0
 8003932:	6078      	str	r0, [r7, #4]
 8003934:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800393c:	69fb      	ldr	r3, [r7, #28]
 800393e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003940:	69fb      	ldr	r3, [r7, #28]
 8003942:	333c      	adds	r3, #60	; 0x3c
 8003944:	3304      	adds	r3, #4
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	015a      	lsls	r2, r3, #5
 800394e:	69bb      	ldr	r3, [r7, #24]
 8003950:	4413      	add	r3, r2
 8003952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003956:	689b      	ldr	r3, [r3, #8]
 8003958:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	691b      	ldr	r3, [r3, #16]
 800395e:	2b01      	cmp	r3, #1
 8003960:	d17b      	bne.n	8003a5a <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003962:	693b      	ldr	r3, [r7, #16]
 8003964:	f003 0308 	and.w	r3, r3, #8
 8003968:	2b00      	cmp	r3, #0
 800396a:	d015      	beq.n	8003998 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800396c:	697b      	ldr	r3, [r7, #20]
 800396e:	4a61      	ldr	r2, [pc, #388]	; (8003af4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003970:	4293      	cmp	r3, r2
 8003972:	f240 80b9 	bls.w	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800397c:	2b00      	cmp	r3, #0
 800397e:	f000 80b3 	beq.w	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	015a      	lsls	r2, r3, #5
 8003986:	69bb      	ldr	r3, [r7, #24]
 8003988:	4413      	add	r3, r2
 800398a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800398e:	461a      	mov	r2, r3
 8003990:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003994:	6093      	str	r3, [r2, #8]
 8003996:	e0a7      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003998:	693b      	ldr	r3, [r7, #16]
 800399a:	f003 0320 	and.w	r3, r3, #32
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d009      	beq.n	80039b6 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	015a      	lsls	r2, r3, #5
 80039a6:	69bb      	ldr	r3, [r7, #24]
 80039a8:	4413      	add	r3, r2
 80039aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ae:	461a      	mov	r2, r3
 80039b0:	2320      	movs	r3, #32
 80039b2:	6093      	str	r3, [r2, #8]
 80039b4:	e098      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80039b6:	693b      	ldr	r3, [r7, #16]
 80039b8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039bc:	2b00      	cmp	r3, #0
 80039be:	f040 8093 	bne.w	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	4a4b      	ldr	r2, [pc, #300]	; (8003af4 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039c6:	4293      	cmp	r3, r2
 80039c8:	d90f      	bls.n	80039ea <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ca:	693b      	ldr	r3, [r7, #16]
 80039cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	015a      	lsls	r2, r3, #5
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	4413      	add	r3, r2
 80039dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039e0:	461a      	mov	r2, r3
 80039e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039e6:	6093      	str	r3, [r2, #8]
 80039e8:	e07e      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	4613      	mov	r3, r2
 80039ee:	00db      	lsls	r3, r3, #3
 80039f0:	4413      	add	r3, r2
 80039f2:	009b      	lsls	r3, r3, #2
 80039f4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80039f8:	687a      	ldr	r2, [r7, #4]
 80039fa:	4413      	add	r3, r2
 80039fc:	3304      	adds	r3, #4
 80039fe:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	69da      	ldr	r2, [r3, #28]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	0159      	lsls	r1, r3, #5
 8003a08:	69bb      	ldr	r3, [r7, #24]
 8003a0a:	440b      	add	r3, r1
 8003a0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a10:	691b      	ldr	r3, [r3, #16]
 8003a12:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a16:	1ad2      	subs	r2, r2, r3
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d114      	bne.n	8003a4c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d109      	bne.n	8003a3e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	6818      	ldr	r0, [r3, #0]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003a34:	461a      	mov	r2, r3
 8003a36:	2101      	movs	r1, #1
 8003a38:	f002 fac6 	bl	8005fc8 <USB_EP0_OutStart>
 8003a3c:	e006      	b.n	8003a4c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	691a      	ldr	r2, [r3, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	6a1b      	ldr	r3, [r3, #32]
 8003a46:	441a      	add	r2, r3
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	b2db      	uxtb	r3, r3
 8003a50:	4619      	mov	r1, r3
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7fe f85b 	bl	8001b0e <HAL_PCD_DataOutStageCallback>
 8003a58:	e046      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003a5a:	697b      	ldr	r3, [r7, #20]
 8003a5c:	4a26      	ldr	r2, [pc, #152]	; (8003af8 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003a5e:	4293      	cmp	r3, r2
 8003a60:	d124      	bne.n	8003aac <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d00a      	beq.n	8003a82 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a6c:	683b      	ldr	r3, [r7, #0]
 8003a6e:	015a      	lsls	r2, r3, #5
 8003a70:	69bb      	ldr	r3, [r7, #24]
 8003a72:	4413      	add	r3, r2
 8003a74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a78:	461a      	mov	r2, r3
 8003a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	e032      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0320 	and.w	r3, r3, #32
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d008      	beq.n	8003a9e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a8c:	683b      	ldr	r3, [r7, #0]
 8003a8e:	015a      	lsls	r2, r3, #5
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	4413      	add	r3, r2
 8003a94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a98:	461a      	mov	r2, r3
 8003a9a:	2320      	movs	r3, #32
 8003a9c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003a9e:	683b      	ldr	r3, [r7, #0]
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	4619      	mov	r1, r3
 8003aa4:	6878      	ldr	r0, [r7, #4]
 8003aa6:	f7fe f832 	bl	8001b0e <HAL_PCD_DataOutStageCallback>
 8003aaa:	e01d      	b.n	8003ae8 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d114      	bne.n	8003adc <PCD_EP_OutXfrComplete_int+0x1b0>
 8003ab2:	6879      	ldr	r1, [r7, #4]
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	4613      	mov	r3, r2
 8003ab8:	00db      	lsls	r3, r3, #3
 8003aba:	4413      	add	r3, r2
 8003abc:	009b      	lsls	r3, r3, #2
 8003abe:	440b      	add	r3, r1
 8003ac0:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	d108      	bne.n	8003adc <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	6818      	ldr	r0, [r3, #0]
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ad4:	461a      	mov	r2, r3
 8003ad6:	2100      	movs	r1, #0
 8003ad8:	f002 fa76 	bl	8005fc8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	b2db      	uxtb	r3, r3
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f7fe f813 	bl	8001b0e <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003ae8:	2300      	movs	r3, #0
}
 8003aea:	4618      	mov	r0, r3
 8003aec:	3720      	adds	r7, #32
 8003aee:	46bd      	mov	sp, r7
 8003af0:	bd80      	pop	{r7, pc}
 8003af2:	bf00      	nop
 8003af4:	4f54300a 	.word	0x4f54300a
 8003af8:	4f54310a 	.word	0x4f54310a

08003afc <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b086      	sub	sp, #24
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b0c:	697b      	ldr	r3, [r7, #20]
 8003b0e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b10:	697b      	ldr	r3, [r7, #20]
 8003b12:	333c      	adds	r3, #60	; 0x3c
 8003b14:	3304      	adds	r3, #4
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	015a      	lsls	r2, r3, #5
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	4413      	add	r3, r2
 8003b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b26:	689b      	ldr	r3, [r3, #8]
 8003b28:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	4a15      	ldr	r2, [pc, #84]	; (8003b84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d90e      	bls.n	8003b50 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d009      	beq.n	8003b50 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	015a      	lsls	r2, r3, #5
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	4413      	add	r3, r2
 8003b44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b48:	461a      	mov	r2, r3
 8003b4a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003b50:	6878      	ldr	r0, [r7, #4]
 8003b52:	f7fd ffca 	bl	8001aea <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	4a0a      	ldr	r2, [pc, #40]	; (8003b84 <PCD_EP_OutSetupPacket_int+0x88>)
 8003b5a:	4293      	cmp	r3, r2
 8003b5c:	d90c      	bls.n	8003b78 <PCD_EP_OutSetupPacket_int+0x7c>
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	691b      	ldr	r3, [r3, #16]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d108      	bne.n	8003b78 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6818      	ldr	r0, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b70:	461a      	mov	r2, r3
 8003b72:	2101      	movs	r1, #1
 8003b74:	f002 fa28 	bl	8005fc8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3718      	adds	r7, #24
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	bd80      	pop	{r7, pc}
 8003b82:	bf00      	nop
 8003b84:	4f54300a 	.word	0x4f54300a

08003b88 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	70fb      	strb	r3, [r7, #3]
 8003b94:	4613      	mov	r3, r2
 8003b96:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003ba0:	78fb      	ldrb	r3, [r7, #3]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d107      	bne.n	8003bb6 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003ba6:	883b      	ldrh	r3, [r7, #0]
 8003ba8:	0419      	lsls	r1, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68ba      	ldr	r2, [r7, #8]
 8003bb0:	430a      	orrs	r2, r1
 8003bb2:	629a      	str	r2, [r3, #40]	; 0x28
 8003bb4:	e028      	b.n	8003c08 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bbc:	0c1b      	lsrs	r3, r3, #16
 8003bbe:	68ba      	ldr	r2, [r7, #8]
 8003bc0:	4413      	add	r3, r2
 8003bc2:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	73fb      	strb	r3, [r7, #15]
 8003bc8:	e00d      	b.n	8003be6 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681a      	ldr	r2, [r3, #0]
 8003bce:	7bfb      	ldrb	r3, [r7, #15]
 8003bd0:	3340      	adds	r3, #64	; 0x40
 8003bd2:	009b      	lsls	r3, r3, #2
 8003bd4:	4413      	add	r3, r2
 8003bd6:	685b      	ldr	r3, [r3, #4]
 8003bd8:	0c1b      	lsrs	r3, r3, #16
 8003bda:	68ba      	ldr	r2, [r7, #8]
 8003bdc:	4413      	add	r3, r2
 8003bde:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003be0:	7bfb      	ldrb	r3, [r7, #15]
 8003be2:	3301      	adds	r3, #1
 8003be4:	73fb      	strb	r3, [r7, #15]
 8003be6:	7bfa      	ldrb	r2, [r7, #15]
 8003be8:	78fb      	ldrb	r3, [r7, #3]
 8003bea:	3b01      	subs	r3, #1
 8003bec:	429a      	cmp	r2, r3
 8003bee:	d3ec      	bcc.n	8003bca <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003bf0:	883b      	ldrh	r3, [r7, #0]
 8003bf2:	0418      	lsls	r0, r3, #16
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6819      	ldr	r1, [r3, #0]
 8003bf8:	78fb      	ldrb	r3, [r7, #3]
 8003bfa:	3b01      	subs	r3, #1
 8003bfc:	68ba      	ldr	r2, [r7, #8]
 8003bfe:	4302      	orrs	r2, r0
 8003c00:	3340      	adds	r3, #64	; 0x40
 8003c02:	009b      	lsls	r3, r3, #2
 8003c04:	440b      	add	r3, r1
 8003c06:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3714      	adds	r7, #20
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c14:	4770      	bx	lr

08003c16 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c16:	b480      	push	{r7}
 8003c18:	b083      	sub	sp, #12
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
 8003c1e:	460b      	mov	r3, r1
 8003c20:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	887a      	ldrh	r2, [r7, #2]
 8003c28:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c2a:	2300      	movs	r3, #0
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	370c      	adds	r7, #12
 8003c30:	46bd      	mov	sp, r7
 8003c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c36:	4770      	bx	lr

08003c38 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	2201      	movs	r2, #1
 8003c4a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	2200      	movs	r2, #0
 8003c52:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	699b      	ldr	r3, [r3, #24]
 8003c5a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c6a:	f043 0303 	orr.w	r3, r3, #3
 8003c6e:	68fa      	ldr	r2, [r7, #12]
 8003c70:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
 8003c88:	460b      	mov	r3, r1
 8003c8a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003c8c:	bf00      	nop
 8003c8e:	370c      	adds	r7, #12
 8003c90:	46bd      	mov	sp, r7
 8003c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c96:	4770      	bx	lr

08003c98 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c98:	b480      	push	{r7}
 8003c9a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003c9c:	4b03      	ldr	r3, [pc, #12]	; (8003cac <HAL_RCC_GetHCLKFreq+0x14>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca8:	4770      	bx	lr
 8003caa:	bf00      	nop
 8003cac:	20000000 	.word	0x20000000

08003cb0 <LL_GPIO_SetPinMode>:
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b089      	sub	sp, #36	; 0x24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->MODER, (GPIO_MODER_MODER0 << (POSITION_VAL(Pin) * 2U)), (Mode << (POSITION_VAL(Pin) * 2U)));
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681a      	ldr	r2, [r3, #0]
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	617b      	str	r3, [r7, #20]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	fa93 f3a3 	rbit	r3, r3
 8003cca:	613b      	str	r3, [r7, #16]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ccc:	693b      	ldr	r3, [r7, #16]
 8003cce:	fab3 f383 	clz	r3, r3
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	005b      	lsls	r3, r3, #1
 8003cd6:	2103      	movs	r1, #3
 8003cd8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cdc:	43db      	mvns	r3, r3
 8003cde:	401a      	ands	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	fa93 f3a3 	rbit	r3, r3
 8003cea:	61bb      	str	r3, [r7, #24]
  return result;
 8003cec:	69bb      	ldr	r3, [r7, #24]
 8003cee:	fab3 f383 	clz	r3, r3
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	005b      	lsls	r3, r3, #1
 8003cf6:	6879      	ldr	r1, [r7, #4]
 8003cf8:	fa01 f303 	lsl.w	r3, r1, r3
 8003cfc:	431a      	orrs	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	601a      	str	r2, [r3, #0]
}
 8003d02:	bf00      	nop
 8003d04:	3724      	adds	r7, #36	; 0x24
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr

08003d0e <LL_GPIO_SetPinOutputType>:
{
 8003d0e:	b480      	push	{r7}
 8003d10:	b085      	sub	sp, #20
 8003d12:	af00      	add	r7, sp, #0
 8003d14:	60f8      	str	r0, [r7, #12]
 8003d16:	60b9      	str	r1, [r7, #8]
 8003d18:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OTYPER, PinMask, (PinMask * OutputType));
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	68bb      	ldr	r3, [r7, #8]
 8003d20:	43db      	mvns	r3, r3
 8003d22:	401a      	ands	r2, r3
 8003d24:	68bb      	ldr	r3, [r7, #8]
 8003d26:	6879      	ldr	r1, [r7, #4]
 8003d28:	fb01 f303 	mul.w	r3, r1, r3
 8003d2c:	431a      	orrs	r2, r3
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	605a      	str	r2, [r3, #4]
}
 8003d32:	bf00      	nop
 8003d34:	3714      	adds	r7, #20
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <LL_GPIO_SetPinSpeed>:
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b089      	sub	sp, #36	; 0x24
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	60f8      	str	r0, [r7, #12]
 8003d46:	60b9      	str	r1, [r7, #8]
 8003d48:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->OSPEEDR, (GPIO_OSPEEDER_OSPEEDR0 << (POSITION_VAL(Pin) * 2U)),
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	689a      	ldr	r2, [r3, #8]
 8003d4e:	68bb      	ldr	r3, [r7, #8]
 8003d50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	697b      	ldr	r3, [r7, #20]
 8003d54:	fa93 f3a3 	rbit	r3, r3
 8003d58:	613b      	str	r3, [r7, #16]
  return result;
 8003d5a:	693b      	ldr	r3, [r7, #16]
 8003d5c:	fab3 f383 	clz	r3, r3
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	005b      	lsls	r3, r3, #1
 8003d64:	2103      	movs	r1, #3
 8003d66:	fa01 f303 	lsl.w	r3, r1, r3
 8003d6a:	43db      	mvns	r3, r3
 8003d6c:	401a      	ands	r2, r3
 8003d6e:	68bb      	ldr	r3, [r7, #8]
 8003d70:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d72:	69fb      	ldr	r3, [r7, #28]
 8003d74:	fa93 f3a3 	rbit	r3, r3
 8003d78:	61bb      	str	r3, [r7, #24]
  return result;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	fab3 f383 	clz	r3, r3
 8003d80:	b2db      	uxtb	r3, r3
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	6879      	ldr	r1, [r7, #4]
 8003d86:	fa01 f303 	lsl.w	r3, r1, r3
 8003d8a:	431a      	orrs	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	609a      	str	r2, [r3, #8]
}
 8003d90:	bf00      	nop
 8003d92:	3724      	adds	r7, #36	; 0x24
 8003d94:	46bd      	mov	sp, r7
 8003d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9a:	4770      	bx	lr

08003d9c <LL_GPIO_SetPinPull>:
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b089      	sub	sp, #36	; 0x24
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	60f8      	str	r0, [r7, #12]
 8003da4:	60b9      	str	r1, [r7, #8]
 8003da6:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->PUPDR, (GPIO_PUPDR_PUPDR0 << (POSITION_VAL(Pin) * 2U)), (Pull << (POSITION_VAL(Pin) * 2U)));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	68da      	ldr	r2, [r3, #12]
 8003dac:	68bb      	ldr	r3, [r7, #8]
 8003dae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003db0:	697b      	ldr	r3, [r7, #20]
 8003db2:	fa93 f3a3 	rbit	r3, r3
 8003db6:	613b      	str	r3, [r7, #16]
  return result;
 8003db8:	693b      	ldr	r3, [r7, #16]
 8003dba:	fab3 f383 	clz	r3, r3
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	005b      	lsls	r3, r3, #1
 8003dc2:	2103      	movs	r1, #3
 8003dc4:	fa01 f303 	lsl.w	r3, r1, r3
 8003dc8:	43db      	mvns	r3, r3
 8003dca:	401a      	ands	r2, r3
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dd0:	69fb      	ldr	r3, [r7, #28]
 8003dd2:	fa93 f3a3 	rbit	r3, r3
 8003dd6:	61bb      	str	r3, [r7, #24]
  return result;
 8003dd8:	69bb      	ldr	r3, [r7, #24]
 8003dda:	fab3 f383 	clz	r3, r3
 8003dde:	b2db      	uxtb	r3, r3
 8003de0:	005b      	lsls	r3, r3, #1
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	60da      	str	r2, [r3, #12]
}
 8003dee:	bf00      	nop
 8003df0:	3724      	adds	r7, #36	; 0x24
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <LL_GPIO_SetAFPin_0_7>:
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	b089      	sub	sp, #36	; 0x24
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	60f8      	str	r0, [r7, #12]
 8003e02:	60b9      	str	r1, [r7, #8]
 8003e04:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[0], (GPIO_AFRL_AFSEL0 << (POSITION_VAL(Pin) * 4U)),
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a1a      	ldr	r2, [r3, #32]
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e0e:	697b      	ldr	r3, [r7, #20]
 8003e10:	fa93 f3a3 	rbit	r3, r3
 8003e14:	613b      	str	r3, [r7, #16]
  return result;
 8003e16:	693b      	ldr	r3, [r7, #16]
 8003e18:	fab3 f383 	clz	r3, r3
 8003e1c:	b2db      	uxtb	r3, r3
 8003e1e:	009b      	lsls	r3, r3, #2
 8003e20:	210f      	movs	r1, #15
 8003e22:	fa01 f303 	lsl.w	r3, r1, r3
 8003e26:	43db      	mvns	r3, r3
 8003e28:	401a      	ands	r2, r3
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	fa93 f3a3 	rbit	r3, r3
 8003e34:	61bb      	str	r3, [r7, #24]
  return result;
 8003e36:	69bb      	ldr	r3, [r7, #24]
 8003e38:	fab3 f383 	clz	r3, r3
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	009b      	lsls	r3, r3, #2
 8003e40:	6879      	ldr	r1, [r7, #4]
 8003e42:	fa01 f303 	lsl.w	r3, r1, r3
 8003e46:	431a      	orrs	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	621a      	str	r2, [r3, #32]
}
 8003e4c:	bf00      	nop
 8003e4e:	3724      	adds	r7, #36	; 0x24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr

08003e58 <LL_GPIO_SetAFPin_8_15>:
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b089      	sub	sp, #36	; 0x24
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	60f8      	str	r0, [r7, #12]
 8003e60:	60b9      	str	r1, [r7, #8]
 8003e62:	607a      	str	r2, [r7, #4]
  MODIFY_REG(GPIOx->AFR[1], (GPIO_AFRH_AFSEL8 << (POSITION_VAL(Pin >> 8U) * 4U)),
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	0a1b      	lsrs	r3, r3, #8
 8003e6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e6e:	697b      	ldr	r3, [r7, #20]
 8003e70:	fa93 f3a3 	rbit	r3, r3
 8003e74:	613b      	str	r3, [r7, #16]
  return result;
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	fab3 f383 	clz	r3, r3
 8003e7c:	b2db      	uxtb	r3, r3
 8003e7e:	009b      	lsls	r3, r3, #2
 8003e80:	210f      	movs	r1, #15
 8003e82:	fa01 f303 	lsl.w	r3, r1, r3
 8003e86:	43db      	mvns	r3, r3
 8003e88:	401a      	ands	r2, r3
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	0a1b      	lsrs	r3, r3, #8
 8003e8e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e90:	69fb      	ldr	r3, [r7, #28]
 8003e92:	fa93 f3a3 	rbit	r3, r3
 8003e96:	61bb      	str	r3, [r7, #24]
  return result;
 8003e98:	69bb      	ldr	r3, [r7, #24]
 8003e9a:	fab3 f383 	clz	r3, r3
 8003e9e:	b2db      	uxtb	r3, r3
 8003ea0:	009b      	lsls	r3, r3, #2
 8003ea2:	6879      	ldr	r1, [r7, #4]
 8003ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8003ea8:	431a      	orrs	r2, r3
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	625a      	str	r2, [r3, #36]	; 0x24
}
 8003eae:	bf00      	nop
 8003eb0:	3724      	adds	r7, #36	; 0x24
 8003eb2:	46bd      	mov	sp, r7
 8003eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb8:	4770      	bx	lr

08003eba <LL_GPIO_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: GPIO registers are initialized according to GPIO_InitStruct content
  *          - ERROR:   Not applicable
  */
ErrorStatus LL_GPIO_Init(GPIO_TypeDef *GPIOx, LL_GPIO_InitTypeDef *GPIO_InitStruct)
{
 8003eba:	b580      	push	{r7, lr}
 8003ebc:	b088      	sub	sp, #32
 8003ebe:	af00      	add	r7, sp, #0
 8003ec0:	6078      	str	r0, [r7, #4]
 8003ec2:	6039      	str	r1, [r7, #0]
  uint32_t pinpos     = 0x00000000U;
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	61fb      	str	r3, [r7, #28]
  uint32_t currentpin = 0x00000000U;
 8003ec8:	2300      	movs	r3, #0
 8003eca:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_GPIO_MODE(GPIO_InitStruct->Mode));
  assert_param(IS_LL_GPIO_PULL(GPIO_InitStruct->Pull));

  /* ------------------------- Configure the port pins ---------------- */
  /* Initialize  pinpos on first pin set */
  pinpos = POSITION_VAL(GPIO_InitStruct->Pin);
 8003ecc:	683b      	ldr	r3, [r7, #0]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ed2:	697b      	ldr	r3, [r7, #20]
 8003ed4:	fa93 f3a3 	rbit	r3, r3
 8003ed8:	613b      	str	r3, [r7, #16]
  return result;
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	fab3 f383 	clz	r3, r3
 8003ee0:	b2db      	uxtb	r3, r3
 8003ee2:	61fb      	str	r3, [r7, #28]
  
  /* Configure the port pins */
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003ee4:	e050      	b.n	8003f88 <LL_GPIO_Init+0xce>
  {
    /* Get current io position */
    currentpin = (GPIO_InitStruct->Pin) & (0x00000001U << pinpos);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	2101      	movs	r1, #1
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef2:	4013      	ands	r3, r2
 8003ef4:	61bb      	str	r3, [r7, #24]
    
    if (currentpin)
 8003ef6:	69bb      	ldr	r3, [r7, #24]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d042      	beq.n	8003f82 <LL_GPIO_Init+0xc8>
    {
      
      if ((GPIO_InitStruct->Mode == LL_GPIO_MODE_OUTPUT) || (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE))
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	685b      	ldr	r3, [r3, #4]
 8003f00:	2b01      	cmp	r3, #1
 8003f02:	d003      	beq.n	8003f0c <LL_GPIO_Init+0x52>
 8003f04:	683b      	ldr	r3, [r7, #0]
 8003f06:	685b      	ldr	r3, [r3, #4]
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d10d      	bne.n	8003f28 <LL_GPIO_Init+0x6e>
      {
        /* Check Speed mode parameters */
        assert_param(IS_LL_GPIO_SPEED(GPIO_InitStruct->Speed));
        
        /* Speed mode configuration */
        LL_GPIO_SetPinSpeed(GPIOx, currentpin, GPIO_InitStruct->Speed);
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	461a      	mov	r2, r3
 8003f12:	69b9      	ldr	r1, [r7, #24]
 8003f14:	6878      	ldr	r0, [r7, #4]
 8003f16:	f7ff ff12 	bl	8003d3e <LL_GPIO_SetPinSpeed>
        
        /* Check Output mode parameters */
        assert_param(IS_LL_GPIO_OUTPUT_TYPE(GPIO_InitStruct->OutputType));
        
        /* Output mode configuration*/
        LL_GPIO_SetPinOutputType(GPIOx, currentpin, GPIO_InitStruct->OutputType);
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	68db      	ldr	r3, [r3, #12]
 8003f1e:	461a      	mov	r2, r3
 8003f20:	69b9      	ldr	r1, [r7, #24]
 8003f22:	6878      	ldr	r0, [r7, #4]
 8003f24:	f7ff fef3 	bl	8003d0e <LL_GPIO_SetPinOutputType>
      }
      
      /* Pull-up Pull down resistor configuration*/
      LL_GPIO_SetPinPull(GPIOx, currentpin, GPIO_InitStruct->Pull);
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	691b      	ldr	r3, [r3, #16]
 8003f2c:	461a      	mov	r2, r3
 8003f2e:	69b9      	ldr	r1, [r7, #24]
 8003f30:	6878      	ldr	r0, [r7, #4]
 8003f32:	f7ff ff33 	bl	8003d9c <LL_GPIO_SetPinPull>
      
      if (GPIO_InitStruct->Mode == LL_GPIO_MODE_ALTERNATE)
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	2b02      	cmp	r3, #2
 8003f3c:	d11a      	bne.n	8003f74 <LL_GPIO_Init+0xba>
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	fa93 f3a3 	rbit	r3, r3
 8003f48:	60bb      	str	r3, [r7, #8]
  return result;
 8003f4a:	68bb      	ldr	r3, [r7, #8]
      {
        /* Check Alternate parameter */
        assert_param(IS_LL_GPIO_ALTERNATE(GPIO_InitStruct->Alternate));
        
        /* Speed mode configuration */
        if (POSITION_VAL(currentpin) < 0x00000008U)
 8003f4c:	fab3 f383 	clz	r3, r3
 8003f50:	b2db      	uxtb	r3, r3
 8003f52:	2b07      	cmp	r3, #7
 8003f54:	d807      	bhi.n	8003f66 <LL_GPIO_Init+0xac>
        {
          LL_GPIO_SetAFPin_0_7(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	69b9      	ldr	r1, [r7, #24]
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f7ff ff4b 	bl	8003dfa <LL_GPIO_SetAFPin_0_7>
 8003f64:	e006      	b.n	8003f74 <LL_GPIO_Init+0xba>
        }
        else
        {
          LL_GPIO_SetAFPin_8_15(GPIOx, currentpin, GPIO_InitStruct->Alternate);
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	695b      	ldr	r3, [r3, #20]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	69b9      	ldr	r1, [r7, #24]
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f7ff ff72 	bl	8003e58 <LL_GPIO_SetAFPin_8_15>
        }
      }
      
      /* Pin Mode configuration */
      LL_GPIO_SetPinMode(GPIOx, currentpin, GPIO_InitStruct->Mode);
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	461a      	mov	r2, r3
 8003f7a:	69b9      	ldr	r1, [r7, #24]
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff fe97 	bl	8003cb0 <LL_GPIO_SetPinMode>
    }
    pinpos++;
 8003f82:	69fb      	ldr	r3, [r7, #28]
 8003f84:	3301      	adds	r3, #1
 8003f86:	61fb      	str	r3, [r7, #28]
  while (((GPIO_InitStruct->Pin) >> pinpos) != 0x00000000U)
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	69fb      	ldr	r3, [r7, #28]
 8003f8e:	fa22 f303 	lsr.w	r3, r2, r3
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d1a7      	bne.n	8003ee6 <LL_GPIO_Init+0x2c>
  }

  return (SUCCESS);
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <LL_RCC_GetSysClkSource>:
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_SWS));
 8003fa4:	4b04      	ldr	r3, [pc, #16]	; (8003fb8 <LL_RCC_GetSysClkSource+0x18>)
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	f003 030c 	and.w	r3, r3, #12
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	40023800 	.word	0x40023800

08003fbc <LL_RCC_GetAHBPrescaler>:
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE));
 8003fc0:	4b04      	ldr	r3, [pc, #16]	; (8003fd4 <LL_RCC_GetAHBPrescaler+0x18>)
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
}
 8003fc8:	4618      	mov	r0, r3
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr
 8003fd2:	bf00      	nop
 8003fd4:	40023800 	.word	0x40023800

08003fd8 <LL_RCC_GetAPB1Prescaler>:
{
 8003fd8:	b480      	push	{r7}
 8003fda:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1));
 8003fdc:	4b04      	ldr	r3, [pc, #16]	; (8003ff0 <LL_RCC_GetAPB1Prescaler+0x18>)
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fec:	4770      	bx	lr
 8003fee:	bf00      	nop
 8003ff0:	40023800 	.word	0x40023800

08003ff4 <LL_RCC_GetAPB2Prescaler>:
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2));
 8003ff8:	4b04      	ldr	r3, [pc, #16]	; (800400c <LL_RCC_GetAPB2Prescaler+0x18>)
 8003ffa:	689b      	ldr	r3, [r3, #8]
 8003ffc:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8004000:	4618      	mov	r0, r3
 8004002:	46bd      	mov	sp, r7
 8004004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004008:	4770      	bx	lr
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800

08004010 <LL_RCC_PLL_GetMainSource>:
  * @retval Returned value can be one of the following values:
  *         @arg @ref LL_RCC_PLLSOURCE_HSI
  *         @arg @ref LL_RCC_PLLSOURCE_HSE
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetMainSource(void)
{
 8004010:	b480      	push	{r7}
 8004012:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC));
 8004014:	4b04      	ldr	r3, [pc, #16]	; (8004028 <LL_RCC_PLL_GetMainSource+0x18>)
 8004016:	685b      	ldr	r3, [r3, #4]
 8004018:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
}
 800401c:	4618      	mov	r0, r3
 800401e:	46bd      	mov	sp, r7
 8004020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004024:	4770      	bx	lr
 8004026:	bf00      	nop
 8004028:	40023800 	.word	0x40023800

0800402c <LL_RCC_PLL_GetN>:
  * @retval Between 50/192(*) and 432
  *
  *         (*) value not defined in all devices.
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetN(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >>  RCC_PLLCFGR_PLLN_Pos);
 8004030:	4b04      	ldr	r3, [pc, #16]	; (8004044 <LL_RCC_PLL_GetN+0x18>)
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	099b      	lsrs	r3, r3, #6
 8004036:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 800403a:	4618      	mov	r0, r3
 800403c:	46bd      	mov	sp, r7
 800403e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004042:	4770      	bx	lr
 8004044:	40023800 	.word	0x40023800

08004048 <LL_RCC_PLL_GetP>:
  *         @arg @ref LL_RCC_PLLP_DIV_4
  *         @arg @ref LL_RCC_PLLP_DIV_6
  *         @arg @ref LL_RCC_PLLP_DIV_8
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetP(void)
{
 8004048:	b480      	push	{r7}
 800404a:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP));
 800404c:	4b04      	ldr	r3, [pc, #16]	; (8004060 <LL_RCC_PLL_GetP+0x18>)
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
}
 8004054:	4618      	mov	r0, r3
 8004056:	46bd      	mov	sp, r7
 8004058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800405c:	4770      	bx	lr
 800405e:	bf00      	nop
 8004060:	40023800 	.word	0x40023800

08004064 <LL_RCC_PLL_GetR>:
  *         @arg @ref LL_RCC_PLLR_DIV_5
  *         @arg @ref LL_RCC_PLLR_DIV_6
  *         @arg @ref LL_RCC_PLLR_DIV_7
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetR(void)
{
 8004064:	b480      	push	{r7}
 8004066:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR));
 8004068:	4b04      	ldr	r3, [pc, #16]	; (800407c <LL_RCC_PLL_GetR+0x18>)
 800406a:	685b      	ldr	r3, [r3, #4]
 800406c:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
}
 8004070:	4618      	mov	r0, r3
 8004072:	46bd      	mov	sp, r7
 8004074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004078:	4770      	bx	lr
 800407a:	bf00      	nop
 800407c:	40023800 	.word	0x40023800

08004080 <LL_RCC_PLL_GetDivider>:
  *         @arg @ref LL_RCC_PLLM_DIV_61
  *         @arg @ref LL_RCC_PLLM_DIV_62
  *         @arg @ref LL_RCC_PLLM_DIV_63
  */
__STATIC_INLINE uint32_t LL_RCC_PLL_GetDivider(void)
{
 8004080:	b480      	push	{r7}
 8004082:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM));
 8004084:	4b04      	ldr	r3, [pc, #16]	; (8004098 <LL_RCC_PLL_GetDivider+0x18>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	f003 033f 	and.w	r3, r3, #63	; 0x3f
}
 800408c:	4618      	mov	r0, r3
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	40023800 	.word	0x40023800

0800409c <LL_RCC_GetSystemClocksFreq>:
  *         configuration based on this function will be incorrect.
  * @param  RCC_Clocks pointer to a @ref LL_RCC_ClocksTypeDef structure which will hold the clocks frequencies
  * @retval None
  */
void LL_RCC_GetSystemClocksFreq(LL_RCC_ClocksTypeDef *RCC_Clocks)
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
  /* Get SYSCLK frequency */
  RCC_Clocks->SYSCLK_Frequency = RCC_GetSystemClockFreq();
 80040a4:	f000 f820 	bl	80040e8 <RCC_GetSystemClockFreq>
 80040a8:	4602      	mov	r2, r0
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	601a      	str	r2, [r3, #0]

  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency   = RCC_GetHCLKClockFreq(RCC_Clocks->SYSCLK_Frequency);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	4618      	mov	r0, r3
 80040b4:	f000 f85c 	bl	8004170 <RCC_GetHCLKClockFreq>
 80040b8:	4602      	mov	r2, r0
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	605a      	str	r2, [r3, #4]

  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency  = RCC_GetPCLK1ClockFreq(RCC_Clocks->HCLK_Frequency);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 f86a 	bl	800419c <RCC_GetPCLK1ClockFreq>
 80040c8:	4602      	mov	r2, r0
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	609a      	str	r2, [r3, #8]

  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency  = RCC_GetPCLK2ClockFreq(RCC_Clocks->HCLK_Frequency);
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f000 f876 	bl	80041c4 <RCC_GetPCLK2ClockFreq>
 80040d8:	4602      	mov	r2, r0
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	60da      	str	r2, [r3, #12]
}
 80040de:	bf00      	nop
 80040e0:	3708      	adds	r7, #8
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}
	...

080040e8 <RCC_GetSystemClockFreq>:
/**
  * @brief  Return SYSTEM clock frequency
  * @retval SYSTEM clock frequency (in Hz)
  */
uint32_t RCC_GetSystemClockFreq(void)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
  uint32_t frequency = 0U;
 80040ee:	2300      	movs	r3, #0
 80040f0:	607b      	str	r3, [r7, #4]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (LL_RCC_GetSysClkSource())
 80040f2:	f7ff ff55 	bl	8003fa0 <LL_RCC_GetSysClkSource>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b0c      	cmp	r3, #12
 80040fa:	d82d      	bhi.n	8004158 <RCC_GetSystemClockFreq+0x70>
 80040fc:	a201      	add	r2, pc, #4	; (adr r2, 8004104 <RCC_GetSystemClockFreq+0x1c>)
 80040fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004102:	bf00      	nop
 8004104:	08004139 	.word	0x08004139
 8004108:	08004159 	.word	0x08004159
 800410c:	08004159 	.word	0x08004159
 8004110:	08004159 	.word	0x08004159
 8004114:	0800413f 	.word	0x0800413f
 8004118:	08004159 	.word	0x08004159
 800411c:	08004159 	.word	0x08004159
 8004120:	08004159 	.word	0x08004159
 8004124:	08004145 	.word	0x08004145
 8004128:	08004159 	.word	0x08004159
 800412c:	08004159 	.word	0x08004159
 8004130:	08004159 	.word	0x08004159
 8004134:	0800414f 	.word	0x0800414f
  {
    case LL_RCC_SYS_CLKSOURCE_STATUS_HSI:  /* HSI used as system clock  source */
      frequency = HSI_VALUE;
 8004138:	4b0b      	ldr	r3, [pc, #44]	; (8004168 <RCC_GetSystemClockFreq+0x80>)
 800413a:	607b      	str	r3, [r7, #4]
      break;
 800413c:	e00f      	b.n	800415e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
      frequency = HSE_VALUE;
 800413e:	4b0b      	ldr	r3, [pc, #44]	; (800416c <RCC_GetSystemClockFreq+0x84>)
 8004140:	607b      	str	r3, [r7, #4]
      break;
 8004142:	e00c      	b.n	800415e <RCC_GetSystemClockFreq+0x76>

    case LL_RCC_SYS_CLKSOURCE_STATUS_PLL:  /* PLL used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLL);
 8004144:	2008      	movs	r0, #8
 8004146:	f000 f851 	bl	80041ec <RCC_PLL_GetFreqDomain_SYS>
 800414a:	6078      	str	r0, [r7, #4]
      break;
 800414c:	e007      	b.n	800415e <RCC_GetSystemClockFreq+0x76>

#if defined(RCC_PLLR_SYSCLK_SUPPORT)
    case LL_RCC_SYS_CLKSOURCE_STATUS_PLLR: /* PLLR used as system clock  source */
      frequency = RCC_PLL_GetFreqDomain_SYS(LL_RCC_SYS_CLKSOURCE_STATUS_PLLR);
 800414e:	200c      	movs	r0, #12
 8004150:	f000 f84c 	bl	80041ec <RCC_PLL_GetFreqDomain_SYS>
 8004154:	6078      	str	r0, [r7, #4]
      break;
 8004156:	e002      	b.n	800415e <RCC_GetSystemClockFreq+0x76>
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

    default:
      frequency = HSI_VALUE;
 8004158:	4b03      	ldr	r3, [pc, #12]	; (8004168 <RCC_GetSystemClockFreq+0x80>)
 800415a:	607b      	str	r3, [r7, #4]
      break;
 800415c:	bf00      	nop
  }

  return frequency;
 800415e:	687b      	ldr	r3, [r7, #4]
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}
 8004168:	00f42400 	.word	0x00f42400
 800416c:	016e3600 	.word	0x016e3600

08004170 <RCC_GetHCLKClockFreq>:
  * @brief  Return HCLK clock frequency
  * @param  SYSCLK_Frequency SYSCLK clock frequency
  * @retval HCLK clock frequency (in Hz)
  */
uint32_t RCC_GetHCLKClockFreq(uint32_t SYSCLK_Frequency)
{
 8004170:	b580      	push	{r7, lr}
 8004172:	b082      	sub	sp, #8
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  return __LL_RCC_CALC_HCLK_FREQ(SYSCLK_Frequency, LL_RCC_GetAHBPrescaler());
 8004178:	f7ff ff20 	bl	8003fbc <LL_RCC_GetAHBPrescaler>
 800417c:	4603      	mov	r3, r0
 800417e:	091b      	lsrs	r3, r3, #4
 8004180:	f003 030f 	and.w	r3, r3, #15
 8004184:	4a04      	ldr	r2, [pc, #16]	; (8004198 <RCC_GetHCLKClockFreq+0x28>)
 8004186:	5cd3      	ldrb	r3, [r2, r3]
 8004188:	461a      	mov	r2, r3
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	40d3      	lsrs	r3, r2
}
 800418e:	4618      	mov	r0, r3
 8004190:	3708      	adds	r7, #8
 8004192:	46bd      	mov	sp, r7
 8004194:	bd80      	pop	{r7, pc}
 8004196:	bf00      	nop
 8004198:	08008814 	.word	0x08008814

0800419c <RCC_GetPCLK1ClockFreq>:
  * @brief  Return PCLK1 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK1 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK1ClockFreq(uint32_t HCLK_Frequency)
{
 800419c:	b580      	push	{r7, lr}
 800419e:	b082      	sub	sp, #8
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  /* PCLK1 clock frequency */
  return __LL_RCC_CALC_PCLK1_FREQ(HCLK_Frequency, LL_RCC_GetAPB1Prescaler());
 80041a4:	f7ff ff18 	bl	8003fd8 <LL_RCC_GetAPB1Prescaler>
 80041a8:	4603      	mov	r3, r0
 80041aa:	0a9b      	lsrs	r3, r3, #10
 80041ac:	4a04      	ldr	r2, [pc, #16]	; (80041c0 <RCC_GetPCLK1ClockFreq+0x24>)
 80041ae:	5cd3      	ldrb	r3, [r2, r3]
 80041b0:	461a      	mov	r2, r3
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	40d3      	lsrs	r3, r2
}
 80041b6:	4618      	mov	r0, r3
 80041b8:	3708      	adds	r7, #8
 80041ba:	46bd      	mov	sp, r7
 80041bc:	bd80      	pop	{r7, pc}
 80041be:	bf00      	nop
 80041c0:	08008824 	.word	0x08008824

080041c4 <RCC_GetPCLK2ClockFreq>:
  * @brief  Return PCLK2 clock frequency
  * @param  HCLK_Frequency HCLK clock frequency
  * @retval PCLK2 clock frequency (in Hz)
  */
uint32_t RCC_GetPCLK2ClockFreq(uint32_t HCLK_Frequency)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  /* PCLK2 clock frequency */
  return __LL_RCC_CALC_PCLK2_FREQ(HCLK_Frequency, LL_RCC_GetAPB2Prescaler());
 80041cc:	f7ff ff12 	bl	8003ff4 <LL_RCC_GetAPB2Prescaler>
 80041d0:	4603      	mov	r3, r0
 80041d2:	0b5b      	lsrs	r3, r3, #13
 80041d4:	4a04      	ldr	r2, [pc, #16]	; (80041e8 <RCC_GetPCLK2ClockFreq+0x24>)
 80041d6:	5cd3      	ldrb	r3, [r2, r3]
 80041d8:	461a      	mov	r2, r3
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	40d3      	lsrs	r3, r2
}
 80041de:	4618      	mov	r0, r3
 80041e0:	3708      	adds	r7, #8
 80041e2:	46bd      	mov	sp, r7
 80041e4:	bd80      	pop	{r7, pc}
 80041e6:	bf00      	nop
 80041e8:	08008824 	.word	0x08008824

080041ec <RCC_PLL_GetFreqDomain_SYS>:
  * @brief  Return PLL clock frequency used for system domain
  * @param  SYSCLK_Source System clock source
  * @retval PLL clock frequency (in Hz)
  */
uint32_t RCC_PLL_GetFreqDomain_SYS(uint32_t SYSCLK_Source)
{
 80041ec:	b590      	push	{r4, r7, lr}
 80041ee:	b087      	sub	sp, #28
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
  uint32_t pllinputfreq = 0U, pllsource = 0U, plloutputfreq = 0U;
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
 80041f8:	2300      	movs	r3, #0
 80041fa:	60fb      	str	r3, [r7, #12]
 80041fc:	2300      	movs	r3, #0
 80041fe:	613b      	str	r3, [r7, #16]

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
     SYSCLK = PLL_VCO / (PLLP or PLLR)
  */
  pllsource = LL_RCC_PLL_GetMainSource();
 8004200:	f7ff ff06 	bl	8004010 <LL_RCC_PLL_GetMainSource>
 8004204:	60f8      	str	r0, [r7, #12]

  switch (pllsource)
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d004      	beq.n	8004216 <RCC_PLL_GetFreqDomain_SYS+0x2a>
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004212:	d003      	beq.n	800421c <RCC_PLL_GetFreqDomain_SYS+0x30>
 8004214:	e005      	b.n	8004222 <RCC_PLL_GetFreqDomain_SYS+0x36>
  {
    case LL_RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllinputfreq = HSI_VALUE;
 8004216:	4b1c      	ldr	r3, [pc, #112]	; (8004288 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8004218:	617b      	str	r3, [r7, #20]
      break;
 800421a:	e005      	b.n	8004228 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    case LL_RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllinputfreq = HSE_VALUE;
 800421c:	4b1b      	ldr	r3, [pc, #108]	; (800428c <RCC_PLL_GetFreqDomain_SYS+0xa0>)
 800421e:	617b      	str	r3, [r7, #20]
      break;
 8004220:	e002      	b.n	8004228 <RCC_PLL_GetFreqDomain_SYS+0x3c>

    default:
      pllinputfreq = HSI_VALUE;
 8004222:	4b19      	ldr	r3, [pc, #100]	; (8004288 <RCC_PLL_GetFreqDomain_SYS+0x9c>)
 8004224:	617b      	str	r3, [r7, #20]
      break;
 8004226:	bf00      	nop
  }

  if (SYSCLK_Source == LL_RCC_SYS_CLKSOURCE_STATUS_PLL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	2b08      	cmp	r3, #8
 800422c:	d114      	bne.n	8004258 <RCC_PLL_GetFreqDomain_SYS+0x6c>
  {
    plloutputfreq = __LL_RCC_CALC_PLLCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 800422e:	f7ff ff27 	bl	8004080 <LL_RCC_PLL_GetDivider>
 8004232:	4602      	mov	r2, r0
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	fbb3 f4f2 	udiv	r4, r3, r2
 800423a:	f7ff fef7 	bl	800402c <LL_RCC_PLL_GetN>
 800423e:	4603      	mov	r3, r0
 8004240:	fb03 f404 	mul.w	r4, r3, r4
 8004244:	f7ff ff00 	bl	8004048 <LL_RCC_PLL_GetP>
 8004248:	4603      	mov	r3, r0
 800424a:	0c1b      	lsrs	r3, r3, #16
 800424c:	3301      	adds	r3, #1
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fbb4 f3f3 	udiv	r3, r4, r3
 8004254:	613b      	str	r3, [r7, #16]
 8004256:	e011      	b.n	800427c <RCC_PLL_GetFreqDomain_SYS+0x90>
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetP());
  }
#if defined(RCC_PLLR_SYSCLK_SUPPORT)
  else
  {
    plloutputfreq = __LL_RCC_CALC_PLLRCLK_FREQ(pllinputfreq, LL_RCC_PLL_GetDivider(),
 8004258:	f7ff ff12 	bl	8004080 <LL_RCC_PLL_GetDivider>
 800425c:	4602      	mov	r2, r0
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	fbb3 f4f2 	udiv	r4, r3, r2
 8004264:	f7ff fee2 	bl	800402c <LL_RCC_PLL_GetN>
 8004268:	4603      	mov	r3, r0
 800426a:	fb03 f404 	mul.w	r4, r3, r4
 800426e:	f7ff fef9 	bl	8004064 <LL_RCC_PLL_GetR>
 8004272:	4603      	mov	r3, r0
 8004274:	0f1b      	lsrs	r3, r3, #28
 8004276:	fbb4 f3f3 	udiv	r3, r4, r3
 800427a:	613b      	str	r3, [r7, #16]
                                        LL_RCC_PLL_GetN(), LL_RCC_PLL_GetR());
  }
#endif /* RCC_PLLR_SYSCLK_SUPPORT */

  return plloutputfreq;
 800427c:	693b      	ldr	r3, [r7, #16]
}
 800427e:	4618      	mov	r0, r3
 8004280:	371c      	adds	r7, #28
 8004282:	46bd      	mov	sp, r7
 8004284:	bd90      	pop	{r4, r7, pc}
 8004286:	bf00      	nop
 8004288:	00f42400 	.word	0x00f42400
 800428c:	016e3600 	.word	0x016e3600

08004290 <LL_USART_IsEnabled>:
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return (READ_BIT(USARTx->CR1, USART_CR1_UE) == (USART_CR1_UE));
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	68db      	ldr	r3, [r3, #12]
 800429c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042a0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a4:	bf0c      	ite	eq
 80042a6:	2301      	moveq	r3, #1
 80042a8:	2300      	movne	r3, #0
 80042aa:	b2db      	uxtb	r3, r3
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_USART_SetStopBitsLength>:
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
 80042c0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR2, USART_CR2_STOP, StopBits);
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	691b      	ldr	r3, [r3, #16]
 80042c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	611a      	str	r2, [r3, #16]
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr

080042de <LL_USART_SetHWFlowCtrl>:
{
 80042de:	b480      	push	{r7}
 80042e0:	b083      	sub	sp, #12
 80042e2:	af00      	add	r7, sp, #0
 80042e4:	6078      	str	r0, [r7, #4]
 80042e6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(USARTx->CR3, USART_CR3_RTSE | USART_CR3_CTSE, HardwareFlowControl);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	431a      	orrs	r2, r3
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	615a      	str	r2, [r3, #20]
}
 80042f8:	bf00      	nop
 80042fa:	370c      	adds	r7, #12
 80042fc:	46bd      	mov	sp, r7
 80042fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004302:	4770      	bx	lr

08004304 <LL_USART_SetBaudRate>:
{
 8004304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004308:	b0c0      	sub	sp, #256	; 0x100
 800430a:	af00      	add	r7, sp, #0
 800430c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004310:	f8c7 10f8 	str.w	r1, [r7, #248]	; 0xf8
 8004314:	f8c7 20f4 	str.w	r2, [r7, #244]	; 0xf4
 8004318:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  if (OverSampling == LL_USART_OVERSAMPLING_8)
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004324:	f040 810c 	bne.w	8004540 <LL_USART_SetBaudRate+0x23c>
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING8(PeriphClk, BaudRate));
 8004328:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800432c:	2200      	movs	r2, #0
 800432e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004332:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004336:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800433a:	4622      	mov	r2, r4
 800433c:	462b      	mov	r3, r5
 800433e:	1891      	adds	r1, r2, r2
 8004340:	6639      	str	r1, [r7, #96]	; 0x60
 8004342:	415b      	adcs	r3, r3
 8004344:	667b      	str	r3, [r7, #100]	; 0x64
 8004346:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 800434a:	4621      	mov	r1, r4
 800434c:	eb12 0801 	adds.w	r8, r2, r1
 8004350:	4629      	mov	r1, r5
 8004352:	eb43 0901 	adc.w	r9, r3, r1
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	f04f 0300 	mov.w	r3, #0
 800435e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004362:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004366:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800436a:	4690      	mov	r8, r2
 800436c:	4699      	mov	r9, r3
 800436e:	4623      	mov	r3, r4
 8004370:	eb18 0303 	adds.w	r3, r8, r3
 8004374:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004378:	462b      	mov	r3, r5
 800437a:	eb49 0303 	adc.w	r3, r9, r3
 800437e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004382:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004386:	2200      	movs	r2, #0
 8004388:	469a      	mov	sl, r3
 800438a:	4693      	mov	fp, r2
 800438c:	eb1a 030a 	adds.w	r3, sl, sl
 8004390:	65bb      	str	r3, [r7, #88]	; 0x58
 8004392:	eb4b 030b 	adc.w	r3, fp, fp
 8004396:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004398:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800439c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80043a0:	f7fb ff86 	bl	80002b0 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4b64      	ldr	r3, [pc, #400]	; (800453c <LL_USART_SetBaudRate+0x238>)
 80043aa:	fba3 2302 	umull	r2, r3, r3, r2
 80043ae:	095b      	lsrs	r3, r3, #5
 80043b0:	b29b      	uxth	r3, r3
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	b29c      	uxth	r4, r3
 80043b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80043c0:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80043c4:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	; 0xd8
 80043c8:	4642      	mov	r2, r8
 80043ca:	464b      	mov	r3, r9
 80043cc:	1891      	adds	r1, r2, r2
 80043ce:	6539      	str	r1, [r7, #80]	; 0x50
 80043d0:	415b      	adcs	r3, r3
 80043d2:	657b      	str	r3, [r7, #84]	; 0x54
 80043d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80043d8:	4641      	mov	r1, r8
 80043da:	1851      	adds	r1, r2, r1
 80043dc:	64b9      	str	r1, [r7, #72]	; 0x48
 80043de:	4649      	mov	r1, r9
 80043e0:	414b      	adcs	r3, r1
 80043e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043e4:	f04f 0200 	mov.w	r2, #0
 80043e8:	f04f 0300 	mov.w	r3, #0
 80043ec:	e9d7 ab12 	ldrd	sl, fp, [r7, #72]	; 0x48
 80043f0:	4659      	mov	r1, fp
 80043f2:	00cb      	lsls	r3, r1, #3
 80043f4:	4651      	mov	r1, sl
 80043f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80043fa:	4651      	mov	r1, sl
 80043fc:	00ca      	lsls	r2, r1, #3
 80043fe:	4610      	mov	r0, r2
 8004400:	4619      	mov	r1, r3
 8004402:	4603      	mov	r3, r0
 8004404:	4642      	mov	r2, r8
 8004406:	189b      	adds	r3, r3, r2
 8004408:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800440c:	464b      	mov	r3, r9
 800440e:	460a      	mov	r2, r1
 8004410:	eb42 0303 	adc.w	r3, r2, r3
 8004414:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004418:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800441c:	2200      	movs	r2, #0
 800441e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004422:	f8c7 20cc 	str.w	r2, [r7, #204]	; 0xcc
 8004426:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 800442a:	460b      	mov	r3, r1
 800442c:	18db      	adds	r3, r3, r3
 800442e:	643b      	str	r3, [r7, #64]	; 0x40
 8004430:	4613      	mov	r3, r2
 8004432:	eb42 0303 	adc.w	r3, r2, r3
 8004436:	647b      	str	r3, [r7, #68]	; 0x44
 8004438:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800443c:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004440:	f7fb ff36 	bl	80002b0 <__aeabi_uldivmod>
 8004444:	4602      	mov	r2, r0
 8004446:	460b      	mov	r3, r1
 8004448:	4611      	mov	r1, r2
 800444a:	4b3c      	ldr	r3, [pc, #240]	; (800453c <LL_USART_SetBaudRate+0x238>)
 800444c:	fba3 2301 	umull	r2, r3, r3, r1
 8004450:	095b      	lsrs	r3, r3, #5
 8004452:	2264      	movs	r2, #100	; 0x64
 8004454:	fb02 f303 	mul.w	r3, r2, r3
 8004458:	1acb      	subs	r3, r1, r3
 800445a:	00db      	lsls	r3, r3, #3
 800445c:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004460:	4b36      	ldr	r3, [pc, #216]	; (800453c <LL_USART_SetBaudRate+0x238>)
 8004462:	fba3 2302 	umull	r2, r3, r3, r2
 8004466:	095b      	lsrs	r3, r3, #5
 8004468:	b29b      	uxth	r3, r3
 800446a:	005b      	lsls	r3, r3, #1
 800446c:	b29b      	uxth	r3, r3
 800446e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004472:	b29b      	uxth	r3, r3
 8004474:	4423      	add	r3, r4
 8004476:	b29c      	uxth	r4, r3
 8004478:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800447c:	2200      	movs	r2, #0
 800447e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004482:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004486:	e9d7 8930 	ldrd	r8, r9, [r7, #192]	; 0xc0
 800448a:	4642      	mov	r2, r8
 800448c:	464b      	mov	r3, r9
 800448e:	1891      	adds	r1, r2, r2
 8004490:	63b9      	str	r1, [r7, #56]	; 0x38
 8004492:	415b      	adcs	r3, r3
 8004494:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004496:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800449a:	4641      	mov	r1, r8
 800449c:	1851      	adds	r1, r2, r1
 800449e:	6339      	str	r1, [r7, #48]	; 0x30
 80044a0:	4649      	mov	r1, r9
 80044a2:	414b      	adcs	r3, r1
 80044a4:	637b      	str	r3, [r7, #52]	; 0x34
 80044a6:	f04f 0200 	mov.w	r2, #0
 80044aa:	f04f 0300 	mov.w	r3, #0
 80044ae:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80044b2:	4659      	mov	r1, fp
 80044b4:	00cb      	lsls	r3, r1, #3
 80044b6:	4651      	mov	r1, sl
 80044b8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80044bc:	4651      	mov	r1, sl
 80044be:	00ca      	lsls	r2, r1, #3
 80044c0:	4610      	mov	r0, r2
 80044c2:	4619      	mov	r1, r3
 80044c4:	4603      	mov	r3, r0
 80044c6:	4642      	mov	r2, r8
 80044c8:	189b      	adds	r3, r3, r2
 80044ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80044ce:	464b      	mov	r3, r9
 80044d0:	460a      	mov	r2, r1
 80044d2:	eb42 0303 	adc.w	r3, r2, r3
 80044d6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80044da:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80044de:	2200      	movs	r2, #0
 80044e0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80044e4:	f8c7 20b4 	str.w	r2, [r7, #180]	; 0xb4
 80044e8:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 80044ec:	460b      	mov	r3, r1
 80044ee:	18db      	adds	r3, r3, r3
 80044f0:	62bb      	str	r3, [r7, #40]	; 0x28
 80044f2:	4613      	mov	r3, r2
 80044f4:	eb42 0303 	adc.w	r3, r2, r3
 80044f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80044fa:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80044fe:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004502:	f7fb fed5 	bl	80002b0 <__aeabi_uldivmod>
 8004506:	4602      	mov	r2, r0
 8004508:	460b      	mov	r3, r1
 800450a:	4b0c      	ldr	r3, [pc, #48]	; (800453c <LL_USART_SetBaudRate+0x238>)
 800450c:	fba3 1302 	umull	r1, r3, r3, r2
 8004510:	095b      	lsrs	r3, r3, #5
 8004512:	2164      	movs	r1, #100	; 0x64
 8004514:	fb01 f303 	mul.w	r3, r1, r3
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	00db      	lsls	r3, r3, #3
 800451c:	3332      	adds	r3, #50	; 0x32
 800451e:	4a07      	ldr	r2, [pc, #28]	; (800453c <LL_USART_SetBaudRate+0x238>)
 8004520:	fba2 2303 	umull	r2, r3, r2, r3
 8004524:	095b      	lsrs	r3, r3, #5
 8004526:	b29b      	uxth	r3, r3
 8004528:	f003 0307 	and.w	r3, r3, #7
 800452c:	b29b      	uxth	r3, r3
 800452e:	4423      	add	r3, r4
 8004530:	b29b      	uxth	r3, r3
 8004532:	461a      	mov	r2, r3
 8004534:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004538:	609a      	str	r2, [r3, #8]
}
 800453a:	e107      	b.n	800474c <LL_USART_SetBaudRate+0x448>
 800453c:	51eb851f 	.word	0x51eb851f
    USARTx->BRR = (uint16_t)(__LL_USART_DIV_SAMPLING16(PeriphClk, BaudRate));
 8004540:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004544:	2200      	movs	r2, #0
 8004546:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800454a:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800454e:	e9d7 892a 	ldrd	r8, r9, [r7, #168]	; 0xa8
 8004552:	4642      	mov	r2, r8
 8004554:	464b      	mov	r3, r9
 8004556:	1891      	adds	r1, r2, r2
 8004558:	6239      	str	r1, [r7, #32]
 800455a:	415b      	adcs	r3, r3
 800455c:	627b      	str	r3, [r7, #36]	; 0x24
 800455e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004562:	4641      	mov	r1, r8
 8004564:	1854      	adds	r4, r2, r1
 8004566:	4649      	mov	r1, r9
 8004568:	eb43 0501 	adc.w	r5, r3, r1
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	f04f 0300 	mov.w	r3, #0
 8004574:	00eb      	lsls	r3, r5, #3
 8004576:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800457a:	00e2      	lsls	r2, r4, #3
 800457c:	4614      	mov	r4, r2
 800457e:	461d      	mov	r5, r3
 8004580:	4643      	mov	r3, r8
 8004582:	18e3      	adds	r3, r4, r3
 8004584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004588:	464b      	mov	r3, r9
 800458a:	eb45 0303 	adc.w	r3, r5, r3
 800458e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004592:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8004596:	2200      	movs	r2, #0
 8004598:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800459c:	f8c7 209c 	str.w	r2, [r7, #156]	; 0x9c
 80045a0:	f04f 0200 	mov.w	r2, #0
 80045a4:	f04f 0300 	mov.w	r3, #0
 80045a8:	e9d7 4526 	ldrd	r4, r5, [r7, #152]	; 0x98
 80045ac:	4629      	mov	r1, r5
 80045ae:	008b      	lsls	r3, r1, #2
 80045b0:	4621      	mov	r1, r4
 80045b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80045b6:	4621      	mov	r1, r4
 80045b8:	008a      	lsls	r2, r1, #2
 80045ba:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 80045be:	f7fb fe77 	bl	80002b0 <__aeabi_uldivmod>
 80045c2:	4602      	mov	r2, r0
 80045c4:	460b      	mov	r3, r1
 80045c6:	4b64      	ldr	r3, [pc, #400]	; (8004758 <LL_USART_SetBaudRate+0x454>)
 80045c8:	fba3 2302 	umull	r2, r3, r3, r2
 80045cc:	095b      	lsrs	r3, r3, #5
 80045ce:	b29b      	uxth	r3, r3
 80045d0:	011b      	lsls	r3, r3, #4
 80045d2:	b29c      	uxth	r4, r3
 80045d4:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80045d8:	2200      	movs	r2, #0
 80045da:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80045de:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80045e2:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	; 0x90
 80045e6:	4642      	mov	r2, r8
 80045e8:	464b      	mov	r3, r9
 80045ea:	1891      	adds	r1, r2, r2
 80045ec:	61b9      	str	r1, [r7, #24]
 80045ee:	415b      	adcs	r3, r3
 80045f0:	61fb      	str	r3, [r7, #28]
 80045f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045f6:	4641      	mov	r1, r8
 80045f8:	1851      	adds	r1, r2, r1
 80045fa:	6139      	str	r1, [r7, #16]
 80045fc:	4649      	mov	r1, r9
 80045fe:	414b      	adcs	r3, r1
 8004600:	617b      	str	r3, [r7, #20]
 8004602:	f04f 0200 	mov.w	r2, #0
 8004606:	f04f 0300 	mov.w	r3, #0
 800460a:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800460e:	4659      	mov	r1, fp
 8004610:	00cb      	lsls	r3, r1, #3
 8004612:	4651      	mov	r1, sl
 8004614:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004618:	4651      	mov	r1, sl
 800461a:	00ca      	lsls	r2, r1, #3
 800461c:	4610      	mov	r0, r2
 800461e:	4619      	mov	r1, r3
 8004620:	4603      	mov	r3, r0
 8004622:	4642      	mov	r2, r8
 8004624:	189b      	adds	r3, r3, r2
 8004626:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800462a:	464b      	mov	r3, r9
 800462c:	460a      	mov	r2, r1
 800462e:	eb42 0303 	adc.w	r3, r2, r3
 8004632:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8004636:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 800463a:	2200      	movs	r2, #0
 800463c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004640:	f8c7 2084 	str.w	r2, [r7, #132]	; 0x84
 8004644:	f04f 0200 	mov.w	r2, #0
 8004648:	f04f 0300 	mov.w	r3, #0
 800464c:	e9d7 8920 	ldrd	r8, r9, [r7, #128]	; 0x80
 8004650:	4649      	mov	r1, r9
 8004652:	008b      	lsls	r3, r1, #2
 8004654:	4641      	mov	r1, r8
 8004656:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800465a:	4641      	mov	r1, r8
 800465c:	008a      	lsls	r2, r1, #2
 800465e:	e9d7 0122 	ldrd	r0, r1, [r7, #136]	; 0x88
 8004662:	f7fb fe25 	bl	80002b0 <__aeabi_uldivmod>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4b3b      	ldr	r3, [pc, #236]	; (8004758 <LL_USART_SetBaudRate+0x454>)
 800466c:	fba3 1302 	umull	r1, r3, r3, r2
 8004670:	095b      	lsrs	r3, r3, #5
 8004672:	2164      	movs	r1, #100	; 0x64
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	011b      	lsls	r3, r3, #4
 800467c:	3332      	adds	r3, #50	; 0x32
 800467e:	4a36      	ldr	r2, [pc, #216]	; (8004758 <LL_USART_SetBaudRate+0x454>)
 8004680:	fba2 2303 	umull	r2, r3, r2, r3
 8004684:	095b      	lsrs	r3, r3, #5
 8004686:	b29b      	uxth	r3, r3
 8004688:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800468c:	b29b      	uxth	r3, r3
 800468e:	4423      	add	r3, r4
 8004690:	b29c      	uxth	r4, r3
 8004692:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004696:	2200      	movs	r2, #0
 8004698:	67bb      	str	r3, [r7, #120]	; 0x78
 800469a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800469c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80046a0:	4642      	mov	r2, r8
 80046a2:	464b      	mov	r3, r9
 80046a4:	1891      	adds	r1, r2, r2
 80046a6:	60b9      	str	r1, [r7, #8]
 80046a8:	415b      	adcs	r3, r3
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046b0:	4641      	mov	r1, r8
 80046b2:	1851      	adds	r1, r2, r1
 80046b4:	6039      	str	r1, [r7, #0]
 80046b6:	4649      	mov	r1, r9
 80046b8:	414b      	adcs	r3, r1
 80046ba:	607b      	str	r3, [r7, #4]
 80046bc:	f04f 0200 	mov.w	r2, #0
 80046c0:	f04f 0300 	mov.w	r3, #0
 80046c4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80046c8:	4659      	mov	r1, fp
 80046ca:	00cb      	lsls	r3, r1, #3
 80046cc:	4651      	mov	r1, sl
 80046ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046d2:	4651      	mov	r1, sl
 80046d4:	00ca      	lsls	r2, r1, #3
 80046d6:	4610      	mov	r0, r2
 80046d8:	4619      	mov	r1, r3
 80046da:	4603      	mov	r3, r0
 80046dc:	4642      	mov	r2, r8
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	673b      	str	r3, [r7, #112]	; 0x70
 80046e2:	464b      	mov	r3, r9
 80046e4:	460a      	mov	r2, r1
 80046e6:	eb42 0303 	adc.w	r3, r2, r3
 80046ea:	677b      	str	r3, [r7, #116]	; 0x74
 80046ec:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 80046f0:	2200      	movs	r2, #0
 80046f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80046f4:	66fa      	str	r2, [r7, #108]	; 0x6c
 80046f6:	f04f 0200 	mov.w	r2, #0
 80046fa:	f04f 0300 	mov.w	r3, #0
 80046fe:	e9d7 891a 	ldrd	r8, r9, [r7, #104]	; 0x68
 8004702:	4649      	mov	r1, r9
 8004704:	008b      	lsls	r3, r1, #2
 8004706:	4641      	mov	r1, r8
 8004708:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800470c:	4641      	mov	r1, r8
 800470e:	008a      	lsls	r2, r1, #2
 8004710:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	; 0x70
 8004714:	f7fb fdcc 	bl	80002b0 <__aeabi_uldivmod>
 8004718:	4602      	mov	r2, r0
 800471a:	460b      	mov	r3, r1
 800471c:	4b0e      	ldr	r3, [pc, #56]	; (8004758 <LL_USART_SetBaudRate+0x454>)
 800471e:	fba3 1302 	umull	r1, r3, r3, r2
 8004722:	095b      	lsrs	r3, r3, #5
 8004724:	2164      	movs	r1, #100	; 0x64
 8004726:	fb01 f303 	mul.w	r3, r1, r3
 800472a:	1ad3      	subs	r3, r2, r3
 800472c:	011b      	lsls	r3, r3, #4
 800472e:	3332      	adds	r3, #50	; 0x32
 8004730:	4a09      	ldr	r2, [pc, #36]	; (8004758 <LL_USART_SetBaudRate+0x454>)
 8004732:	fba2 2303 	umull	r2, r3, r2, r3
 8004736:	095b      	lsrs	r3, r3, #5
 8004738:	b29b      	uxth	r3, r3
 800473a:	f003 030f 	and.w	r3, r3, #15
 800473e:	b29b      	uxth	r3, r3
 8004740:	4423      	add	r3, r4
 8004742:	b29b      	uxth	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800474a:	609a      	str	r2, [r3, #8]
}
 800474c:	bf00      	nop
 800474e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004752:	46bd      	mov	sp, r7
 8004754:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004758:	51eb851f 	.word	0x51eb851f

0800475c <LL_USART_Init>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: USART registers are initialized according to USART_InitStruct content
  *          - ERROR: Problem occurred during USART Registers initialization
  */
ErrorStatus LL_USART_Init(USART_TypeDef *USARTx, LL_USART_InitTypeDef *USART_InitStruct)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b088      	sub	sp, #32
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  ErrorStatus status = ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	77fb      	strb	r3, [r7, #31]
  uint32_t periphclk = LL_RCC_PERIPH_FREQUENCY_NO;
 800476a:	2300      	movs	r3, #0
 800476c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_LL_USART_HWCONTROL(USART_InitStruct->HardwareFlowControl));
  assert_param(IS_LL_USART_OVERSAMPLING(USART_InitStruct->OverSampling));

  /* USART needs to be in disabled state, in order to be able to configure some bits in
     CRx registers */
  if (LL_USART_IsEnabled(USARTx) == 0U)
 800476e:	6878      	ldr	r0, [r7, #4]
 8004770:	f7ff fd8e 	bl	8004290 <LL_USART_IsEnabled>
 8004774:	4603      	mov	r3, r0
 8004776:	2b00      	cmp	r3, #0
 8004778:	d15e      	bne.n	8004838 <LL_USART_Init+0xdc>
     * - DataWidth:          USART_CR1_M bits according to USART_InitStruct->DataWidth value
     * - Parity:             USART_CR1_PCE, USART_CR1_PS bits according to USART_InitStruct->Parity value
     * - TransferDirection:  USART_CR1_TE, USART_CR1_RE bits according to USART_InitStruct->TransferDirection value
     * - Oversampling:       USART_CR1_OVER8 bit according to USART_InitStruct->OverSampling value.
     */
    MODIFY_REG(USARTx->CR1,
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	68db      	ldr	r3, [r3, #12]
 800477e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004782:	f023 030c 	bic.w	r3, r3, #12
 8004786:	683a      	ldr	r2, [r7, #0]
 8004788:	6851      	ldr	r1, [r2, #4]
 800478a:	683a      	ldr	r2, [r7, #0]
 800478c:	68d2      	ldr	r2, [r2, #12]
 800478e:	4311      	orrs	r1, r2
 8004790:	683a      	ldr	r2, [r7, #0]
 8004792:	6912      	ldr	r2, [r2, #16]
 8004794:	4311      	orrs	r1, r2
 8004796:	683a      	ldr	r2, [r7, #0]
 8004798:	6992      	ldr	r2, [r2, #24]
 800479a:	430a      	orrs	r2, r1
 800479c:	431a      	orrs	r2, r3
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	60da      	str	r2, [r3, #12]
    /*---------------------------- USART CR2 Configuration -----------------------
     * Configure USARTx CR2 (Stop bits) with parameters:
     * - Stop Bits:          USART_CR2_STOP bits according to USART_InitStruct->StopBits value.
     * - CLKEN, CPOL, CPHA and LBCL bits are to be configured using LL_USART_ClockInit().
     */
    LL_USART_SetStopBitsLength(USARTx, USART_InitStruct->StopBits);
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	689b      	ldr	r3, [r3, #8]
 80047a6:	4619      	mov	r1, r3
 80047a8:	6878      	ldr	r0, [r7, #4]
 80047aa:	f7ff fd85 	bl	80042b8 <LL_USART_SetStopBitsLength>

    /*---------------------------- USART CR3 Configuration -----------------------
     * Configure USARTx CR3 (Hardware Flow Control) with parameters:
     * - HardwareFlowControl: USART_CR3_RTSE, USART_CR3_CTSE bits according to USART_InitStruct->HardwareFlowControl value.
     */
    LL_USART_SetHWFlowCtrl(USARTx, USART_InitStruct->HardwareFlowControl);
 80047ae:	683b      	ldr	r3, [r7, #0]
 80047b0:	695b      	ldr	r3, [r3, #20]
 80047b2:	4619      	mov	r1, r3
 80047b4:	6878      	ldr	r0, [r7, #4]
 80047b6:	f7ff fd92 	bl	80042de <LL_USART_SetHWFlowCtrl>

    /*---------------------------- USART BRR Configuration -----------------------
     * Retrieve Clock frequency used for USART Peripheral
     */
    LL_RCC_GetSystemClocksFreq(&rcc_clocks);
 80047ba:	f107 0308 	add.w	r3, r7, #8
 80047be:	4618      	mov	r0, r3
 80047c0:	f7ff fc6c 	bl	800409c <LL_RCC_GetSystemClocksFreq>
    if (USARTx == USART1)
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a1f      	ldr	r2, [pc, #124]	; (8004844 <LL_USART_Init+0xe8>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d102      	bne.n	80047d2 <LL_USART_Init+0x76>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047cc:	697b      	ldr	r3, [r7, #20]
 80047ce:	61bb      	str	r3, [r7, #24]
 80047d0:	e021      	b.n	8004816 <LL_USART_Init+0xba>
    }
    else if (USARTx == USART2)
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	4a1c      	ldr	r2, [pc, #112]	; (8004848 <LL_USART_Init+0xec>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d102      	bne.n	80047e0 <LL_USART_Init+0x84>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	61bb      	str	r3, [r7, #24]
 80047de:	e01a      	b.n	8004816 <LL_USART_Init+0xba>
    }
#if defined(USART3)
    else if (USARTx == USART3)
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	4a1a      	ldr	r2, [pc, #104]	; (800484c <LL_USART_Init+0xf0>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d102      	bne.n	80047ee <LL_USART_Init+0x92>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	61bb      	str	r3, [r7, #24]
 80047ec:	e013      	b.n	8004816 <LL_USART_Init+0xba>
    }
#endif /* USART3 */
#if defined(USART6)
    else if (USARTx == USART6)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a17      	ldr	r2, [pc, #92]	; (8004850 <LL_USART_Init+0xf4>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d102      	bne.n	80047fc <LL_USART_Init+0xa0>
    {
      periphclk = rcc_clocks.PCLK2_Frequency;
 80047f6:	697b      	ldr	r3, [r7, #20]
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	e00c      	b.n	8004816 <LL_USART_Init+0xba>
    }
#endif /* USART6 */
#if defined(UART4)
    else if (USARTx == UART4)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a15      	ldr	r2, [pc, #84]	; (8004854 <LL_USART_Init+0xf8>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d102      	bne.n	800480a <LL_USART_Init+0xae>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004804:	693b      	ldr	r3, [r7, #16]
 8004806:	61bb      	str	r3, [r7, #24]
 8004808:	e005      	b.n	8004816 <LL_USART_Init+0xba>
    }
#endif /* UART4 */
#if defined(UART5)
    else if (USARTx == UART5)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	4a12      	ldr	r2, [pc, #72]	; (8004858 <LL_USART_Init+0xfc>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d101      	bne.n	8004816 <LL_USART_Init+0xba>
    {
      periphclk = rcc_clocks.PCLK1_Frequency;
 8004812:	693b      	ldr	r3, [r7, #16]
 8004814:	61bb      	str	r3, [r7, #24]

    /* Configure the USART Baud Rate :
       - valid baud rate value (different from 0) is required
       - Peripheral clock as returned by RCC service, should be valid (different from 0).
    */
    if ((periphclk != LL_RCC_PERIPH_FREQUENCY_NO)
 8004816:	69bb      	ldr	r3, [r7, #24]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d00d      	beq.n	8004838 <LL_USART_Init+0xdc>
        && (USART_InitStruct->BaudRate != 0U))
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d009      	beq.n	8004838 <LL_USART_Init+0xdc>
    {
      status = SUCCESS;
 8004824:	2300      	movs	r3, #0
 8004826:	77fb      	strb	r3, [r7, #31]
      LL_USART_SetBaudRate(USARTx,
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	699a      	ldr	r2, [r3, #24]
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	69b9      	ldr	r1, [r7, #24]
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f7ff fd66 	bl	8004304 <LL_USART_SetBaudRate>
      assert_param(IS_LL_USART_BRR_MIN(USARTx->BRR));
    }
  }
  /* Endif (=> USART not in Disabled state => return ERROR) */

  return (status);
 8004838:	7ffb      	ldrb	r3, [r7, #31]
}
 800483a:	4618      	mov	r0, r3
 800483c:	3720      	adds	r7, #32
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}
 8004842:	bf00      	nop
 8004844:	40011000 	.word	0x40011000
 8004848:	40004400 	.word	0x40004400
 800484c:	40004800 	.word	0x40004800
 8004850:	40011400 	.word	0x40011400
 8004854:	40004c00 	.word	0x40004c00
 8004858:	40005000 	.word	0x40005000

0800485c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800485c:	b084      	sub	sp, #16
 800485e:	b580      	push	{r7, lr}
 8004860:	b084      	sub	sp, #16
 8004862:	af00      	add	r7, sp, #0
 8004864:	6078      	str	r0, [r7, #4]
 8004866:	f107 001c 	add.w	r0, r7, #28
 800486a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800486e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004870:	2b01      	cmp	r3, #1
 8004872:	d122      	bne.n	80048ba <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004888:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800488c:	687a      	ldr	r2, [r7, #4]
 800488e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	68db      	ldr	r3, [r3, #12]
 8004894:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	2b01      	cmp	r3, #1
 80048a0:	d105      	bne.n	80048ae <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	68db      	ldr	r3, [r3, #12]
 80048a6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f001 fbe8 	bl	8006084 <USB_CoreReset>
 80048b4:	4603      	mov	r3, r0
 80048b6:	73fb      	strb	r3, [r7, #15]
 80048b8:	e01a      	b.n	80048f0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	68db      	ldr	r3, [r3, #12]
 80048be:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048c6:	6878      	ldr	r0, [r7, #4]
 80048c8:	f001 fbdc 	bl	8006084 <USB_CoreReset>
 80048cc:	4603      	mov	r3, r0
 80048ce:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048d0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d106      	bne.n	80048e4 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048da:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	639a      	str	r2, [r3, #56]	; 0x38
 80048e2:	e005      	b.n	80048f0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048e8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048f2:	2b01      	cmp	r3, #1
 80048f4:	d10b      	bne.n	800490e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f043 0206 	orr.w	r2, r3, #6
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	689b      	ldr	r3, [r3, #8]
 8004906:	f043 0220 	orr.w	r2, r3, #32
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800491a:	b004      	add	sp, #16
 800491c:	4770      	bx	lr
	...

08004920 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004920:	b480      	push	{r7}
 8004922:	b087      	sub	sp, #28
 8004924:	af00      	add	r7, sp, #0
 8004926:	60f8      	str	r0, [r7, #12]
 8004928:	60b9      	str	r1, [r7, #8]
 800492a:	4613      	mov	r3, r2
 800492c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800492e:	79fb      	ldrb	r3, [r7, #7]
 8004930:	2b02      	cmp	r3, #2
 8004932:	d165      	bne.n	8004a00 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004934:	68bb      	ldr	r3, [r7, #8]
 8004936:	4a41      	ldr	r2, [pc, #260]	; (8004a3c <USB_SetTurnaroundTime+0x11c>)
 8004938:	4293      	cmp	r3, r2
 800493a:	d906      	bls.n	800494a <USB_SetTurnaroundTime+0x2a>
 800493c:	68bb      	ldr	r3, [r7, #8]
 800493e:	4a40      	ldr	r2, [pc, #256]	; (8004a40 <USB_SetTurnaroundTime+0x120>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d202      	bcs.n	800494a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004944:	230f      	movs	r3, #15
 8004946:	617b      	str	r3, [r7, #20]
 8004948:	e062      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800494a:	68bb      	ldr	r3, [r7, #8]
 800494c:	4a3c      	ldr	r2, [pc, #240]	; (8004a40 <USB_SetTurnaroundTime+0x120>)
 800494e:	4293      	cmp	r3, r2
 8004950:	d306      	bcc.n	8004960 <USB_SetTurnaroundTime+0x40>
 8004952:	68bb      	ldr	r3, [r7, #8]
 8004954:	4a3b      	ldr	r2, [pc, #236]	; (8004a44 <USB_SetTurnaroundTime+0x124>)
 8004956:	4293      	cmp	r3, r2
 8004958:	d202      	bcs.n	8004960 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800495a:	230e      	movs	r3, #14
 800495c:	617b      	str	r3, [r7, #20]
 800495e:	e057      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004960:	68bb      	ldr	r3, [r7, #8]
 8004962:	4a38      	ldr	r2, [pc, #224]	; (8004a44 <USB_SetTurnaroundTime+0x124>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d306      	bcc.n	8004976 <USB_SetTurnaroundTime+0x56>
 8004968:	68bb      	ldr	r3, [r7, #8]
 800496a:	4a37      	ldr	r2, [pc, #220]	; (8004a48 <USB_SetTurnaroundTime+0x128>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d202      	bcs.n	8004976 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004970:	230d      	movs	r3, #13
 8004972:	617b      	str	r3, [r7, #20]
 8004974:	e04c      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4a33      	ldr	r2, [pc, #204]	; (8004a48 <USB_SetTurnaroundTime+0x128>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d306      	bcc.n	800498c <USB_SetTurnaroundTime+0x6c>
 800497e:	68bb      	ldr	r3, [r7, #8]
 8004980:	4a32      	ldr	r2, [pc, #200]	; (8004a4c <USB_SetTurnaroundTime+0x12c>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d802      	bhi.n	800498c <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8004986:	230c      	movs	r3, #12
 8004988:	617b      	str	r3, [r7, #20]
 800498a:	e041      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 800498c:	68bb      	ldr	r3, [r7, #8]
 800498e:	4a2f      	ldr	r2, [pc, #188]	; (8004a4c <USB_SetTurnaroundTime+0x12c>)
 8004990:	4293      	cmp	r3, r2
 8004992:	d906      	bls.n	80049a2 <USB_SetTurnaroundTime+0x82>
 8004994:	68bb      	ldr	r3, [r7, #8]
 8004996:	4a2e      	ldr	r2, [pc, #184]	; (8004a50 <USB_SetTurnaroundTime+0x130>)
 8004998:	4293      	cmp	r3, r2
 800499a:	d802      	bhi.n	80049a2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 800499c:	230b      	movs	r3, #11
 800499e:	617b      	str	r3, [r7, #20]
 80049a0:	e036      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	4a2a      	ldr	r2, [pc, #168]	; (8004a50 <USB_SetTurnaroundTime+0x130>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d906      	bls.n	80049b8 <USB_SetTurnaroundTime+0x98>
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	4a29      	ldr	r2, [pc, #164]	; (8004a54 <USB_SetTurnaroundTime+0x134>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d802      	bhi.n	80049b8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80049b2:	230a      	movs	r3, #10
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	e02b      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80049b8:	68bb      	ldr	r3, [r7, #8]
 80049ba:	4a26      	ldr	r2, [pc, #152]	; (8004a54 <USB_SetTurnaroundTime+0x134>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d906      	bls.n	80049ce <USB_SetTurnaroundTime+0xae>
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	4a25      	ldr	r2, [pc, #148]	; (8004a58 <USB_SetTurnaroundTime+0x138>)
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d202      	bcs.n	80049ce <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80049c8:	2309      	movs	r3, #9
 80049ca:	617b      	str	r3, [r7, #20]
 80049cc:	e020      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	4a21      	ldr	r2, [pc, #132]	; (8004a58 <USB_SetTurnaroundTime+0x138>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d306      	bcc.n	80049e4 <USB_SetTurnaroundTime+0xc4>
 80049d6:	68bb      	ldr	r3, [r7, #8]
 80049d8:	4a20      	ldr	r2, [pc, #128]	; (8004a5c <USB_SetTurnaroundTime+0x13c>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d802      	bhi.n	80049e4 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80049de:	2308      	movs	r3, #8
 80049e0:	617b      	str	r3, [r7, #20]
 80049e2:	e015      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	4a1d      	ldr	r2, [pc, #116]	; (8004a5c <USB_SetTurnaroundTime+0x13c>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d906      	bls.n	80049fa <USB_SetTurnaroundTime+0xda>
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	4a1c      	ldr	r2, [pc, #112]	; (8004a60 <USB_SetTurnaroundTime+0x140>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d202      	bcs.n	80049fa <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80049f4:	2307      	movs	r3, #7
 80049f6:	617b      	str	r3, [r7, #20]
 80049f8:	e00a      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80049fa:	2306      	movs	r3, #6
 80049fc:	617b      	str	r3, [r7, #20]
 80049fe:	e007      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004a00:	79fb      	ldrb	r3, [r7, #7]
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d102      	bne.n	8004a0c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004a06:	2309      	movs	r3, #9
 8004a08:	617b      	str	r3, [r7, #20]
 8004a0a:	e001      	b.n	8004a10 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8004a0c:	2309      	movs	r3, #9
 8004a0e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	68db      	ldr	r3, [r3, #12]
 8004a14:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	68da      	ldr	r2, [r3, #12]
 8004a20:	697b      	ldr	r3, [r7, #20]
 8004a22:	029b      	lsls	r3, r3, #10
 8004a24:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004a28:	431a      	orrs	r2, r3
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004a2e:	2300      	movs	r3, #0
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	371c      	adds	r7, #28
 8004a34:	46bd      	mov	sp, r7
 8004a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3a:	4770      	bx	lr
 8004a3c:	00d8acbf 	.word	0x00d8acbf
 8004a40:	00e4e1c0 	.word	0x00e4e1c0
 8004a44:	00f42400 	.word	0x00f42400
 8004a48:	01067380 	.word	0x01067380
 8004a4c:	011a499f 	.word	0x011a499f
 8004a50:	01312cff 	.word	0x01312cff
 8004a54:	014ca43f 	.word	0x014ca43f
 8004a58:	016e3600 	.word	0x016e3600
 8004a5c:	01a6ab1f 	.word	0x01a6ab1f
 8004a60:	01e84800 	.word	0x01e84800

08004a64 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	689b      	ldr	r3, [r3, #8]
 8004a70:	f043 0201 	orr.w	r2, r3, #1
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a78:	2300      	movs	r3, #0
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	370c      	adds	r7, #12
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a84:	4770      	bx	lr

08004a86 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004a86:	b480      	push	{r7}
 8004a88:	b083      	sub	sp, #12
 8004a8a:	af00      	add	r7, sp, #0
 8004a8c:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	689b      	ldr	r3, [r3, #8]
 8004a92:	f023 0201 	bic.w	r2, r3, #1
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004a9a:	2300      	movs	r3, #0
}
 8004a9c:	4618      	mov	r0, r3
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004aa8:	b580      	push	{r7, lr}
 8004aaa:	b084      	sub	sp, #16
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	6078      	str	r0, [r7, #4]
 8004ab0:	460b      	mov	r3, r1
 8004ab2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004ac4:	78fb      	ldrb	r3, [r7, #3]
 8004ac6:	2b01      	cmp	r3, #1
 8004ac8:	d115      	bne.n	8004af6 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	68db      	ldr	r3, [r3, #12]
 8004ace:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004ad6:	2001      	movs	r0, #1
 8004ad8:	f7fd fb3e 	bl	8002158 <HAL_Delay>
      ms++;
 8004adc:	68fb      	ldr	r3, [r7, #12]
 8004ade:	3301      	adds	r3, #1
 8004ae0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004ae2:	6878      	ldr	r0, [r7, #4]
 8004ae4:	f001 fa3f 	bl	8005f66 <USB_GetMode>
 8004ae8:	4603      	mov	r3, r0
 8004aea:	2b01      	cmp	r3, #1
 8004aec:	d01e      	beq.n	8004b2c <USB_SetCurrentMode+0x84>
 8004aee:	68fb      	ldr	r3, [r7, #12]
 8004af0:	2b31      	cmp	r3, #49	; 0x31
 8004af2:	d9f0      	bls.n	8004ad6 <USB_SetCurrentMode+0x2e>
 8004af4:	e01a      	b.n	8004b2c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004af6:	78fb      	ldrb	r3, [r7, #3]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d115      	bne.n	8004b28 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	68db      	ldr	r3, [r3, #12]
 8004b00:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004b08:	2001      	movs	r0, #1
 8004b0a:	f7fd fb25 	bl	8002158 <HAL_Delay>
      ms++;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	3301      	adds	r3, #1
 8004b12:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004b14:	6878      	ldr	r0, [r7, #4]
 8004b16:	f001 fa26 	bl	8005f66 <USB_GetMode>
 8004b1a:	4603      	mov	r3, r0
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d005      	beq.n	8004b2c <USB_SetCurrentMode+0x84>
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	2b31      	cmp	r3, #49	; 0x31
 8004b24:	d9f0      	bls.n	8004b08 <USB_SetCurrentMode+0x60>
 8004b26:	e001      	b.n	8004b2c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	e005      	b.n	8004b38 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	2b32      	cmp	r3, #50	; 0x32
 8004b30:	d101      	bne.n	8004b36 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004b32:	2301      	movs	r3, #1
 8004b34:	e000      	b.n	8004b38 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004b40:	b084      	sub	sp, #16
 8004b42:	b580      	push	{r7, lr}
 8004b44:	b086      	sub	sp, #24
 8004b46:	af00      	add	r7, sp, #0
 8004b48:	6078      	str	r0, [r7, #4]
 8004b4a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004b4e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004b52:	2300      	movs	r3, #0
 8004b54:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	613b      	str	r3, [r7, #16]
 8004b5e:	e009      	b.n	8004b74 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004b60:	687a      	ldr	r2, [r7, #4]
 8004b62:	693b      	ldr	r3, [r7, #16]
 8004b64:	3340      	adds	r3, #64	; 0x40
 8004b66:	009b      	lsls	r3, r3, #2
 8004b68:	4413      	add	r3, r2
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3301      	adds	r3, #1
 8004b72:	613b      	str	r3, [r7, #16]
 8004b74:	693b      	ldr	r3, [r7, #16]
 8004b76:	2b0e      	cmp	r3, #14
 8004b78:	d9f2      	bls.n	8004b60 <USB_DevInit+0x20>
  }

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004b7a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d11c      	bne.n	8004bba <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b86:	685b      	ldr	r3, [r3, #4]
 8004b88:	68fa      	ldr	r2, [r7, #12]
 8004b8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004b8e:	f043 0302 	orr.w	r3, r3, #2
 8004b92:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004b98:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	601a      	str	r2, [r3, #0]
 8004bb8:	e005      	b.n	8004bc6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bbe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004bcc:	461a      	mov	r2, r3
 8004bce:	2300      	movs	r3, #0
 8004bd0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bd8:	4619      	mov	r1, r3
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004be0:	461a      	mov	r2, r3
 8004be2:	680b      	ldr	r3, [r1, #0]
 8004be4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004be8:	2b01      	cmp	r3, #1
 8004bea:	d10c      	bne.n	8004c06 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004bec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d104      	bne.n	8004bfc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004bf2:	2100      	movs	r1, #0
 8004bf4:	6878      	ldr	r0, [r7, #4]
 8004bf6:	f000 f965 	bl	8004ec4 <USB_SetDevSpeed>
 8004bfa:	e008      	b.n	8004c0e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004bfc:	2101      	movs	r1, #1
 8004bfe:	6878      	ldr	r0, [r7, #4]
 8004c00:	f000 f960 	bl	8004ec4 <USB_SetDevSpeed>
 8004c04:	e003      	b.n	8004c0e <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004c06:	2103      	movs	r1, #3
 8004c08:	6878      	ldr	r0, [r7, #4]
 8004c0a:	f000 f95b 	bl	8004ec4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004c0e:	2110      	movs	r1, #16
 8004c10:	6878      	ldr	r0, [r7, #4]
 8004c12:	f000 f8f3 	bl	8004dfc <USB_FlushTxFifo>
 8004c16:	4603      	mov	r3, r0
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d001      	beq.n	8004c20 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004c1c:	2301      	movs	r3, #1
 8004c1e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004c20:	6878      	ldr	r0, [r7, #4]
 8004c22:	f000 f91f 	bl	8004e64 <USB_FlushRxFifo>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d001      	beq.n	8004c30 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	461a      	mov	r2, r3
 8004c38:	2300      	movs	r3, #0
 8004c3a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c42:	461a      	mov	r2, r3
 8004c44:	2300      	movs	r3, #0
 8004c46:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c4e:	461a      	mov	r2, r3
 8004c50:	2300      	movs	r3, #0
 8004c52:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004c54:	2300      	movs	r3, #0
 8004c56:	613b      	str	r3, [r7, #16]
 8004c58:	e043      	b.n	8004ce2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c6c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c70:	d118      	bne.n	8004ca4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d10a      	bne.n	8004c8e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004c78:	693b      	ldr	r3, [r7, #16]
 8004c7a:	015a      	lsls	r2, r3, #5
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	4413      	add	r3, r2
 8004c80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c84:	461a      	mov	r2, r3
 8004c86:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004c8a:	6013      	str	r3, [r2, #0]
 8004c8c:	e013      	b.n	8004cb6 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004c8e:	693b      	ldr	r3, [r7, #16]
 8004c90:	015a      	lsls	r2, r3, #5
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	4413      	add	r3, r2
 8004c96:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c9a:	461a      	mov	r2, r3
 8004c9c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ca0:	6013      	str	r3, [r2, #0]
 8004ca2:	e008      	b.n	8004cb6 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004ca4:	693b      	ldr	r3, [r7, #16]
 8004ca6:	015a      	lsls	r2, r3, #5
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb0:	461a      	mov	r2, r3
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	461a      	mov	r2, r3
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004cc8:	693b      	ldr	r3, [r7, #16]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd4:	461a      	mov	r2, r3
 8004cd6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004cda:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	613b      	str	r3, [r7, #16]
 8004ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ce4:	693a      	ldr	r2, [r7, #16]
 8004ce6:	429a      	cmp	r2, r3
 8004ce8:	d3b7      	bcc.n	8004c5a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004cea:	2300      	movs	r3, #0
 8004cec:	613b      	str	r3, [r7, #16]
 8004cee:	e043      	b.n	8004d78 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004cf0:	693b      	ldr	r3, [r7, #16]
 8004cf2:	015a      	lsls	r2, r3, #5
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	4413      	add	r3, r2
 8004cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d02:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d06:	d118      	bne.n	8004d3a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004d08:	693b      	ldr	r3, [r7, #16]
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d10a      	bne.n	8004d24 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004d0e:	693b      	ldr	r3, [r7, #16]
 8004d10:	015a      	lsls	r2, r3, #5
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	4413      	add	r3, r2
 8004d16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d1a:	461a      	mov	r2, r3
 8004d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	e013      	b.n	8004d4c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	015a      	lsls	r2, r3, #5
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	4413      	add	r3, r2
 8004d2c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d30:	461a      	mov	r2, r3
 8004d32:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004d36:	6013      	str	r3, [r2, #0]
 8004d38:	e008      	b.n	8004d4c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004d3a:	693b      	ldr	r3, [r7, #16]
 8004d3c:	015a      	lsls	r2, r3, #5
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	4413      	add	r3, r2
 8004d42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d46:	461a      	mov	r2, r3
 8004d48:	2300      	movs	r3, #0
 8004d4a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	015a      	lsls	r2, r3, #5
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	4413      	add	r3, r2
 8004d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d58:	461a      	mov	r2, r3
 8004d5a:	2300      	movs	r3, #0
 8004d5c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	015a      	lsls	r2, r3, #5
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	4413      	add	r3, r2
 8004d66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d6a:	461a      	mov	r2, r3
 8004d6c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004d70:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	3301      	adds	r3, #1
 8004d76:	613b      	str	r3, [r7, #16]
 8004d78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d3b7      	bcc.n	8004cf0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d86:	691b      	ldr	r3, [r3, #16]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d8e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d92:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004da0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004da2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d105      	bne.n	8004db4 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	699b      	ldr	r3, [r3, #24]
 8004dac:	f043 0210 	orr.w	r2, r3, #16
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	699a      	ldr	r2, [r3, #24]
 8004db8:	4b0f      	ldr	r3, [pc, #60]	; (8004df8 <USB_DevInit+0x2b8>)
 8004dba:	4313      	orrs	r3, r2
 8004dbc:	687a      	ldr	r2, [r7, #4]
 8004dbe:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004dc0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d005      	beq.n	8004dd2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	699b      	ldr	r3, [r3, #24]
 8004dca:	f043 0208 	orr.w	r2, r3, #8
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004dd2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d107      	bne.n	8004de8 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	699b      	ldr	r3, [r3, #24]
 8004ddc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004de0:	f043 0304 	orr.w	r3, r3, #4
 8004de4:	687a      	ldr	r2, [r7, #4]
 8004de6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004de8:	7dfb      	ldrb	r3, [r7, #23]
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3718      	adds	r7, #24
 8004dee:	46bd      	mov	sp, r7
 8004df0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004df4:	b004      	add	sp, #16
 8004df6:	4770      	bx	lr
 8004df8:	803c3800 	.word	0x803c3800

08004dfc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004dfc:	b480      	push	{r7}
 8004dfe:	b085      	sub	sp, #20
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
 8004e04:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e06:	2300      	movs	r3, #0
 8004e08:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	3301      	adds	r3, #1
 8004e0e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e10:	68fb      	ldr	r3, [r7, #12]
 8004e12:	4a13      	ldr	r2, [pc, #76]	; (8004e60 <USB_FlushTxFifo+0x64>)
 8004e14:	4293      	cmp	r3, r2
 8004e16:	d901      	bls.n	8004e1c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004e18:	2303      	movs	r3, #3
 8004e1a:	e01b      	b.n	8004e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691b      	ldr	r3, [r3, #16]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	daf2      	bge.n	8004e0a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004e24:	2300      	movs	r3, #0
 8004e26:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004e28:	683b      	ldr	r3, [r7, #0]
 8004e2a:	019b      	lsls	r3, r3, #6
 8004e2c:	f043 0220 	orr.w	r2, r3, #32
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	3301      	adds	r3, #1
 8004e38:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4a08      	ldr	r2, [pc, #32]	; (8004e60 <USB_FlushTxFifo+0x64>)
 8004e3e:	4293      	cmp	r3, r2
 8004e40:	d901      	bls.n	8004e46 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004e42:	2303      	movs	r3, #3
 8004e44:	e006      	b.n	8004e54 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	691b      	ldr	r3, [r3, #16]
 8004e4a:	f003 0320 	and.w	r3, r3, #32
 8004e4e:	2b20      	cmp	r3, #32
 8004e50:	d0f0      	beq.n	8004e34 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004e52:	2300      	movs	r3, #0
}
 8004e54:	4618      	mov	r0, r3
 8004e56:	3714      	adds	r7, #20
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e5e:	4770      	bx	lr
 8004e60:	00030d40 	.word	0x00030d40

08004e64 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b085      	sub	sp, #20
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004e70:	68fb      	ldr	r3, [r7, #12]
 8004e72:	3301      	adds	r3, #1
 8004e74:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	4a11      	ldr	r2, [pc, #68]	; (8004ec0 <USB_FlushRxFifo+0x5c>)
 8004e7a:	4293      	cmp	r3, r2
 8004e7c:	d901      	bls.n	8004e82 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004e7e:	2303      	movs	r3, #3
 8004e80:	e018      	b.n	8004eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	691b      	ldr	r3, [r3, #16]
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	daf2      	bge.n	8004e70 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004e8a:	2300      	movs	r3, #0
 8004e8c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2210      	movs	r2, #16
 8004e92:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3301      	adds	r3, #1
 8004e98:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	4a08      	ldr	r2, [pc, #32]	; (8004ec0 <USB_FlushRxFifo+0x5c>)
 8004e9e:	4293      	cmp	r3, r2
 8004ea0:	d901      	bls.n	8004ea6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004ea2:	2303      	movs	r3, #3
 8004ea4:	e006      	b.n	8004eb4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	691b      	ldr	r3, [r3, #16]
 8004eaa:	f003 0310 	and.w	r3, r3, #16
 8004eae:	2b10      	cmp	r3, #16
 8004eb0:	d0f0      	beq.n	8004e94 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	4618      	mov	r0, r3
 8004eb6:	3714      	adds	r7, #20
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ebe:	4770      	bx	lr
 8004ec0:	00030d40 	.word	0x00030d40

08004ec4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004ec4:	b480      	push	{r7}
 8004ec6:	b085      	sub	sp, #20
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	6078      	str	r0, [r7, #4]
 8004ecc:	460b      	mov	r3, r1
 8004ece:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	78fb      	ldrb	r3, [r7, #3]
 8004ede:	68f9      	ldr	r1, [r7, #12]
 8004ee0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ee4:	4313      	orrs	r3, r2
 8004ee6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004ee8:	2300      	movs	r3, #0
}
 8004eea:	4618      	mov	r0, r3
 8004eec:	3714      	adds	r7, #20
 8004eee:	46bd      	mov	sp, r7
 8004ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef4:	4770      	bx	lr

08004ef6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004ef6:	b480      	push	{r7}
 8004ef8:	b087      	sub	sp, #28
 8004efa:	af00      	add	r7, sp, #0
 8004efc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f08:	689b      	ldr	r3, [r3, #8]
 8004f0a:	f003 0306 	and.w	r3, r3, #6
 8004f0e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d102      	bne.n	8004f1c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004f16:	2300      	movs	r3, #0
 8004f18:	75fb      	strb	r3, [r7, #23]
 8004f1a:	e00a      	b.n	8004f32 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2b02      	cmp	r3, #2
 8004f20:	d002      	beq.n	8004f28 <USB_GetDevSpeed+0x32>
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	2b06      	cmp	r3, #6
 8004f26:	d102      	bne.n	8004f2e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004f28:	2302      	movs	r3, #2
 8004f2a:	75fb      	strb	r3, [r7, #23]
 8004f2c:	e001      	b.n	8004f32 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004f2e:	230f      	movs	r3, #15
 8004f30:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004f32:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f34:	4618      	mov	r0, r3
 8004f36:	371c      	adds	r7, #28
 8004f38:	46bd      	mov	sp, r7
 8004f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f3e:	4770      	bx	lr

08004f40 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b085      	sub	sp, #20
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
 8004f48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	781b      	ldrb	r3, [r3, #0]
 8004f52:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	785b      	ldrb	r3, [r3, #1]
 8004f58:	2b01      	cmp	r3, #1
 8004f5a:	d13a      	bne.n	8004fd2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004f62:	69da      	ldr	r2, [r3, #28]
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	781b      	ldrb	r3, [r3, #0]
 8004f68:	f003 030f 	and.w	r3, r3, #15
 8004f6c:	2101      	movs	r1, #1
 8004f6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004f72:	b29b      	uxth	r3, r3
 8004f74:	68f9      	ldr	r1, [r7, #12]
 8004f76:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004f7e:	68bb      	ldr	r3, [r7, #8]
 8004f80:	015a      	lsls	r2, r3, #5
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	4413      	add	r3, r2
 8004f86:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d155      	bne.n	8005040 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004f94:	68bb      	ldr	r3, [r7, #8]
 8004f96:	015a      	lsls	r2, r3, #5
 8004f98:	68fb      	ldr	r3, [r7, #12]
 8004f9a:	4413      	add	r3, r2
 8004f9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	68db      	ldr	r3, [r3, #12]
 8004fa6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004faa:	683b      	ldr	r3, [r7, #0]
 8004fac:	791b      	ldrb	r3, [r3, #4]
 8004fae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fb0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	059b      	lsls	r3, r3, #22
 8004fb6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004fb8:	4313      	orrs	r3, r2
 8004fba:	68ba      	ldr	r2, [r7, #8]
 8004fbc:	0151      	lsls	r1, r2, #5
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	440a      	add	r2, r1
 8004fc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fc6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004fce:	6013      	str	r3, [r2, #0]
 8004fd0:	e036      	b.n	8005040 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fd8:	69da      	ldr	r2, [r3, #28]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	f003 030f 	and.w	r3, r3, #15
 8004fe2:	2101      	movs	r1, #1
 8004fe4:	fa01 f303 	lsl.w	r3, r1, r3
 8004fe8:	041b      	lsls	r3, r3, #16
 8004fea:	68f9      	ldr	r1, [r7, #12]
 8004fec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004ff4:	68bb      	ldr	r3, [r7, #8]
 8004ff6:	015a      	lsls	r2, r3, #5
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4413      	add	r3, r2
 8004ffc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005006:	2b00      	cmp	r3, #0
 8005008:	d11a      	bne.n	8005040 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681a      	ldr	r2, [r3, #0]
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	68db      	ldr	r3, [r3, #12]
 800501c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8005020:	683b      	ldr	r3, [r7, #0]
 8005022:	791b      	ldrb	r3, [r3, #4]
 8005024:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8005026:	430b      	orrs	r3, r1
 8005028:	4313      	orrs	r3, r2
 800502a:	68ba      	ldr	r2, [r7, #8]
 800502c:	0151      	lsls	r1, r2, #5
 800502e:	68fa      	ldr	r2, [r7, #12]
 8005030:	440a      	add	r2, r1
 8005032:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005036:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800503a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800503e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8005040:	2300      	movs	r3, #0
}
 8005042:	4618      	mov	r0, r3
 8005044:	3714      	adds	r7, #20
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005050:	b480      	push	{r7}
 8005052:	b085      	sub	sp, #20
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800505e:	683b      	ldr	r3, [r7, #0]
 8005060:	781b      	ldrb	r3, [r3, #0]
 8005062:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	785b      	ldrb	r3, [r3, #1]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d161      	bne.n	8005130 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	015a      	lsls	r2, r3, #5
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	4413      	add	r3, r2
 8005074:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800507e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005082:	d11f      	bne.n	80050c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	015a      	lsls	r2, r3, #5
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	4413      	add	r3, r2
 800508c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	0151      	lsls	r1, r2, #5
 8005096:	68fa      	ldr	r2, [r7, #12]
 8005098:	440a      	add	r2, r1
 800509a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800509e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80050a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	015a      	lsls	r2, r3, #5
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	4413      	add	r3, r2
 80050ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	68ba      	ldr	r2, [r7, #8]
 80050b4:	0151      	lsls	r1, r2, #5
 80050b6:	68fa      	ldr	r2, [r7, #12]
 80050b8:	440a      	add	r2, r1
 80050ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050c4:	68fb      	ldr	r3, [r7, #12]
 80050c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80050cc:	683b      	ldr	r3, [r7, #0]
 80050ce:	781b      	ldrb	r3, [r3, #0]
 80050d0:	f003 030f 	and.w	r3, r3, #15
 80050d4:	2101      	movs	r1, #1
 80050d6:	fa01 f303 	lsl.w	r3, r1, r3
 80050da:	b29b      	uxth	r3, r3
 80050dc:	43db      	mvns	r3, r3
 80050de:	68f9      	ldr	r1, [r7, #12]
 80050e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80050e4:	4013      	ands	r3, r2
 80050e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050ee:	69da      	ldr	r2, [r3, #28]
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	f003 030f 	and.w	r3, r3, #15
 80050f8:	2101      	movs	r1, #1
 80050fa:	fa01 f303 	lsl.w	r3, r1, r3
 80050fe:	b29b      	uxth	r3, r3
 8005100:	43db      	mvns	r3, r3
 8005102:	68f9      	ldr	r1, [r7, #12]
 8005104:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005108:	4013      	ands	r3, r2
 800510a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800510c:	68bb      	ldr	r3, [r7, #8]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	68bb      	ldr	r3, [r7, #8]
 800511c:	0159      	lsls	r1, r3, #5
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	440b      	add	r3, r1
 8005122:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005126:	4619      	mov	r1, r3
 8005128:	4b35      	ldr	r3, [pc, #212]	; (8005200 <USB_DeactivateEndpoint+0x1b0>)
 800512a:	4013      	ands	r3, r2
 800512c:	600b      	str	r3, [r1, #0]
 800512e:	e060      	b.n	80051f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005130:	68bb      	ldr	r3, [r7, #8]
 8005132:	015a      	lsls	r2, r3, #5
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	4413      	add	r3, r2
 8005138:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005142:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005146:	d11f      	bne.n	8005188 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	015a      	lsls	r2, r3, #5
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	4413      	add	r3, r2
 8005150:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68ba      	ldr	r2, [r7, #8]
 8005158:	0151      	lsls	r1, r2, #5
 800515a:	68fa      	ldr	r2, [r7, #12]
 800515c:	440a      	add	r2, r1
 800515e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005162:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005166:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	015a      	lsls	r2, r3, #5
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	4413      	add	r3, r2
 8005170:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	68ba      	ldr	r2, [r7, #8]
 8005178:	0151      	lsls	r1, r2, #5
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	440a      	add	r2, r1
 800517e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005182:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005186:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800518e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005190:	683b      	ldr	r3, [r7, #0]
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	f003 030f 	and.w	r3, r3, #15
 8005198:	2101      	movs	r1, #1
 800519a:	fa01 f303 	lsl.w	r3, r1, r3
 800519e:	041b      	lsls	r3, r3, #16
 80051a0:	43db      	mvns	r3, r3
 80051a2:	68f9      	ldr	r1, [r7, #12]
 80051a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051a8:	4013      	ands	r3, r2
 80051aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051b2:	69da      	ldr	r2, [r3, #28]
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	781b      	ldrb	r3, [r3, #0]
 80051b8:	f003 030f 	and.w	r3, r3, #15
 80051bc:	2101      	movs	r1, #1
 80051be:	fa01 f303 	lsl.w	r3, r1, r3
 80051c2:	041b      	lsls	r3, r3, #16
 80051c4:	43db      	mvns	r3, r3
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80051cc:	4013      	ands	r3, r2
 80051ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	015a      	lsls	r2, r3, #5
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	4413      	add	r3, r2
 80051d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051dc:	681a      	ldr	r2, [r3, #0]
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	0159      	lsls	r1, r3, #5
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	440b      	add	r3, r1
 80051e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051ea:	4619      	mov	r1, r3
 80051ec:	4b05      	ldr	r3, [pc, #20]	; (8005204 <USB_DeactivateEndpoint+0x1b4>)
 80051ee:	4013      	ands	r3, r2
 80051f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80051f2:	2300      	movs	r3, #0
}
 80051f4:	4618      	mov	r0, r3
 80051f6:	3714      	adds	r7, #20
 80051f8:	46bd      	mov	sp, r7
 80051fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fe:	4770      	bx	lr
 8005200:	ec337800 	.word	0xec337800
 8005204:	eff37800 	.word	0xeff37800

08005208 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005208:	b580      	push	{r7, lr}
 800520a:	b08a      	sub	sp, #40	; 0x28
 800520c:	af02      	add	r7, sp, #8
 800520e:	60f8      	str	r0, [r7, #12]
 8005210:	60b9      	str	r1, [r7, #8]
 8005212:	4613      	mov	r3, r2
 8005214:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	781b      	ldrb	r3, [r3, #0]
 800521e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	785b      	ldrb	r3, [r3, #1]
 8005224:	2b01      	cmp	r3, #1
 8005226:	f040 815c 	bne.w	80054e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800522a:	68bb      	ldr	r3, [r7, #8]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d132      	bne.n	8005298 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005232:	69bb      	ldr	r3, [r7, #24]
 8005234:	015a      	lsls	r2, r3, #5
 8005236:	69fb      	ldr	r3, [r7, #28]
 8005238:	4413      	add	r3, r2
 800523a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800523e:	691b      	ldr	r3, [r3, #16]
 8005240:	69ba      	ldr	r2, [r7, #24]
 8005242:	0151      	lsls	r1, r2, #5
 8005244:	69fa      	ldr	r2, [r7, #28]
 8005246:	440a      	add	r2, r1
 8005248:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800524c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005250:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005254:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005256:	69bb      	ldr	r3, [r7, #24]
 8005258:	015a      	lsls	r2, r3, #5
 800525a:	69fb      	ldr	r3, [r7, #28]
 800525c:	4413      	add	r3, r2
 800525e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005262:	691b      	ldr	r3, [r3, #16]
 8005264:	69ba      	ldr	r2, [r7, #24]
 8005266:	0151      	lsls	r1, r2, #5
 8005268:	69fa      	ldr	r2, [r7, #28]
 800526a:	440a      	add	r2, r1
 800526c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005270:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005274:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005276:	69bb      	ldr	r3, [r7, #24]
 8005278:	015a      	lsls	r2, r3, #5
 800527a:	69fb      	ldr	r3, [r7, #28]
 800527c:	4413      	add	r3, r2
 800527e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005282:	691b      	ldr	r3, [r3, #16]
 8005284:	69ba      	ldr	r2, [r7, #24]
 8005286:	0151      	lsls	r1, r2, #5
 8005288:	69fa      	ldr	r2, [r7, #28]
 800528a:	440a      	add	r2, r1
 800528c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005290:	0cdb      	lsrs	r3, r3, #19
 8005292:	04db      	lsls	r3, r3, #19
 8005294:	6113      	str	r3, [r2, #16]
 8005296:	e074      	b.n	8005382 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005298:	69bb      	ldr	r3, [r7, #24]
 800529a:	015a      	lsls	r2, r3, #5
 800529c:	69fb      	ldr	r3, [r7, #28]
 800529e:	4413      	add	r3, r2
 80052a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052a4:	691b      	ldr	r3, [r3, #16]
 80052a6:	69ba      	ldr	r2, [r7, #24]
 80052a8:	0151      	lsls	r1, r2, #5
 80052aa:	69fa      	ldr	r2, [r7, #28]
 80052ac:	440a      	add	r2, r1
 80052ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052b2:	0cdb      	lsrs	r3, r3, #19
 80052b4:	04db      	lsls	r3, r3, #19
 80052b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80052b8:	69bb      	ldr	r3, [r7, #24]
 80052ba:	015a      	lsls	r2, r3, #5
 80052bc:	69fb      	ldr	r3, [r7, #28]
 80052be:	4413      	add	r3, r2
 80052c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052c4:	691b      	ldr	r3, [r3, #16]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	0151      	lsls	r1, r2, #5
 80052ca:	69fa      	ldr	r2, [r7, #28]
 80052cc:	440a      	add	r2, r1
 80052ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80052d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80052da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	015a      	lsls	r2, r3, #5
 80052e0:	69fb      	ldr	r3, [r7, #28]
 80052e2:	4413      	add	r3, r2
 80052e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6999      	ldr	r1, [r3, #24]
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	68db      	ldr	r3, [r3, #12]
 80052f2:	440b      	add	r3, r1
 80052f4:	1e59      	subs	r1, r3, #1
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	68db      	ldr	r3, [r3, #12]
 80052fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80052fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005300:	4b9d      	ldr	r3, [pc, #628]	; (8005578 <USB_EPStartXfer+0x370>)
 8005302:	400b      	ands	r3, r1
 8005304:	69b9      	ldr	r1, [r7, #24]
 8005306:	0148      	lsls	r0, r1, #5
 8005308:	69f9      	ldr	r1, [r7, #28]
 800530a:	4401      	add	r1, r0
 800530c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005310:	4313      	orrs	r3, r2
 8005312:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005314:	69bb      	ldr	r3, [r7, #24]
 8005316:	015a      	lsls	r2, r3, #5
 8005318:	69fb      	ldr	r3, [r7, #28]
 800531a:	4413      	add	r3, r2
 800531c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005320:	691a      	ldr	r2, [r3, #16]
 8005322:	68bb      	ldr	r3, [r7, #8]
 8005324:	699b      	ldr	r3, [r3, #24]
 8005326:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800532a:	69b9      	ldr	r1, [r7, #24]
 800532c:	0148      	lsls	r0, r1, #5
 800532e:	69f9      	ldr	r1, [r7, #28]
 8005330:	4401      	add	r1, r0
 8005332:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005336:	4313      	orrs	r3, r2
 8005338:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d11f      	bne.n	8005382 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005342:	69bb      	ldr	r3, [r7, #24]
 8005344:	015a      	lsls	r2, r3, #5
 8005346:	69fb      	ldr	r3, [r7, #28]
 8005348:	4413      	add	r3, r2
 800534a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800534e:	691b      	ldr	r3, [r3, #16]
 8005350:	69ba      	ldr	r2, [r7, #24]
 8005352:	0151      	lsls	r1, r2, #5
 8005354:	69fa      	ldr	r2, [r7, #28]
 8005356:	440a      	add	r2, r1
 8005358:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800535c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005360:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	015a      	lsls	r2, r3, #5
 8005366:	69fb      	ldr	r3, [r7, #28]
 8005368:	4413      	add	r3, r2
 800536a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800536e:	691b      	ldr	r3, [r3, #16]
 8005370:	69ba      	ldr	r2, [r7, #24]
 8005372:	0151      	lsls	r1, r2, #5
 8005374:	69fa      	ldr	r2, [r7, #28]
 8005376:	440a      	add	r2, r1
 8005378:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800537c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005380:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005382:	79fb      	ldrb	r3, [r7, #7]
 8005384:	2b01      	cmp	r3, #1
 8005386:	d14b      	bne.n	8005420 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	695b      	ldr	r3, [r3, #20]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d009      	beq.n	80053a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	015a      	lsls	r2, r3, #5
 8005394:	69fb      	ldr	r3, [r7, #28]
 8005396:	4413      	add	r3, r2
 8005398:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800539c:	461a      	mov	r2, r3
 800539e:	68bb      	ldr	r3, [r7, #8]
 80053a0:	695b      	ldr	r3, [r3, #20]
 80053a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80053a4:	68bb      	ldr	r3, [r7, #8]
 80053a6:	791b      	ldrb	r3, [r3, #4]
 80053a8:	2b01      	cmp	r3, #1
 80053aa:	d128      	bne.n	80053fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80053ac:	69fb      	ldr	r3, [r7, #28]
 80053ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b2:	689b      	ldr	r3, [r3, #8]
 80053b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d110      	bne.n	80053de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80053bc:	69bb      	ldr	r3, [r7, #24]
 80053be:	015a      	lsls	r2, r3, #5
 80053c0:	69fb      	ldr	r3, [r7, #28]
 80053c2:	4413      	add	r3, r2
 80053c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	69ba      	ldr	r2, [r7, #24]
 80053cc:	0151      	lsls	r1, r2, #5
 80053ce:	69fa      	ldr	r2, [r7, #28]
 80053d0:	440a      	add	r2, r1
 80053d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80053da:	6013      	str	r3, [r2, #0]
 80053dc:	e00f      	b.n	80053fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80053de:	69bb      	ldr	r3, [r7, #24]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	69fb      	ldr	r3, [r7, #28]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	69ba      	ldr	r2, [r7, #24]
 80053ee:	0151      	lsls	r1, r2, #5
 80053f0:	69fa      	ldr	r2, [r7, #28]
 80053f2:	440a      	add	r2, r1
 80053f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80053fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80053fe:	69bb      	ldr	r3, [r7, #24]
 8005400:	015a      	lsls	r2, r3, #5
 8005402:	69fb      	ldr	r3, [r7, #28]
 8005404:	4413      	add	r3, r2
 8005406:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	69ba      	ldr	r2, [r7, #24]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	69fa      	ldr	r2, [r7, #28]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005418:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800541c:	6013      	str	r3, [r2, #0]
 800541e:	e133      	b.n	8005688 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005420:	69bb      	ldr	r3, [r7, #24]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	69fb      	ldr	r3, [r7, #28]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69ba      	ldr	r2, [r7, #24]
 8005430:	0151      	lsls	r1, r2, #5
 8005432:	69fa      	ldr	r2, [r7, #28]
 8005434:	440a      	add	r2, r1
 8005436:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800543a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800543e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	791b      	ldrb	r3, [r3, #4]
 8005444:	2b01      	cmp	r3, #1
 8005446:	d015      	beq.n	8005474 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005448:	68bb      	ldr	r3, [r7, #8]
 800544a:	699b      	ldr	r3, [r3, #24]
 800544c:	2b00      	cmp	r3, #0
 800544e:	f000 811b 	beq.w	8005688 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005452:	69fb      	ldr	r3, [r7, #28]
 8005454:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005458:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800545a:	68bb      	ldr	r3, [r7, #8]
 800545c:	781b      	ldrb	r3, [r3, #0]
 800545e:	f003 030f 	and.w	r3, r3, #15
 8005462:	2101      	movs	r1, #1
 8005464:	fa01 f303 	lsl.w	r3, r1, r3
 8005468:	69f9      	ldr	r1, [r7, #28]
 800546a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800546e:	4313      	orrs	r3, r2
 8005470:	634b      	str	r3, [r1, #52]	; 0x34
 8005472:	e109      	b.n	8005688 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005474:	69fb      	ldr	r3, [r7, #28]
 8005476:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005480:	2b00      	cmp	r3, #0
 8005482:	d110      	bne.n	80054a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005484:	69bb      	ldr	r3, [r7, #24]
 8005486:	015a      	lsls	r2, r3, #5
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	4413      	add	r3, r2
 800548c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	69ba      	ldr	r2, [r7, #24]
 8005494:	0151      	lsls	r1, r2, #5
 8005496:	69fa      	ldr	r2, [r7, #28]
 8005498:	440a      	add	r2, r1
 800549a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	e00f      	b.n	80054c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80054a6:	69bb      	ldr	r3, [r7, #24]
 80054a8:	015a      	lsls	r2, r3, #5
 80054aa:	69fb      	ldr	r3, [r7, #28]
 80054ac:	4413      	add	r3, r2
 80054ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	69ba      	ldr	r2, [r7, #24]
 80054b6:	0151      	lsls	r1, r2, #5
 80054b8:	69fa      	ldr	r2, [r7, #28]
 80054ba:	440a      	add	r2, r1
 80054bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80054c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	6919      	ldr	r1, [r3, #16]
 80054ca:	68bb      	ldr	r3, [r7, #8]
 80054cc:	781a      	ldrb	r2, [r3, #0]
 80054ce:	68bb      	ldr	r3, [r7, #8]
 80054d0:	699b      	ldr	r3, [r3, #24]
 80054d2:	b298      	uxth	r0, r3
 80054d4:	79fb      	ldrb	r3, [r7, #7]
 80054d6:	9300      	str	r3, [sp, #0]
 80054d8:	4603      	mov	r3, r0
 80054da:	68f8      	ldr	r0, [r7, #12]
 80054dc:	f000 fade 	bl	8005a9c <USB_WritePacket>
 80054e0:	e0d2      	b.n	8005688 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80054e2:	69bb      	ldr	r3, [r7, #24]
 80054e4:	015a      	lsls	r2, r3, #5
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	4413      	add	r3, r2
 80054ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054ee:	691b      	ldr	r3, [r3, #16]
 80054f0:	69ba      	ldr	r2, [r7, #24]
 80054f2:	0151      	lsls	r1, r2, #5
 80054f4:	69fa      	ldr	r2, [r7, #28]
 80054f6:	440a      	add	r2, r1
 80054f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80054fc:	0cdb      	lsrs	r3, r3, #19
 80054fe:	04db      	lsls	r3, r3, #19
 8005500:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	015a      	lsls	r2, r3, #5
 8005506:	69fb      	ldr	r3, [r7, #28]
 8005508:	4413      	add	r3, r2
 800550a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	69ba      	ldr	r2, [r7, #24]
 8005512:	0151      	lsls	r1, r2, #5
 8005514:	69fa      	ldr	r2, [r7, #28]
 8005516:	440a      	add	r2, r1
 8005518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005520:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005524:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	699b      	ldr	r3, [r3, #24]
 800552a:	2b00      	cmp	r3, #0
 800552c:	d126      	bne.n	800557c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800552e:	69bb      	ldr	r3, [r7, #24]
 8005530:	015a      	lsls	r2, r3, #5
 8005532:	69fb      	ldr	r3, [r7, #28]
 8005534:	4413      	add	r3, r2
 8005536:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553a:	691a      	ldr	r2, [r3, #16]
 800553c:	68bb      	ldr	r3, [r7, #8]
 800553e:	68db      	ldr	r3, [r3, #12]
 8005540:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005544:	69b9      	ldr	r1, [r7, #24]
 8005546:	0148      	lsls	r0, r1, #5
 8005548:	69f9      	ldr	r1, [r7, #28]
 800554a:	4401      	add	r1, r0
 800554c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005550:	4313      	orrs	r3, r2
 8005552:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005554:	69bb      	ldr	r3, [r7, #24]
 8005556:	015a      	lsls	r2, r3, #5
 8005558:	69fb      	ldr	r3, [r7, #28]
 800555a:	4413      	add	r3, r2
 800555c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005560:	691b      	ldr	r3, [r3, #16]
 8005562:	69ba      	ldr	r2, [r7, #24]
 8005564:	0151      	lsls	r1, r2, #5
 8005566:	69fa      	ldr	r2, [r7, #28]
 8005568:	440a      	add	r2, r1
 800556a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005572:	6113      	str	r3, [r2, #16]
 8005574:	e03a      	b.n	80055ec <USB_EPStartXfer+0x3e4>
 8005576:	bf00      	nop
 8005578:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 800557c:	68bb      	ldr	r3, [r7, #8]
 800557e:	699a      	ldr	r2, [r3, #24]
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	4413      	add	r3, r2
 8005586:	1e5a      	subs	r2, r3, #1
 8005588:	68bb      	ldr	r3, [r7, #8]
 800558a:	68db      	ldr	r3, [r3, #12]
 800558c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005590:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005592:	68bb      	ldr	r3, [r7, #8]
 8005594:	68db      	ldr	r3, [r3, #12]
 8005596:	8afa      	ldrh	r2, [r7, #22]
 8005598:	fb03 f202 	mul.w	r2, r3, r2
 800559c:	68bb      	ldr	r3, [r7, #8]
 800559e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80055a0:	69bb      	ldr	r3, [r7, #24]
 80055a2:	015a      	lsls	r2, r3, #5
 80055a4:	69fb      	ldr	r3, [r7, #28]
 80055a6:	4413      	add	r3, r2
 80055a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ac:	691a      	ldr	r2, [r3, #16]
 80055ae:	8afb      	ldrh	r3, [r7, #22]
 80055b0:	04d9      	lsls	r1, r3, #19
 80055b2:	4b38      	ldr	r3, [pc, #224]	; (8005694 <USB_EPStartXfer+0x48c>)
 80055b4:	400b      	ands	r3, r1
 80055b6:	69b9      	ldr	r1, [r7, #24]
 80055b8:	0148      	lsls	r0, r1, #5
 80055ba:	69f9      	ldr	r1, [r7, #28]
 80055bc:	4401      	add	r1, r0
 80055be:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055c2:	4313      	orrs	r3, r2
 80055c4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	015a      	lsls	r2, r3, #5
 80055ca:	69fb      	ldr	r3, [r7, #28]
 80055cc:	4413      	add	r3, r2
 80055ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d2:	691a      	ldr	r2, [r3, #16]
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	69db      	ldr	r3, [r3, #28]
 80055d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055dc:	69b9      	ldr	r1, [r7, #24]
 80055de:	0148      	lsls	r0, r1, #5
 80055e0:	69f9      	ldr	r1, [r7, #28]
 80055e2:	4401      	add	r1, r0
 80055e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055e8:	4313      	orrs	r3, r2
 80055ea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80055ec:	79fb      	ldrb	r3, [r7, #7]
 80055ee:	2b01      	cmp	r3, #1
 80055f0:	d10d      	bne.n	800560e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	691b      	ldr	r3, [r3, #16]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d009      	beq.n	800560e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	6919      	ldr	r1, [r3, #16]
 80055fe:	69bb      	ldr	r3, [r7, #24]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	69fb      	ldr	r3, [r7, #28]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	460a      	mov	r2, r1
 800560c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	791b      	ldrb	r3, [r3, #4]
 8005612:	2b01      	cmp	r3, #1
 8005614:	d128      	bne.n	8005668 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005616:	69fb      	ldr	r3, [r7, #28]
 8005618:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005622:	2b00      	cmp	r3, #0
 8005624:	d110      	bne.n	8005648 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005626:	69bb      	ldr	r3, [r7, #24]
 8005628:	015a      	lsls	r2, r3, #5
 800562a:	69fb      	ldr	r3, [r7, #28]
 800562c:	4413      	add	r3, r2
 800562e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	69ba      	ldr	r2, [r7, #24]
 8005636:	0151      	lsls	r1, r2, #5
 8005638:	69fa      	ldr	r2, [r7, #28]
 800563a:	440a      	add	r2, r1
 800563c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005640:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005644:	6013      	str	r3, [r2, #0]
 8005646:	e00f      	b.n	8005668 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005648:	69bb      	ldr	r3, [r7, #24]
 800564a:	015a      	lsls	r2, r3, #5
 800564c:	69fb      	ldr	r3, [r7, #28]
 800564e:	4413      	add	r3, r2
 8005650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	69ba      	ldr	r2, [r7, #24]
 8005658:	0151      	lsls	r1, r2, #5
 800565a:	69fa      	ldr	r2, [r7, #28]
 800565c:	440a      	add	r2, r1
 800565e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005662:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005666:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005668:	69bb      	ldr	r3, [r7, #24]
 800566a:	015a      	lsls	r2, r3, #5
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	4413      	add	r3, r2
 8005670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	69ba      	ldr	r2, [r7, #24]
 8005678:	0151      	lsls	r1, r2, #5
 800567a:	69fa      	ldr	r2, [r7, #28]
 800567c:	440a      	add	r2, r1
 800567e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005682:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005686:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3720      	adds	r7, #32
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}
 8005692:	bf00      	nop
 8005694:	1ff80000 	.word	0x1ff80000

08005698 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005698:	b480      	push	{r7}
 800569a:	b087      	sub	sp, #28
 800569c:	af00      	add	r7, sp, #0
 800569e:	60f8      	str	r0, [r7, #12]
 80056a0:	60b9      	str	r1, [r7, #8]
 80056a2:	4613      	mov	r3, r2
 80056a4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80056aa:	68bb      	ldr	r3, [r7, #8]
 80056ac:	781b      	ldrb	r3, [r3, #0]
 80056ae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	785b      	ldrb	r3, [r3, #1]
 80056b4:	2b01      	cmp	r3, #1
 80056b6:	f040 80ce 	bne.w	8005856 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	699b      	ldr	r3, [r3, #24]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d132      	bne.n	8005728 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80056c2:	693b      	ldr	r3, [r7, #16]
 80056c4:	015a      	lsls	r2, r3, #5
 80056c6:	697b      	ldr	r3, [r7, #20]
 80056c8:	4413      	add	r3, r2
 80056ca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ce:	691b      	ldr	r3, [r3, #16]
 80056d0:	693a      	ldr	r2, [r7, #16]
 80056d2:	0151      	lsls	r1, r2, #5
 80056d4:	697a      	ldr	r2, [r7, #20]
 80056d6:	440a      	add	r2, r1
 80056d8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056dc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80056e0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80056e4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	015a      	lsls	r2, r3, #5
 80056ea:	697b      	ldr	r3, [r7, #20]
 80056ec:	4413      	add	r3, r2
 80056ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056f2:	691b      	ldr	r3, [r3, #16]
 80056f4:	693a      	ldr	r2, [r7, #16]
 80056f6:	0151      	lsls	r1, r2, #5
 80056f8:	697a      	ldr	r2, [r7, #20]
 80056fa:	440a      	add	r2, r1
 80056fc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005700:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005704:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005706:	693b      	ldr	r3, [r7, #16]
 8005708:	015a      	lsls	r2, r3, #5
 800570a:	697b      	ldr	r3, [r7, #20]
 800570c:	4413      	add	r3, r2
 800570e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005712:	691b      	ldr	r3, [r3, #16]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	0151      	lsls	r1, r2, #5
 8005718:	697a      	ldr	r2, [r7, #20]
 800571a:	440a      	add	r2, r1
 800571c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005720:	0cdb      	lsrs	r3, r3, #19
 8005722:	04db      	lsls	r3, r3, #19
 8005724:	6113      	str	r3, [r2, #16]
 8005726:	e04e      	b.n	80057c6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005728:	693b      	ldr	r3, [r7, #16]
 800572a:	015a      	lsls	r2, r3, #5
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	4413      	add	r3, r2
 8005730:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	693a      	ldr	r2, [r7, #16]
 8005738:	0151      	lsls	r1, r2, #5
 800573a:	697a      	ldr	r2, [r7, #20]
 800573c:	440a      	add	r2, r1
 800573e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005742:	0cdb      	lsrs	r3, r3, #19
 8005744:	04db      	lsls	r3, r3, #19
 8005746:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	015a      	lsls	r2, r3, #5
 800574c:	697b      	ldr	r3, [r7, #20]
 800574e:	4413      	add	r3, r2
 8005750:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005754:	691b      	ldr	r3, [r3, #16]
 8005756:	693a      	ldr	r2, [r7, #16]
 8005758:	0151      	lsls	r1, r2, #5
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	440a      	add	r2, r1
 800575e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005762:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005766:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800576a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800576c:	68bb      	ldr	r3, [r7, #8]
 800576e:	699a      	ldr	r2, [r3, #24]
 8005770:	68bb      	ldr	r3, [r7, #8]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	429a      	cmp	r2, r3
 8005776:	d903      	bls.n	8005780 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	68da      	ldr	r2, [r3, #12]
 800577c:	68bb      	ldr	r3, [r7, #8]
 800577e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	015a      	lsls	r2, r3, #5
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	4413      	add	r3, r2
 8005788:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800578c:	691b      	ldr	r3, [r3, #16]
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	0151      	lsls	r1, r2, #5
 8005792:	697a      	ldr	r2, [r7, #20]
 8005794:	440a      	add	r2, r1
 8005796:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800579a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800579e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80057a0:	693b      	ldr	r3, [r7, #16]
 80057a2:	015a      	lsls	r2, r3, #5
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	4413      	add	r3, r2
 80057a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80057b6:	6939      	ldr	r1, [r7, #16]
 80057b8:	0148      	lsls	r0, r1, #5
 80057ba:	6979      	ldr	r1, [r7, #20]
 80057bc:	4401      	add	r1, r0
 80057be:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80057c2:	4313      	orrs	r3, r2
 80057c4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80057c6:	79fb      	ldrb	r3, [r7, #7]
 80057c8:	2b01      	cmp	r3, #1
 80057ca:	d11e      	bne.n	800580a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80057cc:	68bb      	ldr	r3, [r7, #8]
 80057ce:	695b      	ldr	r3, [r3, #20]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d009      	beq.n	80057e8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80057d4:	693b      	ldr	r3, [r7, #16]
 80057d6:	015a      	lsls	r2, r3, #5
 80057d8:	697b      	ldr	r3, [r7, #20]
 80057da:	4413      	add	r3, r2
 80057dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057e0:	461a      	mov	r2, r3
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	695b      	ldr	r3, [r3, #20]
 80057e6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80057e8:	693b      	ldr	r3, [r7, #16]
 80057ea:	015a      	lsls	r2, r3, #5
 80057ec:	697b      	ldr	r3, [r7, #20]
 80057ee:	4413      	add	r3, r2
 80057f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	0151      	lsls	r1, r2, #5
 80057fa:	697a      	ldr	r2, [r7, #20]
 80057fc:	440a      	add	r2, r1
 80057fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005802:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	e097      	b.n	800593a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800580a:	693b      	ldr	r3, [r7, #16]
 800580c:	015a      	lsls	r2, r3, #5
 800580e:	697b      	ldr	r3, [r7, #20]
 8005810:	4413      	add	r3, r2
 8005812:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005816:	681b      	ldr	r3, [r3, #0]
 8005818:	693a      	ldr	r2, [r7, #16]
 800581a:	0151      	lsls	r1, r2, #5
 800581c:	697a      	ldr	r2, [r7, #20]
 800581e:	440a      	add	r2, r1
 8005820:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005824:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005828:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	2b00      	cmp	r3, #0
 8005830:	f000 8083 	beq.w	800593a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005834:	697b      	ldr	r3, [r7, #20]
 8005836:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800583a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	f003 030f 	and.w	r3, r3, #15
 8005844:	2101      	movs	r1, #1
 8005846:	fa01 f303 	lsl.w	r3, r1, r3
 800584a:	6979      	ldr	r1, [r7, #20]
 800584c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005850:	4313      	orrs	r3, r2
 8005852:	634b      	str	r3, [r1, #52]	; 0x34
 8005854:	e071      	b.n	800593a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	015a      	lsls	r2, r3, #5
 800585a:	697b      	ldr	r3, [r7, #20]
 800585c:	4413      	add	r3, r2
 800585e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005862:	691b      	ldr	r3, [r3, #16]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	0151      	lsls	r1, r2, #5
 8005868:	697a      	ldr	r2, [r7, #20]
 800586a:	440a      	add	r2, r1
 800586c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005870:	0cdb      	lsrs	r3, r3, #19
 8005872:	04db      	lsls	r3, r3, #19
 8005874:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	015a      	lsls	r2, r3, #5
 800587a:	697b      	ldr	r3, [r7, #20]
 800587c:	4413      	add	r3, r2
 800587e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005882:	691b      	ldr	r3, [r3, #16]
 8005884:	693a      	ldr	r2, [r7, #16]
 8005886:	0151      	lsls	r1, r2, #5
 8005888:	697a      	ldr	r2, [r7, #20]
 800588a:	440a      	add	r2, r1
 800588c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005890:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005894:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005898:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800589a:	68bb      	ldr	r3, [r7, #8]
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d003      	beq.n	80058aa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	68da      	ldr	r2, [r3, #12]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	68da      	ldr	r2, [r3, #12]
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80058b2:	693b      	ldr	r3, [r7, #16]
 80058b4:	015a      	lsls	r2, r3, #5
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	4413      	add	r3, r2
 80058ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058be:	691b      	ldr	r3, [r3, #16]
 80058c0:	693a      	ldr	r2, [r7, #16]
 80058c2:	0151      	lsls	r1, r2, #5
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	440a      	add	r2, r1
 80058c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80058cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80058d0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	015a      	lsls	r2, r3, #5
 80058d6:	697b      	ldr	r3, [r7, #20]
 80058d8:	4413      	add	r3, r2
 80058da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058de:	691a      	ldr	r2, [r3, #16]
 80058e0:	68bb      	ldr	r3, [r7, #8]
 80058e2:	69db      	ldr	r3, [r3, #28]
 80058e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80058e8:	6939      	ldr	r1, [r7, #16]
 80058ea:	0148      	lsls	r0, r1, #5
 80058ec:	6979      	ldr	r1, [r7, #20]
 80058ee:	4401      	add	r1, r0
 80058f0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80058f4:	4313      	orrs	r3, r2
 80058f6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80058f8:	79fb      	ldrb	r3, [r7, #7]
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d10d      	bne.n	800591a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	691b      	ldr	r3, [r3, #16]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	6919      	ldr	r1, [r3, #16]
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	015a      	lsls	r2, r3, #5
 800590e:	697b      	ldr	r3, [r7, #20]
 8005910:	4413      	add	r3, r2
 8005912:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005916:	460a      	mov	r2, r1
 8005918:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800591a:	693b      	ldr	r3, [r7, #16]
 800591c:	015a      	lsls	r2, r3, #5
 800591e:	697b      	ldr	r3, [r7, #20]
 8005920:	4413      	add	r3, r2
 8005922:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	693a      	ldr	r2, [r7, #16]
 800592a:	0151      	lsls	r1, r2, #5
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	440a      	add	r2, r1
 8005930:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005934:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005938:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800593a:	2300      	movs	r3, #0
}
 800593c:	4618      	mov	r0, r3
 800593e:	371c      	adds	r7, #28
 8005940:	46bd      	mov	sp, r7
 8005942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005946:	4770      	bx	lr

08005948 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005948:	b480      	push	{r7}
 800594a:	b087      	sub	sp, #28
 800594c:	af00      	add	r7, sp, #0
 800594e:	6078      	str	r0, [r7, #4]
 8005950:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005952:	2300      	movs	r3, #0
 8005954:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005956:	2300      	movs	r3, #0
 8005958:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800595e:	683b      	ldr	r3, [r7, #0]
 8005960:	785b      	ldrb	r3, [r3, #1]
 8005962:	2b01      	cmp	r3, #1
 8005964:	d14a      	bne.n	80059fc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	015a      	lsls	r2, r3, #5
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	4413      	add	r3, r2
 8005970:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800597a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800597e:	f040 8086 	bne.w	8005a8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	781b      	ldrb	r3, [r3, #0]
 8005986:	015a      	lsls	r2, r3, #5
 8005988:	693b      	ldr	r3, [r7, #16]
 800598a:	4413      	add	r3, r2
 800598c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	683a      	ldr	r2, [r7, #0]
 8005994:	7812      	ldrb	r2, [r2, #0]
 8005996:	0151      	lsls	r1, r2, #5
 8005998:	693a      	ldr	r2, [r7, #16]
 800599a:	440a      	add	r2, r1
 800599c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059a0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80059a4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80059a6:	683b      	ldr	r3, [r7, #0]
 80059a8:	781b      	ldrb	r3, [r3, #0]
 80059aa:	015a      	lsls	r2, r3, #5
 80059ac:	693b      	ldr	r3, [r7, #16]
 80059ae:	4413      	add	r3, r2
 80059b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	683a      	ldr	r2, [r7, #0]
 80059b8:	7812      	ldrb	r2, [r2, #0]
 80059ba:	0151      	lsls	r1, r2, #5
 80059bc:	693a      	ldr	r2, [r7, #16]
 80059be:	440a      	add	r2, r1
 80059c0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80059c8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	3301      	adds	r3, #1
 80059ce:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d902      	bls.n	80059e0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80059da:	2301      	movs	r3, #1
 80059dc:	75fb      	strb	r3, [r7, #23]
          break;
 80059de:	e056      	b.n	8005a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80059e0:	683b      	ldr	r3, [r7, #0]
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	015a      	lsls	r2, r3, #5
 80059e6:	693b      	ldr	r3, [r7, #16]
 80059e8:	4413      	add	r3, r2
 80059ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059f8:	d0e7      	beq.n	80059ca <USB_EPStopXfer+0x82>
 80059fa:	e048      	b.n	8005a8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059fc:	683b      	ldr	r3, [r7, #0]
 80059fe:	781b      	ldrb	r3, [r3, #0]
 8005a00:	015a      	lsls	r2, r3, #5
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	4413      	add	r3, r2
 8005a06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a14:	d13b      	bne.n	8005a8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	781b      	ldrb	r3, [r3, #0]
 8005a1a:	015a      	lsls	r2, r3, #5
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	4413      	add	r3, r2
 8005a20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	683a      	ldr	r2, [r7, #0]
 8005a28:	7812      	ldrb	r2, [r2, #0]
 8005a2a:	0151      	lsls	r1, r2, #5
 8005a2c:	693a      	ldr	r2, [r7, #16]
 8005a2e:	440a      	add	r2, r1
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005a38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	781b      	ldrb	r3, [r3, #0]
 8005a3e:	015a      	lsls	r2, r3, #5
 8005a40:	693b      	ldr	r3, [r7, #16]
 8005a42:	4413      	add	r3, r2
 8005a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	683a      	ldr	r2, [r7, #0]
 8005a4c:	7812      	ldrb	r2, [r2, #0]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	693a      	ldr	r2, [r7, #16]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005a5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	3301      	adds	r3, #1
 8005a62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	f242 7210 	movw	r2, #10000	; 0x2710
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d902      	bls.n	8005a74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005a6e:	2301      	movs	r3, #1
 8005a70:	75fb      	strb	r3, [r7, #23]
          break;
 8005a72:	e00c      	b.n	8005a8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005a74:	683b      	ldr	r3, [r7, #0]
 8005a76:	781b      	ldrb	r3, [r3, #0]
 8005a78:	015a      	lsls	r2, r3, #5
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	4413      	add	r3, r2
 8005a7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005a88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005a8c:	d0e7      	beq.n	8005a5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005a8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	371c      	adds	r7, #28
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b089      	sub	sp, #36	; 0x24
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	60f8      	str	r0, [r7, #12]
 8005aa4:	60b9      	str	r1, [r7, #8]
 8005aa6:	4611      	mov	r1, r2
 8005aa8:	461a      	mov	r2, r3
 8005aaa:	460b      	mov	r3, r1
 8005aac:	71fb      	strb	r3, [r7, #7]
 8005aae:	4613      	mov	r3, r2
 8005ab0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8005aba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d123      	bne.n	8005b0a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005ac2:	88bb      	ldrh	r3, [r7, #4]
 8005ac4:	3303      	adds	r3, #3
 8005ac6:	089b      	lsrs	r3, r3, #2
 8005ac8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8005aca:	2300      	movs	r3, #0
 8005acc:	61bb      	str	r3, [r7, #24]
 8005ace:	e018      	b.n	8005b02 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005ad0:	79fb      	ldrb	r3, [r7, #7]
 8005ad2:	031a      	lsls	r2, r3, #12
 8005ad4:	697b      	ldr	r3, [r7, #20]
 8005ad6:	4413      	add	r3, r2
 8005ad8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005adc:	461a      	mov	r2, r3
 8005ade:	69fb      	ldr	r3, [r7, #28]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005ae4:	69fb      	ldr	r3, [r7, #28]
 8005ae6:	3301      	adds	r3, #1
 8005ae8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005aea:	69fb      	ldr	r3, [r7, #28]
 8005aec:	3301      	adds	r3, #1
 8005aee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005af0:	69fb      	ldr	r3, [r7, #28]
 8005af2:	3301      	adds	r3, #1
 8005af4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005af6:	69fb      	ldr	r3, [r7, #28]
 8005af8:	3301      	adds	r3, #1
 8005afa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	3301      	adds	r3, #1
 8005b00:	61bb      	str	r3, [r7, #24]
 8005b02:	69ba      	ldr	r2, [r7, #24]
 8005b04:	693b      	ldr	r3, [r7, #16]
 8005b06:	429a      	cmp	r2, r3
 8005b08:	d3e2      	bcc.n	8005ad0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005b0a:	2300      	movs	r3, #0
}
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	3724      	adds	r7, #36	; 0x24
 8005b10:	46bd      	mov	sp, r7
 8005b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b16:	4770      	bx	lr

08005b18 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005b18:	b480      	push	{r7}
 8005b1a:	b08b      	sub	sp, #44	; 0x2c
 8005b1c:	af00      	add	r7, sp, #0
 8005b1e:	60f8      	str	r0, [r7, #12]
 8005b20:	60b9      	str	r1, [r7, #8]
 8005b22:	4613      	mov	r3, r2
 8005b24:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005b2a:	68bb      	ldr	r3, [r7, #8]
 8005b2c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005b2e:	88fb      	ldrh	r3, [r7, #6]
 8005b30:	089b      	lsrs	r3, r3, #2
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005b36:	88fb      	ldrh	r3, [r7, #6]
 8005b38:	f003 0303 	and.w	r3, r3, #3
 8005b3c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005b3e:	2300      	movs	r3, #0
 8005b40:	623b      	str	r3, [r7, #32]
 8005b42:	e014      	b.n	8005b6e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005b44:	69bb      	ldr	r3, [r7, #24]
 8005b46:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b4a:	681a      	ldr	r2, [r3, #0]
 8005b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b4e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b52:	3301      	adds	r3, #1
 8005b54:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b58:	3301      	adds	r3, #1
 8005b5a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b5e:	3301      	adds	r3, #1
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b64:	3301      	adds	r3, #1
 8005b66:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005b68:	6a3b      	ldr	r3, [r7, #32]
 8005b6a:	3301      	adds	r3, #1
 8005b6c:	623b      	str	r3, [r7, #32]
 8005b6e:	6a3a      	ldr	r2, [r7, #32]
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	429a      	cmp	r2, r3
 8005b74:	d3e6      	bcc.n	8005b44 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005b76:	8bfb      	ldrh	r3, [r7, #30]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d01e      	beq.n	8005bba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005b7c:	2300      	movs	r3, #0
 8005b7e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005b80:	69bb      	ldr	r3, [r7, #24]
 8005b82:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b86:	461a      	mov	r2, r3
 8005b88:	f107 0310 	add.w	r3, r7, #16
 8005b8c:	6812      	ldr	r2, [r2, #0]
 8005b8e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005b90:	693a      	ldr	r2, [r7, #16]
 8005b92:	6a3b      	ldr	r3, [r7, #32]
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	fa22 f303 	lsr.w	r3, r2, r3
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ba0:	701a      	strb	r2, [r3, #0]
      i++;
 8005ba2:	6a3b      	ldr	r3, [r7, #32]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	623b      	str	r3, [r7, #32]
      pDest++;
 8005ba8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005baa:	3301      	adds	r3, #1
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005bae:	8bfb      	ldrh	r3, [r7, #30]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005bb4:	8bfb      	ldrh	r3, [r7, #30]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d1ea      	bne.n	8005b90 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8005bba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	372c      	adds	r7, #44	; 0x2c
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc6:	4770      	bx	lr

08005bc8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	6078      	str	r0, [r7, #4]
 8005bd0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	781b      	ldrb	r3, [r3, #0]
 8005bda:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	785b      	ldrb	r3, [r3, #1]
 8005be0:	2b01      	cmp	r3, #1
 8005be2:	d12c      	bne.n	8005c3e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005be4:	68bb      	ldr	r3, [r7, #8]
 8005be6:	015a      	lsls	r2, r3, #5
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4413      	add	r3, r2
 8005bec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	db12      	blt.n	8005c1c <USB_EPSetStall+0x54>
 8005bf6:	68bb      	ldr	r3, [r7, #8]
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00f      	beq.n	8005c1c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005bfc:	68bb      	ldr	r3, [r7, #8]
 8005bfe:	015a      	lsls	r2, r3, #5
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	4413      	add	r3, r2
 8005c04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	68ba      	ldr	r2, [r7, #8]
 8005c0c:	0151      	lsls	r1, r2, #5
 8005c0e:	68fa      	ldr	r2, [r7, #12]
 8005c10:	440a      	add	r2, r1
 8005c12:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c16:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c1a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005c1c:	68bb      	ldr	r3, [r7, #8]
 8005c1e:	015a      	lsls	r2, r3, #5
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68ba      	ldr	r2, [r7, #8]
 8005c2c:	0151      	lsls	r1, r2, #5
 8005c2e:	68fa      	ldr	r2, [r7, #12]
 8005c30:	440a      	add	r2, r1
 8005c32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c3a:	6013      	str	r3, [r2, #0]
 8005c3c:	e02b      	b.n	8005c96 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005c3e:	68bb      	ldr	r3, [r7, #8]
 8005c40:	015a      	lsls	r2, r3, #5
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	4413      	add	r3, r2
 8005c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	db12      	blt.n	8005c76 <USB_EPSetStall+0xae>
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d00f      	beq.n	8005c76 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	015a      	lsls	r2, r3, #5
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	4413      	add	r3, r2
 8005c5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68ba      	ldr	r2, [r7, #8]
 8005c66:	0151      	lsls	r1, r2, #5
 8005c68:	68fa      	ldr	r2, [r7, #12]
 8005c6a:	440a      	add	r2, r1
 8005c6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c70:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005c74:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	015a      	lsls	r2, r3, #5
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	4413      	add	r3, r2
 8005c7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68ba      	ldr	r2, [r7, #8]
 8005c86:	0151      	lsls	r1, r2, #5
 8005c88:	68fa      	ldr	r2, [r7, #12]
 8005c8a:	440a      	add	r2, r1
 8005c8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005c90:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005c94:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005c96:	2300      	movs	r3, #0
}
 8005c98:	4618      	mov	r0, r3
 8005c9a:	3714      	adds	r7, #20
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca2:	4770      	bx	lr

08005ca4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b085      	sub	sp, #20
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	6078      	str	r0, [r7, #4]
 8005cac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005cb2:	683b      	ldr	r3, [r7, #0]
 8005cb4:	781b      	ldrb	r3, [r3, #0]
 8005cb6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005cb8:	683b      	ldr	r3, [r7, #0]
 8005cba:	785b      	ldrb	r3, [r3, #1]
 8005cbc:	2b01      	cmp	r3, #1
 8005cbe:	d128      	bne.n	8005d12 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005cc0:	68bb      	ldr	r3, [r7, #8]
 8005cc2:	015a      	lsls	r2, r3, #5
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	4413      	add	r3, r2
 8005cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	68ba      	ldr	r2, [r7, #8]
 8005cd0:	0151      	lsls	r1, r2, #5
 8005cd2:	68fa      	ldr	r2, [r7, #12]
 8005cd4:	440a      	add	r2, r1
 8005cd6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cda:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005cde:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005ce0:	683b      	ldr	r3, [r7, #0]
 8005ce2:	791b      	ldrb	r3, [r3, #4]
 8005ce4:	2b03      	cmp	r3, #3
 8005ce6:	d003      	beq.n	8005cf0 <USB_EPClearStall+0x4c>
 8005ce8:	683b      	ldr	r3, [r7, #0]
 8005cea:	791b      	ldrb	r3, [r3, #4]
 8005cec:	2b02      	cmp	r3, #2
 8005cee:	d138      	bne.n	8005d62 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005cf0:	68bb      	ldr	r3, [r7, #8]
 8005cf2:	015a      	lsls	r2, r3, #5
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	4413      	add	r3, r2
 8005cf8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68ba      	ldr	r2, [r7, #8]
 8005d00:	0151      	lsls	r1, r2, #5
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	440a      	add	r2, r1
 8005d06:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d0e:	6013      	str	r3, [r2, #0]
 8005d10:	e027      	b.n	8005d62 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	015a      	lsls	r2, r3, #5
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	4413      	add	r3, r2
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	68ba      	ldr	r2, [r7, #8]
 8005d22:	0151      	lsls	r1, r2, #5
 8005d24:	68fa      	ldr	r2, [r7, #12]
 8005d26:	440a      	add	r2, r1
 8005d28:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d2c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005d30:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005d32:	683b      	ldr	r3, [r7, #0]
 8005d34:	791b      	ldrb	r3, [r3, #4]
 8005d36:	2b03      	cmp	r3, #3
 8005d38:	d003      	beq.n	8005d42 <USB_EPClearStall+0x9e>
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	791b      	ldrb	r3, [r3, #4]
 8005d3e:	2b02      	cmp	r3, #2
 8005d40:	d10f      	bne.n	8005d62 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005d42:	68bb      	ldr	r3, [r7, #8]
 8005d44:	015a      	lsls	r2, r3, #5
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	4413      	add	r3, r2
 8005d4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68ba      	ldr	r2, [r7, #8]
 8005d52:	0151      	lsls	r1, r2, #5
 8005d54:	68fa      	ldr	r2, [r7, #12]
 8005d56:	440a      	add	r2, r1
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d60:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005d62:	2300      	movs	r3, #0
}
 8005d64:	4618      	mov	r0, r3
 8005d66:	3714      	adds	r7, #20
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b085      	sub	sp, #20
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
 8005d78:	460b      	mov	r3, r1
 8005d7a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	68fa      	ldr	r2, [r7, #12]
 8005d8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005d8e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005d92:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005d9a:	681a      	ldr	r2, [r3, #0]
 8005d9c:	78fb      	ldrb	r3, [r7, #3]
 8005d9e:	011b      	lsls	r3, r3, #4
 8005da0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005da4:	68f9      	ldr	r1, [r7, #12]
 8005da6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005daa:	4313      	orrs	r3, r2
 8005dac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005dae:	2300      	movs	r3, #0
}
 8005db0:	4618      	mov	r0, r3
 8005db2:	3714      	adds	r7, #20
 8005db4:	46bd      	mov	sp, r7
 8005db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dba:	4770      	bx	lr

08005dbc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dbc:	b480      	push	{r7}
 8005dbe:	b085      	sub	sp, #20
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	68fa      	ldr	r2, [r7, #12]
 8005dd2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005dd6:	f023 0303 	bic.w	r3, r3, #3
 8005dda:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	68fa      	ldr	r2, [r7, #12]
 8005de6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005dea:	f023 0302 	bic.w	r3, r3, #2
 8005dee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005df0:	2300      	movs	r3, #0
}
 8005df2:	4618      	mov	r0, r3
 8005df4:	3714      	adds	r7, #20
 8005df6:	46bd      	mov	sp, r7
 8005df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dfc:	4770      	bx	lr

08005dfe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005dfe:	b480      	push	{r7}
 8005e00:	b085      	sub	sp, #20
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005e18:	f023 0303 	bic.w	r3, r3, #3
 8005e1c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e24:	685b      	ldr	r3, [r3, #4]
 8005e26:	68fa      	ldr	r2, [r7, #12]
 8005e28:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005e2c:	f043 0302 	orr.w	r3, r3, #2
 8005e30:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005e32:	2300      	movs	r3, #0
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3714      	adds	r7, #20
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	695b      	ldr	r3, [r3, #20]
 8005e4c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	699b      	ldr	r3, [r3, #24]
 8005e52:	68fa      	ldr	r2, [r7, #12]
 8005e54:	4013      	ands	r3, r2
 8005e56:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005e58:	68fb      	ldr	r3, [r7, #12]
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3714      	adds	r7, #20
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e64:	4770      	bx	lr

08005e66 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e66:	b480      	push	{r7}
 8005e68:	b085      	sub	sp, #20
 8005e6a:	af00      	add	r7, sp, #0
 8005e6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e78:	699b      	ldr	r3, [r3, #24]
 8005e7a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005e82:	69db      	ldr	r3, [r3, #28]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	4013      	ands	r3, r2
 8005e88:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	0c1b      	lsrs	r3, r3, #16
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3714      	adds	r7, #20
 8005e92:	46bd      	mov	sp, r7
 8005e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e98:	4770      	bx	lr

08005e9a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005e9a:	b480      	push	{r7}
 8005e9c:	b085      	sub	sp, #20
 8005e9e:	af00      	add	r7, sp, #0
 8005ea0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eac:	699b      	ldr	r3, [r3, #24]
 8005eae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005eb6:	69db      	ldr	r3, [r3, #28]
 8005eb8:	68ba      	ldr	r2, [r7, #8]
 8005eba:	4013      	ands	r3, r2
 8005ebc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	b29b      	uxth	r3, r3
}
 8005ec2:	4618      	mov	r0, r3
 8005ec4:	3714      	adds	r7, #20
 8005ec6:	46bd      	mov	sp, r7
 8005ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ecc:	4770      	bx	lr

08005ece <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ece:	b480      	push	{r7}
 8005ed0:	b085      	sub	sp, #20
 8005ed2:	af00      	add	r7, sp, #0
 8005ed4:	6078      	str	r0, [r7, #4]
 8005ed6:	460b      	mov	r3, r1
 8005ed8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005ede:	78fb      	ldrb	r3, [r7, #3]
 8005ee0:	015a      	lsls	r2, r3, #5
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	4413      	add	r3, r2
 8005ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005eea:	689b      	ldr	r3, [r3, #8]
 8005eec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ef4:	695b      	ldr	r3, [r3, #20]
 8005ef6:	68ba      	ldr	r2, [r7, #8]
 8005ef8:	4013      	ands	r3, r2
 8005efa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005efc:	68bb      	ldr	r3, [r7, #8]
}
 8005efe:	4618      	mov	r0, r3
 8005f00:	3714      	adds	r7, #20
 8005f02:	46bd      	mov	sp, r7
 8005f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f08:	4770      	bx	lr

08005f0a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	b087      	sub	sp, #28
 8005f0e:	af00      	add	r7, sp, #0
 8005f10:	6078      	str	r0, [r7, #4]
 8005f12:	460b      	mov	r3, r1
 8005f14:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005f1a:	697b      	ldr	r3, [r7, #20]
 8005f1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005f24:	697b      	ldr	r3, [r7, #20]
 8005f26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005f2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005f2c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005f2e:	78fb      	ldrb	r3, [r7, #3]
 8005f30:	f003 030f 	and.w	r3, r3, #15
 8005f34:	68fa      	ldr	r2, [r7, #12]
 8005f36:	fa22 f303 	lsr.w	r3, r2, r3
 8005f3a:	01db      	lsls	r3, r3, #7
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	693a      	ldr	r2, [r7, #16]
 8005f40:	4313      	orrs	r3, r2
 8005f42:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005f44:	78fb      	ldrb	r3, [r7, #3]
 8005f46:	015a      	lsls	r2, r3, #5
 8005f48:	697b      	ldr	r3, [r7, #20]
 8005f4a:	4413      	add	r3, r2
 8005f4c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f50:	689b      	ldr	r3, [r3, #8]
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4013      	ands	r3, r2
 8005f56:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005f58:	68bb      	ldr	r3, [r7, #8]
}
 8005f5a:	4618      	mov	r0, r3
 8005f5c:	371c      	adds	r7, #28
 8005f5e:	46bd      	mov	sp, r7
 8005f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f64:	4770      	bx	lr

08005f66 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005f66:	b480      	push	{r7}
 8005f68:	b083      	sub	sp, #12
 8005f6a:	af00      	add	r7, sp, #0
 8005f6c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	695b      	ldr	r3, [r3, #20]
 8005f72:	f003 0301 	and.w	r3, r3, #1
}
 8005f76:	4618      	mov	r0, r3
 8005f78:	370c      	adds	r7, #12
 8005f7a:	46bd      	mov	sp, r7
 8005f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f80:	4770      	bx	lr

08005f82 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005f82:	b480      	push	{r7}
 8005f84:	b085      	sub	sp, #20
 8005f86:	af00      	add	r7, sp, #0
 8005f88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005f9c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005fa0:	f023 0307 	bic.w	r3, r3, #7
 8005fa4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fac:	685b      	ldr	r3, [r3, #4]
 8005fae:	68fa      	ldr	r2, [r7, #12]
 8005fb0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005fb4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005fb8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005fba:	2300      	movs	r3, #0
}
 8005fbc:	4618      	mov	r0, r3
 8005fbe:	3714      	adds	r7, #20
 8005fc0:	46bd      	mov	sp, r7
 8005fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fc6:	4770      	bx	lr

08005fc8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005fc8:	b480      	push	{r7}
 8005fca:	b087      	sub	sp, #28
 8005fcc:	af00      	add	r7, sp, #0
 8005fce:	60f8      	str	r0, [r7, #12]
 8005fd0:	460b      	mov	r3, r1
 8005fd2:	607a      	str	r2, [r7, #4]
 8005fd4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	333c      	adds	r3, #60	; 0x3c
 8005fde:	3304      	adds	r3, #4
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005fe4:	693b      	ldr	r3, [r7, #16]
 8005fe6:	4a26      	ldr	r2, [pc, #152]	; (8006080 <USB_EP0_OutStart+0xb8>)
 8005fe8:	4293      	cmp	r3, r2
 8005fea:	d90a      	bls.n	8006002 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005fec:	697b      	ldr	r3, [r7, #20]
 8005fee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ff8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005ffc:	d101      	bne.n	8006002 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
 8006000:	e037      	b.n	8006072 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006008:	461a      	mov	r2, r3
 800600a:	2300      	movs	r3, #0
 800600c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800600e:	697b      	ldr	r3, [r7, #20]
 8006010:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006014:	691b      	ldr	r3, [r3, #16]
 8006016:	697a      	ldr	r2, [r7, #20]
 8006018:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800601c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006020:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8006022:	697b      	ldr	r3, [r7, #20]
 8006024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006028:	691b      	ldr	r3, [r3, #16]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006030:	f043 0318 	orr.w	r3, r3, #24
 8006034:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8006036:	697b      	ldr	r3, [r7, #20]
 8006038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800603c:	691b      	ldr	r3, [r3, #16]
 800603e:	697a      	ldr	r2, [r7, #20]
 8006040:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8006044:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8006048:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800604a:	7afb      	ldrb	r3, [r7, #11]
 800604c:	2b01      	cmp	r3, #1
 800604e:	d10f      	bne.n	8006070 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8006050:	697b      	ldr	r3, [r7, #20]
 8006052:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006056:	461a      	mov	r2, r3
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800605c:	697b      	ldr	r3, [r7, #20]
 800605e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	697a      	ldr	r2, [r7, #20]
 8006066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800606a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800606e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8006070:	2300      	movs	r3, #0
}
 8006072:	4618      	mov	r0, r3
 8006074:	371c      	adds	r7, #28
 8006076:	46bd      	mov	sp, r7
 8006078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	4f54300a 	.word	0x4f54300a

08006084 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006084:	b480      	push	{r7}
 8006086:	b085      	sub	sp, #20
 8006088:	af00      	add	r7, sp, #0
 800608a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800608c:	2300      	movs	r3, #0
 800608e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	3301      	adds	r3, #1
 8006094:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a13      	ldr	r2, [pc, #76]	; (80060e8 <USB_CoreReset+0x64>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d901      	bls.n	80060a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800609e:	2303      	movs	r3, #3
 80060a0:	e01b      	b.n	80060da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	daf2      	bge.n	8006090 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80060aa:	2300      	movs	r3, #0
 80060ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	691b      	ldr	r3, [r3, #16]
 80060b2:	f043 0201 	orr.w	r2, r3, #1
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	3301      	adds	r3, #1
 80060be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	4a09      	ldr	r2, [pc, #36]	; (80060e8 <USB_CoreReset+0x64>)
 80060c4:	4293      	cmp	r3, r2
 80060c6:	d901      	bls.n	80060cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80060c8:	2303      	movs	r3, #3
 80060ca:	e006      	b.n	80060da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	691b      	ldr	r3, [r3, #16]
 80060d0:	f003 0301 	and.w	r3, r3, #1
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d0f0      	beq.n	80060ba <USB_CoreReset+0x36>

  return HAL_OK;
 80060d8:	2300      	movs	r3, #0
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3714      	adds	r7, #20
 80060de:	46bd      	mov	sp, r7
 80060e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060e4:	4770      	bx	lr
 80060e6:	bf00      	nop
 80060e8:	00030d40 	.word	0x00030d40

080060ec <LL_mDelay>:
  *         will configure Systick to 1ms
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
void LL_mDelay(uint32_t Delay)
{
 80060ec:	b480      	push	{r7}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
  __IO uint32_t  tmp = SysTick->CTRL;  /* Clear the COUNTFLAG first */
 80060f4:	4b0f      	ldr	r3, [pc, #60]	; (8006134 <LL_mDelay+0x48>)
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	60fb      	str	r3, [r7, #12]
  /* Add this code to indicate that local variable is not used */
  ((void)tmp);
 80060fa:	68fb      	ldr	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if(Delay < LL_MAX_DELAY)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d00c      	beq.n	800611e <LL_mDelay+0x32>
  {
    Delay++;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	3301      	adds	r3, #1
 8006108:	607b      	str	r3, [r7, #4]
  }

  while (Delay)
 800610a:	e008      	b.n	800611e <LL_mDelay+0x32>
  {
    if((SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk) != 0U)
 800610c:	4b09      	ldr	r3, [pc, #36]	; (8006134 <LL_mDelay+0x48>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d002      	beq.n	800611e <LL_mDelay+0x32>
    {
      Delay--;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	3b01      	subs	r3, #1
 800611c:	607b      	str	r3, [r7, #4]
  while (Delay)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2b00      	cmp	r3, #0
 8006122:	d1f3      	bne.n	800610c <LL_mDelay+0x20>
    }
  }
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	3714      	adds	r7, #20
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop
 8006134:	e000e010 	.word	0xe000e010

08006138 <LL_SetSystemCoreClock>:
  * @note   Variable can be calculated also through SystemCoreClockUpdate function.
  * @param  HCLKFrequency HCLK frequency in Hz (can be calculated thanks to RCC helper macro)
  * @retval None
  */
void LL_SetSystemCoreClock(uint32_t HCLKFrequency)
{
 8006138:	b480      	push	{r7}
 800613a:	b083      	sub	sp, #12
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
  /* HCLK clock frequency */
  SystemCoreClock = HCLKFrequency;
 8006140:	4a04      	ldr	r2, [pc, #16]	; (8006154 <LL_SetSystemCoreClock+0x1c>)
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6013      	str	r3, [r2, #0]
}
 8006146:	bf00      	nop
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr
 8006152:	bf00      	nop
 8006154:	20000000 	.word	0x20000000

08006158 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b086      	sub	sp, #24
 800615c:	af00      	add	r7, sp, #0
 800615e:	60f8      	str	r0, [r7, #12]
 8006160:	60b9      	str	r1, [r7, #8]
 8006162:	4613      	mov	r3, r2
 8006164:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2b00      	cmp	r3, #0
 800616a:	d10a      	bne.n	8006182 <USBD_Init+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
 800616c:	4817      	ldr	r0, [pc, #92]	; (80061cc <USBD_Init+0x74>)
 800616e:	f001 fafd 	bl	800776c <iprintf>
 8006172:	4817      	ldr	r0, [pc, #92]	; (80061d0 <USBD_Init+0x78>)
 8006174:	f001 fafa 	bl	800776c <iprintf>
 8006178:	4816      	ldr	r0, [pc, #88]	; (80061d4 <USBD_Init+0x7c>)
 800617a:	f001 fb7d 	bl	8007878 <puts>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800617e:	2303      	movs	r3, #3
 8006180:	e01f      	b.n	80061c2 <USBD_Init+0x6a>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8006182:	68fb      	ldr	r3, [r7, #12]
 8006184:	2200      	movs	r2, #0
 8006186:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	2200      	movs	r2, #0
 800618e:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	2200      	movs	r2, #0
 8006196:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d003      	beq.n	80061a8 <USBD_Init+0x50>
  {
    pdev->pDesc = pdesc;
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	68ba      	ldr	r2, [r7, #8]
 80061a4:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	2201      	movs	r2, #1
 80061ac:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	79fa      	ldrb	r2, [r7, #7]
 80061b4:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80061b6:	68f8      	ldr	r0, [r7, #12]
 80061b8:	f7fb fd88 	bl	8001ccc <USBD_LL_Init>
 80061bc:	4603      	mov	r3, r0
 80061be:	75fb      	strb	r3, [r7, #23]

  return ret;
 80061c0:	7dfb      	ldrb	r3, [r7, #23]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3718      	adds	r7, #24
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	080087d4 	.word	0x080087d4
 80061d0:	080087e0 	.word	0x080087e0
 80061d4:	080087f8 	.word	0x080087f8

080061d8 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d10a      	bne.n	8006202 <USBD_RegisterClass+0x2a>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
 80061ec:	481a      	ldr	r0, [pc, #104]	; (8006258 <USBD_RegisterClass+0x80>)
 80061ee:	f001 fabd 	bl	800776c <iprintf>
 80061f2:	481a      	ldr	r0, [pc, #104]	; (800625c <USBD_RegisterClass+0x84>)
 80061f4:	f001 faba 	bl	800776c <iprintf>
 80061f8:	4819      	ldr	r0, [pc, #100]	; (8006260 <USBD_RegisterClass+0x88>)
 80061fa:	f001 fb3d 	bl	8007878 <puts>
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80061fe:	2303      	movs	r3, #3
 8006200:	e025      	b.n	800624e <USBD_RegisterClass+0x76>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	683a      	ldr	r2, [r7, #0]
 8006206:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	32ae      	adds	r2, #174	; 0xae
 8006214:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800621a:	2b00      	cmp	r3, #0
 800621c:	d00f      	beq.n	800623e <USBD_RegisterClass+0x66>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	32ae      	adds	r2, #174	; 0xae
 8006228:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800622e:	f107 020e 	add.w	r2, r7, #14
 8006232:	4610      	mov	r0, r2
 8006234:	4798      	blx	r3
 8006236:	4602      	mov	r2, r0
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006244:	1c5a      	adds	r2, r3, #1
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800624c:	2300      	movs	r3, #0
}
 800624e:	4618      	mov	r0, r3
 8006250:	3710      	adds	r7, #16
 8006252:	46bd      	mov	sp, r7
 8006254:	bd80      	pop	{r7, pc}
 8006256:	bf00      	nop
 8006258:	080087d4 	.word	0x080087d4
 800625c:	080087fc 	.word	0x080087fc
 8006260:	080087f8 	.word	0x080087f8

08006264 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006264:	b580      	push	{r7, lr}
 8006266:	b082      	sub	sp, #8
 8006268:	af00      	add	r7, sp, #0
 800626a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800626c:	6878      	ldr	r0, [r7, #4]
 800626e:	f7fb fd7f 	bl	8001d70 <USBD_LL_Start>
 8006272:	4603      	mov	r3, r0
}
 8006274:	4618      	mov	r0, r3
 8006276:	3708      	adds	r7, #8
 8006278:	46bd      	mov	sp, r7
 800627a:	bd80      	pop	{r7, pc}

0800627c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800627c:	b480      	push	{r7}
 800627e:	b083      	sub	sp, #12
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006284:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006286:	4618      	mov	r0, r3
 8006288:	370c      	adds	r7, #12
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr

08006292 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006292:	b580      	push	{r7, lr}
 8006294:	b084      	sub	sp, #16
 8006296:	af00      	add	r7, sp, #0
 8006298:	6078      	str	r0, [r7, #4]
 800629a:	460b      	mov	r3, r1
 800629c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800629e:	2300      	movs	r3, #0
 80062a0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d009      	beq.n	80062c0 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	78fa      	ldrb	r2, [r7, #3]
 80062b6:	4611      	mov	r1, r2
 80062b8:	6878      	ldr	r0, [r7, #4]
 80062ba:	4798      	blx	r3
 80062bc:	4603      	mov	r3, r0
 80062be:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80062c2:	4618      	mov	r0, r3
 80062c4:	3710      	adds	r7, #16
 80062c6:	46bd      	mov	sp, r7
 80062c8:	bd80      	pop	{r7, pc}

080062ca <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80062ca:	b580      	push	{r7, lr}
 80062cc:	b084      	sub	sp, #16
 80062ce:	af00      	add	r7, sp, #0
 80062d0:	6078      	str	r0, [r7, #4]
 80062d2:	460b      	mov	r3, r1
 80062d4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80062d6:	2300      	movs	r3, #0
 80062d8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062e0:	685b      	ldr	r3, [r3, #4]
 80062e2:	78fa      	ldrb	r2, [r7, #3]
 80062e4:	4611      	mov	r1, r2
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	4798      	blx	r3
 80062ea:	4603      	mov	r3, r0
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d001      	beq.n	80062f4 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80062f0:	2303      	movs	r3, #3
 80062f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062f6:	4618      	mov	r0, r3
 80062f8:	3710      	adds	r7, #16
 80062fa:	46bd      	mov	sp, r7
 80062fc:	bd80      	pop	{r7, pc}

080062fe <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80062fe:	b580      	push	{r7, lr}
 8006300:	b084      	sub	sp, #16
 8006302:	af00      	add	r7, sp, #0
 8006304:	6078      	str	r0, [r7, #4]
 8006306:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800630e:	6839      	ldr	r1, [r7, #0]
 8006310:	4618      	mov	r0, r3
 8006312:	f001 f8ce 	bl	80074b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2201      	movs	r2, #1
 800631a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006324:	461a      	mov	r2, r3
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006332:	f003 031f 	and.w	r3, r3, #31
 8006336:	2b02      	cmp	r3, #2
 8006338:	d01a      	beq.n	8006370 <USBD_LL_SetupStage+0x72>
 800633a:	2b02      	cmp	r3, #2
 800633c:	d822      	bhi.n	8006384 <USBD_LL_SetupStage+0x86>
 800633e:	2b00      	cmp	r3, #0
 8006340:	d002      	beq.n	8006348 <USBD_LL_SetupStage+0x4a>
 8006342:	2b01      	cmp	r3, #1
 8006344:	d00a      	beq.n	800635c <USBD_LL_SetupStage+0x5e>
 8006346:	e01d      	b.n	8006384 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800634e:	4619      	mov	r1, r3
 8006350:	6878      	ldr	r0, [r7, #4]
 8006352:	f000 fb25 	bl	80069a0 <USBD_StdDevReq>
 8006356:	4603      	mov	r3, r0
 8006358:	73fb      	strb	r3, [r7, #15]
      break;
 800635a:	e020      	b.n	800639e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006362:	4619      	mov	r1, r3
 8006364:	6878      	ldr	r0, [r7, #4]
 8006366:	f000 fb8d 	bl	8006a84 <USBD_StdItfReq>
 800636a:	4603      	mov	r3, r0
 800636c:	73fb      	strb	r3, [r7, #15]
      break;
 800636e:	e016      	b.n	800639e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006376:	4619      	mov	r1, r3
 8006378:	6878      	ldr	r0, [r7, #4]
 800637a:	f000 fbef 	bl	8006b5c <USBD_StdEPReq>
 800637e:	4603      	mov	r3, r0
 8006380:	73fb      	strb	r3, [r7, #15]
      break;
 8006382:	e00c      	b.n	800639e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800638a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800638e:	b2db      	uxtb	r3, r3
 8006390:	4619      	mov	r1, r3
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f7fb fd4c 	bl	8001e30 <USBD_LL_StallEP>
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
      break;
 800639c:	bf00      	nop
  }

  return ret;
 800639e:	7bfb      	ldrb	r3, [r7, #15]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	3710      	adds	r7, #16
 80063a4:	46bd      	mov	sp, r7
 80063a6:	bd80      	pop	{r7, pc}

080063a8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	460b      	mov	r3, r1
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80063b6:	2300      	movs	r3, #0
 80063b8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80063ba:	7afb      	ldrb	r3, [r7, #11]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d16e      	bne.n	800649e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80063c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80063ce:	2b03      	cmp	r3, #3
 80063d0:	f040 8098 	bne.w	8006504 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80063d4:	693b      	ldr	r3, [r7, #16]
 80063d6:	689a      	ldr	r2, [r3, #8]
 80063d8:	693b      	ldr	r3, [r7, #16]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	429a      	cmp	r2, r3
 80063de:	d913      	bls.n	8006408 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80063e0:	693b      	ldr	r3, [r7, #16]
 80063e2:	689a      	ldr	r2, [r3, #8]
 80063e4:	693b      	ldr	r3, [r7, #16]
 80063e6:	68db      	ldr	r3, [r3, #12]
 80063e8:	1ad2      	subs	r2, r2, r3
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	68da      	ldr	r2, [r3, #12]
 80063f2:	693b      	ldr	r3, [r7, #16]
 80063f4:	689b      	ldr	r3, [r3, #8]
 80063f6:	4293      	cmp	r3, r2
 80063f8:	bf28      	it	cs
 80063fa:	4613      	movcs	r3, r2
 80063fc:	461a      	mov	r2, r3
 80063fe:	6879      	ldr	r1, [r7, #4]
 8006400:	68f8      	ldr	r0, [r7, #12]
 8006402:	f001 f94a 	bl	800769a <USBD_CtlContinueRx>
 8006406:	e07d      	b.n	8006504 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2b02      	cmp	r3, #2
 8006414:	d014      	beq.n	8006440 <USBD_LL_DataOutStage+0x98>
 8006416:	2b02      	cmp	r3, #2
 8006418:	d81d      	bhi.n	8006456 <USBD_LL_DataOutStage+0xae>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <USBD_LL_DataOutStage+0x7c>
 800641e:	2b01      	cmp	r3, #1
 8006420:	d003      	beq.n	800642a <USBD_LL_DataOutStage+0x82>
 8006422:	e018      	b.n	8006456 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006424:	2300      	movs	r3, #0
 8006426:	75bb      	strb	r3, [r7, #22]
            break;
 8006428:	e018      	b.n	800645c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800642a:	68fb      	ldr	r3, [r7, #12]
 800642c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006430:	b2db      	uxtb	r3, r3
 8006432:	4619      	mov	r1, r3
 8006434:	68f8      	ldr	r0, [r7, #12]
 8006436:	f000 fa5e 	bl	80068f6 <USBD_CoreFindIF>
 800643a:	4603      	mov	r3, r0
 800643c:	75bb      	strb	r3, [r7, #22]
            break;
 800643e:	e00d      	b.n	800645c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006446:	b2db      	uxtb	r3, r3
 8006448:	4619      	mov	r1, r3
 800644a:	68f8      	ldr	r0, [r7, #12]
 800644c:	f000 fa60 	bl	8006910 <USBD_CoreFindEP>
 8006450:	4603      	mov	r3, r0
 8006452:	75bb      	strb	r3, [r7, #22]
            break;
 8006454:	e002      	b.n	800645c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006456:	2300      	movs	r3, #0
 8006458:	75bb      	strb	r3, [r7, #22]
            break;
 800645a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800645c:	7dbb      	ldrb	r3, [r7, #22]
 800645e:	2b00      	cmp	r3, #0
 8006460:	d119      	bne.n	8006496 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006468:	b2db      	uxtb	r3, r3
 800646a:	2b03      	cmp	r3, #3
 800646c:	d113      	bne.n	8006496 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800646e:	7dba      	ldrb	r2, [r7, #22]
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	32ae      	adds	r2, #174	; 0xae
 8006474:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	2b00      	cmp	r3, #0
 800647c:	d00b      	beq.n	8006496 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800647e:	7dba      	ldrb	r2, [r7, #22]
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006486:	7dba      	ldrb	r2, [r7, #22]
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	32ae      	adds	r2, #174	; 0xae
 800648c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	68f8      	ldr	r0, [r7, #12]
 8006494:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	f001 f910 	bl	80076bc <USBD_CtlSendStatus>
 800649c:	e032      	b.n	8006504 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800649e:	7afb      	ldrb	r3, [r7, #11]
 80064a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80064a4:	b2db      	uxtb	r3, r3
 80064a6:	4619      	mov	r1, r3
 80064a8:	68f8      	ldr	r0, [r7, #12]
 80064aa:	f000 fa31 	bl	8006910 <USBD_CoreFindEP>
 80064ae:	4603      	mov	r3, r0
 80064b0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80064b2:	7dbb      	ldrb	r3, [r7, #22]
 80064b4:	2bff      	cmp	r3, #255	; 0xff
 80064b6:	d025      	beq.n	8006504 <USBD_LL_DataOutStage+0x15c>
 80064b8:	7dbb      	ldrb	r3, [r7, #22]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d122      	bne.n	8006504 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064c4:	b2db      	uxtb	r3, r3
 80064c6:	2b03      	cmp	r3, #3
 80064c8:	d117      	bne.n	80064fa <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80064ca:	7dba      	ldrb	r2, [r7, #22]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	32ae      	adds	r2, #174	; 0xae
 80064d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064d4:	699b      	ldr	r3, [r3, #24]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	d00f      	beq.n	80064fa <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80064da:	7dba      	ldrb	r2, [r7, #22]
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80064e2:	7dba      	ldrb	r2, [r7, #22]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	32ae      	adds	r2, #174	; 0xae
 80064e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80064ec:	699b      	ldr	r3, [r3, #24]
 80064ee:	7afa      	ldrb	r2, [r7, #11]
 80064f0:	4611      	mov	r1, r2
 80064f2:	68f8      	ldr	r0, [r7, #12]
 80064f4:	4798      	blx	r3
 80064f6:	4603      	mov	r3, r0
 80064f8:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80064fa:	7dfb      	ldrb	r3, [r7, #23]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d001      	beq.n	8006504 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006500:	7dfb      	ldrb	r3, [r7, #23]
 8006502:	e000      	b.n	8006506 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006504:	2300      	movs	r3, #0
}
 8006506:	4618      	mov	r0, r3
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}

0800650e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800650e:	b580      	push	{r7, lr}
 8006510:	b086      	sub	sp, #24
 8006512:	af00      	add	r7, sp, #0
 8006514:	60f8      	str	r0, [r7, #12]
 8006516:	460b      	mov	r3, r1
 8006518:	607a      	str	r2, [r7, #4]
 800651a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800651c:	7afb      	ldrb	r3, [r7, #11]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d16f      	bne.n	8006602 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	3314      	adds	r3, #20
 8006526:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800652e:	2b02      	cmp	r3, #2
 8006530:	d15a      	bne.n	80065e8 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006532:	693b      	ldr	r3, [r7, #16]
 8006534:	689a      	ldr	r2, [r3, #8]
 8006536:	693b      	ldr	r3, [r7, #16]
 8006538:	68db      	ldr	r3, [r3, #12]
 800653a:	429a      	cmp	r2, r3
 800653c:	d914      	bls.n	8006568 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800653e:	693b      	ldr	r3, [r7, #16]
 8006540:	689a      	ldr	r2, [r3, #8]
 8006542:	693b      	ldr	r3, [r7, #16]
 8006544:	68db      	ldr	r3, [r3, #12]
 8006546:	1ad2      	subs	r2, r2, r3
 8006548:	693b      	ldr	r3, [r7, #16]
 800654a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800654c:	693b      	ldr	r3, [r7, #16]
 800654e:	689b      	ldr	r3, [r3, #8]
 8006550:	461a      	mov	r2, r3
 8006552:	6879      	ldr	r1, [r7, #4]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f001 f872 	bl	800763e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800655a:	2300      	movs	r3, #0
 800655c:	2200      	movs	r2, #0
 800655e:	2100      	movs	r1, #0
 8006560:	68f8      	ldr	r0, [r7, #12]
 8006562:	f7fb fd0f 	bl	8001f84 <USBD_LL_PrepareReceive>
 8006566:	e03f      	b.n	80065e8 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	68da      	ldr	r2, [r3, #12]
 800656c:	693b      	ldr	r3, [r7, #16]
 800656e:	689b      	ldr	r3, [r3, #8]
 8006570:	429a      	cmp	r2, r3
 8006572:	d11c      	bne.n	80065ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006574:	693b      	ldr	r3, [r7, #16]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	693b      	ldr	r3, [r7, #16]
 800657a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800657c:	429a      	cmp	r2, r3
 800657e:	d316      	bcc.n	80065ae <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	685a      	ldr	r2, [r3, #4]
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800658a:	429a      	cmp	r2, r3
 800658c:	d20f      	bcs.n	80065ae <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800658e:	2200      	movs	r2, #0
 8006590:	2100      	movs	r1, #0
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f001 f853 	bl	800763e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	2200      	movs	r2, #0
 800659c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80065a0:	2300      	movs	r3, #0
 80065a2:	2200      	movs	r2, #0
 80065a4:	2100      	movs	r1, #0
 80065a6:	68f8      	ldr	r0, [r7, #12]
 80065a8:	f7fb fcec 	bl	8001f84 <USBD_LL_PrepareReceive>
 80065ac:	e01c      	b.n	80065e8 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065b4:	b2db      	uxtb	r3, r3
 80065b6:	2b03      	cmp	r3, #3
 80065b8:	d10f      	bne.n	80065da <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d009      	beq.n	80065da <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	2200      	movs	r2, #0
 80065ca:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80065d4:	68db      	ldr	r3, [r3, #12]
 80065d6:	68f8      	ldr	r0, [r7, #12]
 80065d8:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80065da:	2180      	movs	r1, #128	; 0x80
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f7fb fc27 	bl	8001e30 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80065e2:	68f8      	ldr	r0, [r7, #12]
 80065e4:	f001 f87d 	bl	80076e2 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d03a      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80065f2:	68f8      	ldr	r0, [r7, #12]
 80065f4:	f7ff fe42 	bl	800627c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006600:	e032      	b.n	8006668 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006602:	7afb      	ldrb	r3, [r7, #11]
 8006604:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006608:	b2db      	uxtb	r3, r3
 800660a:	4619      	mov	r1, r3
 800660c:	68f8      	ldr	r0, [r7, #12]
 800660e:	f000 f97f 	bl	8006910 <USBD_CoreFindEP>
 8006612:	4603      	mov	r3, r0
 8006614:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006616:	7dfb      	ldrb	r3, [r7, #23]
 8006618:	2bff      	cmp	r3, #255	; 0xff
 800661a:	d025      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
 800661c:	7dfb      	ldrb	r3, [r7, #23]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d122      	bne.n	8006668 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b03      	cmp	r3, #3
 800662c:	d11c      	bne.n	8006668 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800662e:	7dfa      	ldrb	r2, [r7, #23]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	32ae      	adds	r2, #174	; 0xae
 8006634:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006638:	695b      	ldr	r3, [r3, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d014      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800663e:	7dfa      	ldrb	r2, [r7, #23]
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006646:	7dfa      	ldrb	r2, [r7, #23]
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	32ae      	adds	r2, #174	; 0xae
 800664c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006650:	695b      	ldr	r3, [r3, #20]
 8006652:	7afa      	ldrb	r2, [r7, #11]
 8006654:	4611      	mov	r1, r2
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	4798      	blx	r3
 800665a:	4603      	mov	r3, r0
 800665c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800665e:	7dbb      	ldrb	r3, [r7, #22]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006664:	7dbb      	ldrb	r3, [r7, #22]
 8006666:	e000      	b.n	800666a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	3718      	adds	r7, #24
 800666e:	46bd      	mov	sp, r7
 8006670:	bd80      	pop	{r7, pc}

08006672 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8006672:	b580      	push	{r7, lr}
 8006674:	b084      	sub	sp, #16
 8006676:	af00      	add	r7, sp, #0
 8006678:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800667a:	2300      	movs	r3, #0
 800667c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	2201      	movs	r2, #1
 8006682:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	2200      	movs	r2, #0
 800668a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2200      	movs	r2, #0
 8006692:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	2200      	movs	r2, #0
 8006698:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d014      	beq.n	80066d8 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b4:	685b      	ldr	r3, [r3, #4]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d00e      	beq.n	80066d8 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066c0:	685b      	ldr	r3, [r3, #4]
 80066c2:	687a      	ldr	r2, [r7, #4]
 80066c4:	6852      	ldr	r2, [r2, #4]
 80066c6:	b2d2      	uxtb	r2, r2
 80066c8:	4611      	mov	r1, r2
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	4798      	blx	r3
 80066ce:	4603      	mov	r3, r0
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d001      	beq.n	80066d8 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80066d4:	2303      	movs	r3, #3
 80066d6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066d8:	2340      	movs	r3, #64	; 0x40
 80066da:	2200      	movs	r2, #0
 80066dc:	2100      	movs	r1, #0
 80066de:	6878      	ldr	r0, [r7, #4]
 80066e0:	f7fb fb61 	bl	8001da6 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	2201      	movs	r2, #1
 80066e8:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	2240      	movs	r2, #64	; 0x40
 80066f0:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80066f4:	2340      	movs	r3, #64	; 0x40
 80066f6:	2200      	movs	r2, #0
 80066f8:	2180      	movs	r1, #128	; 0x80
 80066fa:	6878      	ldr	r0, [r7, #4]
 80066fc:	f7fb fb53 	bl	8001da6 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2201      	movs	r2, #1
 8006704:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	2240      	movs	r2, #64	; 0x40
 800670a:	621a      	str	r2, [r3, #32]

  return ret;
 800670c:	7bfb      	ldrb	r3, [r7, #15]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}

08006716 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8006716:	b480      	push	{r7}
 8006718:	b083      	sub	sp, #12
 800671a:	af00      	add	r7, sp, #0
 800671c:	6078      	str	r0, [r7, #4]
 800671e:	460b      	mov	r3, r1
 8006720:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	78fa      	ldrb	r2, [r7, #3]
 8006726:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006728:	2300      	movs	r3, #0
}
 800672a:	4618      	mov	r0, r3
 800672c:	370c      	adds	r7, #12
 800672e:	46bd      	mov	sp, r7
 8006730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006734:	4770      	bx	lr

08006736 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006744:	b2da      	uxtb	r2, r3
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	2204      	movs	r2, #4
 8006750:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006754:	2300      	movs	r3, #0
}
 8006756:	4618      	mov	r0, r3
 8006758:	370c      	adds	r7, #12
 800675a:	46bd      	mov	sp, r7
 800675c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006760:	4770      	bx	lr

08006762 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006762:	b480      	push	{r7}
 8006764:	b083      	sub	sp, #12
 8006766:	af00      	add	r7, sp, #0
 8006768:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006770:	b2db      	uxtb	r3, r3
 8006772:	2b04      	cmp	r3, #4
 8006774:	d106      	bne.n	8006784 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800677c:	b2da      	uxtb	r2, r3
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006784:	2300      	movs	r3, #0
}
 8006786:	4618      	mov	r0, r3
 8006788:	370c      	adds	r7, #12
 800678a:	46bd      	mov	sp, r7
 800678c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006790:	4770      	bx	lr

08006792 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8006792:	b580      	push	{r7, lr}
 8006794:	b082      	sub	sp, #8
 8006796:	af00      	add	r7, sp, #0
 8006798:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067a0:	b2db      	uxtb	r3, r3
 80067a2:	2b03      	cmp	r3, #3
 80067a4:	d110      	bne.n	80067c8 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d00b      	beq.n	80067c8 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067b6:	69db      	ldr	r3, [r3, #28]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d005      	beq.n	80067c8 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067c2:	69db      	ldr	r3, [r3, #28]
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80067c8:	2300      	movs	r3, #0
}
 80067ca:	4618      	mov	r0, r3
 80067cc:	3708      	adds	r7, #8
 80067ce:	46bd      	mov	sp, r7
 80067d0:	bd80      	pop	{r7, pc}

080067d2 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80067d2:	b580      	push	{r7, lr}
 80067d4:	b082      	sub	sp, #8
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	460b      	mov	r3, r1
 80067dc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	32ae      	adds	r2, #174	; 0xae
 80067e8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d101      	bne.n	80067f4 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80067f0:	2303      	movs	r3, #3
 80067f2:	e01c      	b.n	800682e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80067fa:	b2db      	uxtb	r3, r3
 80067fc:	2b03      	cmp	r3, #3
 80067fe:	d115      	bne.n	800682c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	32ae      	adds	r2, #174	; 0xae
 800680a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800680e:	6a1b      	ldr	r3, [r3, #32]
 8006810:	2b00      	cmp	r3, #0
 8006812:	d00b      	beq.n	800682c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	32ae      	adds	r2, #174	; 0xae
 800681e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006822:	6a1b      	ldr	r3, [r3, #32]
 8006824:	78fa      	ldrb	r2, [r7, #3]
 8006826:	4611      	mov	r1, r2
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800682c:	2300      	movs	r3, #0
}
 800682e:	4618      	mov	r0, r3
 8006830:	3708      	adds	r7, #8
 8006832:	46bd      	mov	sp, r7
 8006834:	bd80      	pop	{r7, pc}

08006836 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006836:	b580      	push	{r7, lr}
 8006838:	b082      	sub	sp, #8
 800683a:	af00      	add	r7, sp, #0
 800683c:	6078      	str	r0, [r7, #4]
 800683e:	460b      	mov	r3, r1
 8006840:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	32ae      	adds	r2, #174	; 0xae
 800684c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006850:	2b00      	cmp	r3, #0
 8006852:	d101      	bne.n	8006858 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006854:	2303      	movs	r3, #3
 8006856:	e01c      	b.n	8006892 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800685e:	b2db      	uxtb	r3, r3
 8006860:	2b03      	cmp	r3, #3
 8006862:	d115      	bne.n	8006890 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	32ae      	adds	r2, #174	; 0xae
 800686e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006872:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006874:	2b00      	cmp	r3, #0
 8006876:	d00b      	beq.n	8006890 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	32ae      	adds	r2, #174	; 0xae
 8006882:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006888:	78fa      	ldrb	r2, [r7, #3]
 800688a:	4611      	mov	r1, r2
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006890:	2300      	movs	r3, #0
}
 8006892:	4618      	mov	r0, r3
 8006894:	3708      	adds	r7, #8
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800689a:	b480      	push	{r7}
 800689c:	b083      	sub	sp, #12
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80068a2:	2300      	movs	r3, #0
}
 80068a4:	4618      	mov	r0, r3
 80068a6:	370c      	adds	r7, #12
 80068a8:	46bd      	mov	sp, r7
 80068aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ae:	4770      	bx	lr

080068b0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b084      	sub	sp, #16
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80068b8:	2300      	movs	r3, #0
 80068ba:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	2201      	movs	r2, #1
 80068c0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d00e      	beq.n	80068ec <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	687a      	ldr	r2, [r7, #4]
 80068d8:	6852      	ldr	r2, [r2, #4]
 80068da:	b2d2      	uxtb	r2, r2
 80068dc:	4611      	mov	r1, r2
 80068de:	6878      	ldr	r0, [r7, #4]
 80068e0:	4798      	blx	r3
 80068e2:	4603      	mov	r3, r0
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	d001      	beq.n	80068ec <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80068e8:	2303      	movs	r3, #3
 80068ea:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80068ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ee:	4618      	mov	r0, r3
 80068f0:	3710      	adds	r7, #16
 80068f2:	46bd      	mov	sp, r7
 80068f4:	bd80      	pop	{r7, pc}

080068f6 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80068f6:	b480      	push	{r7}
 80068f8:	b083      	sub	sp, #12
 80068fa:	af00      	add	r7, sp, #0
 80068fc:	6078      	str	r0, [r7, #4]
 80068fe:	460b      	mov	r3, r1
 8006900:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006902:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006904:	4618      	mov	r0, r3
 8006906:	370c      	adds	r7, #12
 8006908:	46bd      	mov	sp, r7
 800690a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690e:	4770      	bx	lr

08006910 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006910:	b480      	push	{r7}
 8006912:	b083      	sub	sp, #12
 8006914:	af00      	add	r7, sp, #0
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800691c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800691e:	4618      	mov	r0, r3
 8006920:	370c      	adds	r7, #12
 8006922:	46bd      	mov	sp, r7
 8006924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006928:	4770      	bx	lr

0800692a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800692a:	b480      	push	{r7}
 800692c:	b085      	sub	sp, #20
 800692e:	af00      	add	r7, sp, #0
 8006930:	6078      	str	r0, [r7, #4]
 8006932:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006938:	683b      	ldr	r3, [r7, #0]
 800693a:	881a      	ldrh	r2, [r3, #0]
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	781b      	ldrb	r3, [r3, #0]
 8006940:	b29b      	uxth	r3, r3
 8006942:	4413      	add	r3, r2
 8006944:	b29a      	uxth	r2, r3
 8006946:	683b      	ldr	r3, [r7, #0]
 8006948:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	781b      	ldrb	r3, [r3, #0]
 800694e:	461a      	mov	r2, r3
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	4413      	add	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006956:	68fb      	ldr	r3, [r7, #12]
}
 8006958:	4618      	mov	r0, r3
 800695a:	3714      	adds	r7, #20
 800695c:	46bd      	mov	sp, r7
 800695e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006962:	4770      	bx	lr

08006964 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006964:	b480      	push	{r7}
 8006966:	b087      	sub	sp, #28
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006976:	697b      	ldr	r3, [r7, #20]
 8006978:	3301      	adds	r3, #1
 800697a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006982:	8a3b      	ldrh	r3, [r7, #16]
 8006984:	021b      	lsls	r3, r3, #8
 8006986:	b21a      	sxth	r2, r3
 8006988:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800698c:	4313      	orrs	r3, r2
 800698e:	b21b      	sxth	r3, r3
 8006990:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006992:	89fb      	ldrh	r3, [r7, #14]
}
 8006994:	4618      	mov	r0, r3
 8006996:	371c      	adds	r7, #28
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b084      	sub	sp, #16
 80069a4:	af00      	add	r7, sp, #0
 80069a6:	6078      	str	r0, [r7, #4]
 80069a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80069aa:	2300      	movs	r3, #0
 80069ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	781b      	ldrb	r3, [r3, #0]
 80069b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80069b6:	2b40      	cmp	r3, #64	; 0x40
 80069b8:	d005      	beq.n	80069c6 <USBD_StdDevReq+0x26>
 80069ba:	2b40      	cmp	r3, #64	; 0x40
 80069bc:	d857      	bhi.n	8006a6e <USBD_StdDevReq+0xce>
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00f      	beq.n	80069e2 <USBD_StdDevReq+0x42>
 80069c2:	2b20      	cmp	r3, #32
 80069c4:	d153      	bne.n	8006a6e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	32ae      	adds	r2, #174	; 0xae
 80069d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069d4:	689b      	ldr	r3, [r3, #8]
 80069d6:	6839      	ldr	r1, [r7, #0]
 80069d8:	6878      	ldr	r0, [r7, #4]
 80069da:	4798      	blx	r3
 80069dc:	4603      	mov	r3, r0
 80069de:	73fb      	strb	r3, [r7, #15]
      break;
 80069e0:	e04a      	b.n	8006a78 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	785b      	ldrb	r3, [r3, #1]
 80069e6:	2b09      	cmp	r3, #9
 80069e8:	d83b      	bhi.n	8006a62 <USBD_StdDevReq+0xc2>
 80069ea:	a201      	add	r2, pc, #4	; (adr r2, 80069f0 <USBD_StdDevReq+0x50>)
 80069ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80069f0:	08006a45 	.word	0x08006a45
 80069f4:	08006a59 	.word	0x08006a59
 80069f8:	08006a63 	.word	0x08006a63
 80069fc:	08006a4f 	.word	0x08006a4f
 8006a00:	08006a63 	.word	0x08006a63
 8006a04:	08006a23 	.word	0x08006a23
 8006a08:	08006a19 	.word	0x08006a19
 8006a0c:	08006a63 	.word	0x08006a63
 8006a10:	08006a3b 	.word	0x08006a3b
 8006a14:	08006a2d 	.word	0x08006a2d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa3c 	bl	8006e98 <USBD_GetDescriptor>
          break;
 8006a20:	e024      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006a22:	6839      	ldr	r1, [r7, #0]
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f000 fba1 	bl	800716c <USBD_SetAddress>
          break;
 8006a2a:	e01f      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006a2c:	6839      	ldr	r1, [r7, #0]
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f000 fbe0 	bl	80071f4 <USBD_SetConfig>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]
          break;
 8006a38:	e018      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006a3a:	6839      	ldr	r1, [r7, #0]
 8006a3c:	6878      	ldr	r0, [r7, #4]
 8006a3e:	f000 fc83 	bl	8007348 <USBD_GetConfig>
          break;
 8006a42:	e013      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006a44:	6839      	ldr	r1, [r7, #0]
 8006a46:	6878      	ldr	r0, [r7, #4]
 8006a48:	f000 fcb4 	bl	80073b4 <USBD_GetStatus>
          break;
 8006a4c:	e00e      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006a4e:	6839      	ldr	r1, [r7, #0]
 8006a50:	6878      	ldr	r0, [r7, #4]
 8006a52:	f000 fce3 	bl	800741c <USBD_SetFeature>
          break;
 8006a56:	e009      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006a58:	6839      	ldr	r1, [r7, #0]
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fd07 	bl	800746e <USBD_ClrFeature>
          break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fd5e 	bl	8007526 <USBD_CtlError>
          break;
 8006a6a:	bf00      	nop
      }
      break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fd58 	bl	8007526 <USBD_CtlError>
      break;
 8006a76:	bf00      	nop
  }

  return ret;
 8006a78:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3710      	adds	r7, #16
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
 8006a82:	bf00      	nop

08006a84 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	b084      	sub	sp, #16
 8006a88:	af00      	add	r7, sp, #0
 8006a8a:	6078      	str	r0, [r7, #4]
 8006a8c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006a8e:	2300      	movs	r3, #0
 8006a90:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006a92:	683b      	ldr	r3, [r7, #0]
 8006a94:	781b      	ldrb	r3, [r3, #0]
 8006a96:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006a9a:	2b40      	cmp	r3, #64	; 0x40
 8006a9c:	d005      	beq.n	8006aaa <USBD_StdItfReq+0x26>
 8006a9e:	2b40      	cmp	r3, #64	; 0x40
 8006aa0:	d852      	bhi.n	8006b48 <USBD_StdItfReq+0xc4>
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d001      	beq.n	8006aaa <USBD_StdItfReq+0x26>
 8006aa6:	2b20      	cmp	r3, #32
 8006aa8:	d14e      	bne.n	8006b48 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ab0:	b2db      	uxtb	r3, r3
 8006ab2:	3b01      	subs	r3, #1
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d840      	bhi.n	8006b3a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	889b      	ldrh	r3, [r3, #4]
 8006abc:	b2db      	uxtb	r3, r3
 8006abe:	2b02      	cmp	r3, #2
 8006ac0:	d836      	bhi.n	8006b30 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006ac2:	683b      	ldr	r3, [r7, #0]
 8006ac4:	889b      	ldrh	r3, [r3, #4]
 8006ac6:	b2db      	uxtb	r3, r3
 8006ac8:	4619      	mov	r1, r3
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f7ff ff13 	bl	80068f6 <USBD_CoreFindIF>
 8006ad0:	4603      	mov	r3, r0
 8006ad2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ad4:	7bbb      	ldrb	r3, [r7, #14]
 8006ad6:	2bff      	cmp	r3, #255	; 0xff
 8006ad8:	d01d      	beq.n	8006b16 <USBD_StdItfReq+0x92>
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	2b00      	cmp	r3, #0
 8006ade:	d11a      	bne.n	8006b16 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006ae0:	7bba      	ldrb	r2, [r7, #14]
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	32ae      	adds	r2, #174	; 0xae
 8006ae6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006aea:	689b      	ldr	r3, [r3, #8]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d00f      	beq.n	8006b10 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006af0:	7bba      	ldrb	r2, [r7, #14]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006af8:	7bba      	ldrb	r2, [r7, #14]
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	32ae      	adds	r2, #174	; 0xae
 8006afe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	6839      	ldr	r1, [r7, #0]
 8006b06:	6878      	ldr	r0, [r7, #4]
 8006b08:	4798      	blx	r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b0e:	e004      	b.n	8006b1a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006b10:	2303      	movs	r3, #3
 8006b12:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006b14:	e001      	b.n	8006b1a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006b16:	2303      	movs	r3, #3
 8006b18:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006b1a:	683b      	ldr	r3, [r7, #0]
 8006b1c:	88db      	ldrh	r3, [r3, #6]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d110      	bne.n	8006b44 <USBD_StdItfReq+0xc0>
 8006b22:	7bfb      	ldrb	r3, [r7, #15]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d10d      	bne.n	8006b44 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	f000 fdc7 	bl	80076bc <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006b2e:	e009      	b.n	8006b44 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006b30:	6839      	ldr	r1, [r7, #0]
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fcf7 	bl	8007526 <USBD_CtlError>
          break;
 8006b38:	e004      	b.n	8006b44 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fcf2 	bl	8007526 <USBD_CtlError>
          break;
 8006b42:	e000      	b.n	8006b46 <USBD_StdItfReq+0xc2>
          break;
 8006b44:	bf00      	nop
      }
      break;
 8006b46:	e004      	b.n	8006b52 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006b48:	6839      	ldr	r1, [r7, #0]
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fceb 	bl	8007526 <USBD_CtlError>
      break;
 8006b50:	bf00      	nop
  }

  return ret;
 8006b52:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b54:	4618      	mov	r0, r3
 8006b56:	3710      	adds	r7, #16
 8006b58:	46bd      	mov	sp, r7
 8006b5a:	bd80      	pop	{r7, pc}

08006b5c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b5c:	b580      	push	{r7, lr}
 8006b5e:	b084      	sub	sp, #16
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	6078      	str	r0, [r7, #4]
 8006b64:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006b66:	2300      	movs	r3, #0
 8006b68:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	889b      	ldrh	r3, [r3, #4]
 8006b6e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	781b      	ldrb	r3, [r3, #0]
 8006b74:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b78:	2b40      	cmp	r3, #64	; 0x40
 8006b7a:	d007      	beq.n	8006b8c <USBD_StdEPReq+0x30>
 8006b7c:	2b40      	cmp	r3, #64	; 0x40
 8006b7e:	f200 817f 	bhi.w	8006e80 <USBD_StdEPReq+0x324>
 8006b82:	2b00      	cmp	r3, #0
 8006b84:	d02a      	beq.n	8006bdc <USBD_StdEPReq+0x80>
 8006b86:	2b20      	cmp	r3, #32
 8006b88:	f040 817a 	bne.w	8006e80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006b8c:	7bbb      	ldrb	r3, [r7, #14]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff febd 	bl	8006910 <USBD_CoreFindEP>
 8006b96:	4603      	mov	r3, r0
 8006b98:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006b9a:	7b7b      	ldrb	r3, [r7, #13]
 8006b9c:	2bff      	cmp	r3, #255	; 0xff
 8006b9e:	f000 8174 	beq.w	8006e8a <USBD_StdEPReq+0x32e>
 8006ba2:	7b7b      	ldrb	r3, [r7, #13]
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	f040 8170 	bne.w	8006e8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006baa:	7b7a      	ldrb	r2, [r7, #13]
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006bb2:	7b7a      	ldrb	r2, [r7, #13]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	32ae      	adds	r2, #174	; 0xae
 8006bb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bbc:	689b      	ldr	r3, [r3, #8]
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	f000 8163 	beq.w	8006e8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006bc4:	7b7a      	ldrb	r2, [r7, #13]
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	32ae      	adds	r2, #174	; 0xae
 8006bca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006bce:	689b      	ldr	r3, [r3, #8]
 8006bd0:	6839      	ldr	r1, [r7, #0]
 8006bd2:	6878      	ldr	r0, [r7, #4]
 8006bd4:	4798      	blx	r3
 8006bd6:	4603      	mov	r3, r0
 8006bd8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006bda:	e156      	b.n	8006e8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006bdc:	683b      	ldr	r3, [r7, #0]
 8006bde:	785b      	ldrb	r3, [r3, #1]
 8006be0:	2b03      	cmp	r3, #3
 8006be2:	d008      	beq.n	8006bf6 <USBD_StdEPReq+0x9a>
 8006be4:	2b03      	cmp	r3, #3
 8006be6:	f300 8145 	bgt.w	8006e74 <USBD_StdEPReq+0x318>
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	f000 809b 	beq.w	8006d26 <USBD_StdEPReq+0x1ca>
 8006bf0:	2b01      	cmp	r3, #1
 8006bf2:	d03c      	beq.n	8006c6e <USBD_StdEPReq+0x112>
 8006bf4:	e13e      	b.n	8006e74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bfc:	b2db      	uxtb	r3, r3
 8006bfe:	2b02      	cmp	r3, #2
 8006c00:	d002      	beq.n	8006c08 <USBD_StdEPReq+0xac>
 8006c02:	2b03      	cmp	r3, #3
 8006c04:	d016      	beq.n	8006c34 <USBD_StdEPReq+0xd8>
 8006c06:	e02c      	b.n	8006c62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c08:	7bbb      	ldrb	r3, [r7, #14]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00d      	beq.n	8006c2a <USBD_StdEPReq+0xce>
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	2b80      	cmp	r3, #128	; 0x80
 8006c12:	d00a      	beq.n	8006c2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c14:	7bbb      	ldrb	r3, [r7, #14]
 8006c16:	4619      	mov	r1, r3
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f7fb f909 	bl	8001e30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c1e:	2180      	movs	r1, #128	; 0x80
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fb f905 	bl	8001e30 <USBD_LL_StallEP>
 8006c26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006c28:	e020      	b.n	8006c6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006c2a:	6839      	ldr	r1, [r7, #0]
 8006c2c:	6878      	ldr	r0, [r7, #4]
 8006c2e:	f000 fc7a 	bl	8007526 <USBD_CtlError>
              break;
 8006c32:	e01b      	b.n	8006c6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	885b      	ldrh	r3, [r3, #2]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d10e      	bne.n	8006c5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d00b      	beq.n	8006c5a <USBD_StdEPReq+0xfe>
 8006c42:	7bbb      	ldrb	r3, [r7, #14]
 8006c44:	2b80      	cmp	r3, #128	; 0x80
 8006c46:	d008      	beq.n	8006c5a <USBD_StdEPReq+0xfe>
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	88db      	ldrh	r3, [r3, #6]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d104      	bne.n	8006c5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c50:	7bbb      	ldrb	r3, [r7, #14]
 8006c52:	4619      	mov	r1, r3
 8006c54:	6878      	ldr	r0, [r7, #4]
 8006c56:	f7fb f8eb 	bl	8001e30 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f000 fd2e 	bl	80076bc <USBD_CtlSendStatus>

              break;
 8006c60:	e004      	b.n	8006c6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006c62:	6839      	ldr	r1, [r7, #0]
 8006c64:	6878      	ldr	r0, [r7, #4]
 8006c66:	f000 fc5e 	bl	8007526 <USBD_CtlError>
              break;
 8006c6a:	bf00      	nop
          }
          break;
 8006c6c:	e107      	b.n	8006e7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c74:	b2db      	uxtb	r3, r3
 8006c76:	2b02      	cmp	r3, #2
 8006c78:	d002      	beq.n	8006c80 <USBD_StdEPReq+0x124>
 8006c7a:	2b03      	cmp	r3, #3
 8006c7c:	d016      	beq.n	8006cac <USBD_StdEPReq+0x150>
 8006c7e:	e04b      	b.n	8006d18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006c80:	7bbb      	ldrb	r3, [r7, #14]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00d      	beq.n	8006ca2 <USBD_StdEPReq+0x146>
 8006c86:	7bbb      	ldrb	r3, [r7, #14]
 8006c88:	2b80      	cmp	r3, #128	; 0x80
 8006c8a:	d00a      	beq.n	8006ca2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006c8c:	7bbb      	ldrb	r3, [r7, #14]
 8006c8e:	4619      	mov	r1, r3
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7fb f8cd 	bl	8001e30 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006c96:	2180      	movs	r1, #128	; 0x80
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f7fb f8c9 	bl	8001e30 <USBD_LL_StallEP>
 8006c9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006ca0:	e040      	b.n	8006d24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006ca2:	6839      	ldr	r1, [r7, #0]
 8006ca4:	6878      	ldr	r0, [r7, #4]
 8006ca6:	f000 fc3e 	bl	8007526 <USBD_CtlError>
              break;
 8006caa:	e03b      	b.n	8006d24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	885b      	ldrh	r3, [r3, #2]
 8006cb0:	2b00      	cmp	r3, #0
 8006cb2:	d136      	bne.n	8006d22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006cb4:	7bbb      	ldrb	r3, [r7, #14]
 8006cb6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006cba:	2b00      	cmp	r3, #0
 8006cbc:	d004      	beq.n	8006cc8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006cbe:	7bbb      	ldrb	r3, [r7, #14]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f7fb f8d3 	bl	8001e6e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006cc8:	6878      	ldr	r0, [r7, #4]
 8006cca:	f000 fcf7 	bl	80076bc <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cce:	7bbb      	ldrb	r3, [r7, #14]
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f7ff fe1c 	bl	8006910 <USBD_CoreFindEP>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cdc:	7b7b      	ldrb	r3, [r7, #13]
 8006cde:	2bff      	cmp	r3, #255	; 0xff
 8006ce0:	d01f      	beq.n	8006d22 <USBD_StdEPReq+0x1c6>
 8006ce2:	7b7b      	ldrb	r3, [r7, #13]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d11c      	bne.n	8006d22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ce8:	7b7a      	ldrb	r2, [r7, #13]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006cf0:	7b7a      	ldrb	r2, [r7, #13]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	32ae      	adds	r2, #174	; 0xae
 8006cf6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006cfa:	689b      	ldr	r3, [r3, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d010      	beq.n	8006d22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006d00:	7b7a      	ldrb	r2, [r7, #13]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	32ae      	adds	r2, #174	; 0xae
 8006d06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0a:	689b      	ldr	r3, [r3, #8]
 8006d0c:	6839      	ldr	r1, [r7, #0]
 8006d0e:	6878      	ldr	r0, [r7, #4]
 8006d10:	4798      	blx	r3
 8006d12:	4603      	mov	r3, r0
 8006d14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006d16:	e004      	b.n	8006d22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006d18:	6839      	ldr	r1, [r7, #0]
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fc03 	bl	8007526 <USBD_CtlError>
              break;
 8006d20:	e000      	b.n	8006d24 <USBD_StdEPReq+0x1c8>
              break;
 8006d22:	bf00      	nop
          }
          break;
 8006d24:	e0ab      	b.n	8006e7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d002      	beq.n	8006d38 <USBD_StdEPReq+0x1dc>
 8006d32:	2b03      	cmp	r3, #3
 8006d34:	d032      	beq.n	8006d9c <USBD_StdEPReq+0x240>
 8006d36:	e097      	b.n	8006e68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d38:	7bbb      	ldrb	r3, [r7, #14]
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d007      	beq.n	8006d4e <USBD_StdEPReq+0x1f2>
 8006d3e:	7bbb      	ldrb	r3, [r7, #14]
 8006d40:	2b80      	cmp	r3, #128	; 0x80
 8006d42:	d004      	beq.n	8006d4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006d44:	6839      	ldr	r1, [r7, #0]
 8006d46:	6878      	ldr	r0, [r7, #4]
 8006d48:	f000 fbed 	bl	8007526 <USBD_CtlError>
                break;
 8006d4c:	e091      	b.n	8006e72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	da0b      	bge.n	8006d6e <USBD_StdEPReq+0x212>
 8006d56:	7bbb      	ldrb	r3, [r7, #14]
 8006d58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006d5c:	4613      	mov	r3, r2
 8006d5e:	009b      	lsls	r3, r3, #2
 8006d60:	4413      	add	r3, r2
 8006d62:	009b      	lsls	r3, r3, #2
 8006d64:	3310      	adds	r3, #16
 8006d66:	687a      	ldr	r2, [r7, #4]
 8006d68:	4413      	add	r3, r2
 8006d6a:	3304      	adds	r3, #4
 8006d6c:	e00b      	b.n	8006d86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006d6e:	7bbb      	ldrb	r3, [r7, #14]
 8006d70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006d74:	4613      	mov	r3, r2
 8006d76:	009b      	lsls	r3, r3, #2
 8006d78:	4413      	add	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006d80:	687a      	ldr	r2, [r7, #4]
 8006d82:	4413      	add	r3, r2
 8006d84:	3304      	adds	r3, #4
 8006d86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006d88:	68bb      	ldr	r3, [r7, #8]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	2202      	movs	r2, #2
 8006d92:	4619      	mov	r1, r3
 8006d94:	6878      	ldr	r0, [r7, #4]
 8006d96:	f000 fc37 	bl	8007608 <USBD_CtlSendData>
              break;
 8006d9a:	e06a      	b.n	8006e72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006d9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	da11      	bge.n	8006dc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006da4:	7bbb      	ldrb	r3, [r7, #14]
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	6879      	ldr	r1, [r7, #4]
 8006dac:	4613      	mov	r3, r2
 8006dae:	009b      	lsls	r3, r3, #2
 8006db0:	4413      	add	r3, r2
 8006db2:	009b      	lsls	r3, r3, #2
 8006db4:	440b      	add	r3, r1
 8006db6:	3324      	adds	r3, #36	; 0x24
 8006db8:	881b      	ldrh	r3, [r3, #0]
 8006dba:	2b00      	cmp	r3, #0
 8006dbc:	d117      	bne.n	8006dee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006dbe:	6839      	ldr	r1, [r7, #0]
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f000 fbb0 	bl	8007526 <USBD_CtlError>
                  break;
 8006dc6:	e054      	b.n	8006e72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006dc8:	7bbb      	ldrb	r3, [r7, #14]
 8006dca:	f003 020f 	and.w	r2, r3, #15
 8006dce:	6879      	ldr	r1, [r7, #4]
 8006dd0:	4613      	mov	r3, r2
 8006dd2:	009b      	lsls	r3, r3, #2
 8006dd4:	4413      	add	r3, r2
 8006dd6:	009b      	lsls	r3, r3, #2
 8006dd8:	440b      	add	r3, r1
 8006dda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006dde:	881b      	ldrh	r3, [r3, #0]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d104      	bne.n	8006dee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006de4:	6839      	ldr	r1, [r7, #0]
 8006de6:	6878      	ldr	r0, [r7, #4]
 8006de8:	f000 fb9d 	bl	8007526 <USBD_CtlError>
                  break;
 8006dec:	e041      	b.n	8006e72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006dee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da0b      	bge.n	8006e0e <USBD_StdEPReq+0x2b2>
 8006df6:	7bbb      	ldrb	r3, [r7, #14]
 8006df8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006dfc:	4613      	mov	r3, r2
 8006dfe:	009b      	lsls	r3, r3, #2
 8006e00:	4413      	add	r3, r2
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	3310      	adds	r3, #16
 8006e06:	687a      	ldr	r2, [r7, #4]
 8006e08:	4413      	add	r3, r2
 8006e0a:	3304      	adds	r3, #4
 8006e0c:	e00b      	b.n	8006e26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	4413      	add	r3, r2
 8006e24:	3304      	adds	r3, #4
 8006e26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d002      	beq.n	8006e34 <USBD_StdEPReq+0x2d8>
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b80      	cmp	r3, #128	; 0x80
 8006e32:	d103      	bne.n	8006e3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2200      	movs	r2, #0
 8006e38:	601a      	str	r2, [r3, #0]
 8006e3a:	e00e      	b.n	8006e5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006e3c:	7bbb      	ldrb	r3, [r7, #14]
 8006e3e:	4619      	mov	r1, r3
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f7fb f833 	bl	8001eac <USBD_LL_IsStallEP>
 8006e46:	4603      	mov	r3, r0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d003      	beq.n	8006e54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006e4c:	68bb      	ldr	r3, [r7, #8]
 8006e4e:	2201      	movs	r2, #1
 8006e50:	601a      	str	r2, [r3, #0]
 8006e52:	e002      	b.n	8006e5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	2200      	movs	r2, #0
 8006e58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006e5a:	68bb      	ldr	r3, [r7, #8]
 8006e5c:	2202      	movs	r2, #2
 8006e5e:	4619      	mov	r1, r3
 8006e60:	6878      	ldr	r0, [r7, #4]
 8006e62:	f000 fbd1 	bl	8007608 <USBD_CtlSendData>
              break;
 8006e66:	e004      	b.n	8006e72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fb5b 	bl	8007526 <USBD_CtlError>
              break;
 8006e70:	bf00      	nop
          }
          break;
 8006e72:	e004      	b.n	8006e7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006e74:	6839      	ldr	r1, [r7, #0]
 8006e76:	6878      	ldr	r0, [r7, #4]
 8006e78:	f000 fb55 	bl	8007526 <USBD_CtlError>
          break;
 8006e7c:	bf00      	nop
      }
      break;
 8006e7e:	e005      	b.n	8006e8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006e80:	6839      	ldr	r1, [r7, #0]
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 fb4f 	bl	8007526 <USBD_CtlError>
      break;
 8006e88:	e000      	b.n	8006e8c <USBD_StdEPReq+0x330>
      break;
 8006e8a:	bf00      	nop
  }

  return ret;
 8006e8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006e8e:	4618      	mov	r0, r3
 8006e90:	3710      	adds	r7, #16
 8006e92:	46bd      	mov	sp, r7
 8006e94:	bd80      	pop	{r7, pc}
	...

08006e98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
 8006ea0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ea2:	2300      	movs	r3, #0
 8006ea4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ea6:	2300      	movs	r3, #0
 8006ea8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006eaa:	2300      	movs	r3, #0
 8006eac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	885b      	ldrh	r3, [r3, #2]
 8006eb2:	0a1b      	lsrs	r3, r3, #8
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	2b06      	cmp	r3, #6
 8006eba:	f200 8128 	bhi.w	800710e <USBD_GetDescriptor+0x276>
 8006ebe:	a201      	add	r2, pc, #4	; (adr r2, 8006ec4 <USBD_GetDescriptor+0x2c>)
 8006ec0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006ec4:	08006ee1 	.word	0x08006ee1
 8006ec8:	08006ef9 	.word	0x08006ef9
 8006ecc:	08006f39 	.word	0x08006f39
 8006ed0:	0800710f 	.word	0x0800710f
 8006ed4:	0800710f 	.word	0x0800710f
 8006ed8:	080070af 	.word	0x080070af
 8006edc:	080070db 	.word	0x080070db
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	687a      	ldr	r2, [r7, #4]
 8006eea:	7c12      	ldrb	r2, [r2, #16]
 8006eec:	f107 0108 	add.w	r1, r7, #8
 8006ef0:	4610      	mov	r0, r2
 8006ef2:	4798      	blx	r3
 8006ef4:	60f8      	str	r0, [r7, #12]
      break;
 8006ef6:	e112      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	7c1b      	ldrb	r3, [r3, #16]
 8006efc:	2b00      	cmp	r3, #0
 8006efe:	d10d      	bne.n	8006f1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f08:	f107 0208 	add.w	r2, r7, #8
 8006f0c:	4610      	mov	r0, r2
 8006f0e:	4798      	blx	r3
 8006f10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	3301      	adds	r3, #1
 8006f16:	2202      	movs	r2, #2
 8006f18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006f1a:	e100      	b.n	800711e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006f22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006f24:	f107 0208 	add.w	r2, r7, #8
 8006f28:	4610      	mov	r0, r2
 8006f2a:	4798      	blx	r3
 8006f2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	3301      	adds	r3, #1
 8006f32:	2202      	movs	r2, #2
 8006f34:	701a      	strb	r2, [r3, #0]
      break;
 8006f36:	e0f2      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	885b      	ldrh	r3, [r3, #2]
 8006f3c:	b2db      	uxtb	r3, r3
 8006f3e:	2b05      	cmp	r3, #5
 8006f40:	f200 80ac 	bhi.w	800709c <USBD_GetDescriptor+0x204>
 8006f44:	a201      	add	r2, pc, #4	; (adr r2, 8006f4c <USBD_GetDescriptor+0xb4>)
 8006f46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f4a:	bf00      	nop
 8006f4c:	08006f65 	.word	0x08006f65
 8006f50:	08006f99 	.word	0x08006f99
 8006f54:	08006fcd 	.word	0x08006fcd
 8006f58:	08007001 	.word	0x08007001
 8006f5c:	08007035 	.word	0x08007035
 8006f60:	08007069 	.word	0x08007069
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f6a:	685b      	ldr	r3, [r3, #4]
 8006f6c:	2b00      	cmp	r3, #0
 8006f6e:	d00b      	beq.n	8006f88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f76:	685b      	ldr	r3, [r3, #4]
 8006f78:	687a      	ldr	r2, [r7, #4]
 8006f7a:	7c12      	ldrb	r2, [r2, #16]
 8006f7c:	f107 0108 	add.w	r1, r7, #8
 8006f80:	4610      	mov	r0, r2
 8006f82:	4798      	blx	r3
 8006f84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006f86:	e091      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006f88:	6839      	ldr	r1, [r7, #0]
 8006f8a:	6878      	ldr	r0, [r7, #4]
 8006f8c:	f000 facb 	bl	8007526 <USBD_CtlError>
            err++;
 8006f90:	7afb      	ldrb	r3, [r7, #11]
 8006f92:	3301      	adds	r3, #1
 8006f94:	72fb      	strb	r3, [r7, #11]
          break;
 8006f96:	e089      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006f9e:	689b      	ldr	r3, [r3, #8]
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d00b      	beq.n	8006fbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006faa:	689b      	ldr	r3, [r3, #8]
 8006fac:	687a      	ldr	r2, [r7, #4]
 8006fae:	7c12      	ldrb	r2, [r2, #16]
 8006fb0:	f107 0108 	add.w	r1, r7, #8
 8006fb4:	4610      	mov	r0, r2
 8006fb6:	4798      	blx	r3
 8006fb8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fba:	e077      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006fbc:	6839      	ldr	r1, [r7, #0]
 8006fbe:	6878      	ldr	r0, [r7, #4]
 8006fc0:	f000 fab1 	bl	8007526 <USBD_CtlError>
            err++;
 8006fc4:	7afb      	ldrb	r3, [r7, #11]
 8006fc6:	3301      	adds	r3, #1
 8006fc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006fca:	e06f      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fd2:	68db      	ldr	r3, [r3, #12]
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d00b      	beq.n	8006ff0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006fde:	68db      	ldr	r3, [r3, #12]
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	7c12      	ldrb	r2, [r2, #16]
 8006fe4:	f107 0108 	add.w	r1, r7, #8
 8006fe8:	4610      	mov	r0, r2
 8006fea:	4798      	blx	r3
 8006fec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006fee:	e05d      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ff0:	6839      	ldr	r1, [r7, #0]
 8006ff2:	6878      	ldr	r0, [r7, #4]
 8006ff4:	f000 fa97 	bl	8007526 <USBD_CtlError>
            err++;
 8006ff8:	7afb      	ldrb	r3, [r7, #11]
 8006ffa:	3301      	adds	r3, #1
 8006ffc:	72fb      	strb	r3, [r7, #11]
          break;
 8006ffe:	e055      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007006:	691b      	ldr	r3, [r3, #16]
 8007008:	2b00      	cmp	r3, #0
 800700a:	d00b      	beq.n	8007024 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007012:	691b      	ldr	r3, [r3, #16]
 8007014:	687a      	ldr	r2, [r7, #4]
 8007016:	7c12      	ldrb	r2, [r2, #16]
 8007018:	f107 0108 	add.w	r1, r7, #8
 800701c:	4610      	mov	r0, r2
 800701e:	4798      	blx	r3
 8007020:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007022:	e043      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007024:	6839      	ldr	r1, [r7, #0]
 8007026:	6878      	ldr	r0, [r7, #4]
 8007028:	f000 fa7d 	bl	8007526 <USBD_CtlError>
            err++;
 800702c:	7afb      	ldrb	r3, [r7, #11]
 800702e:	3301      	adds	r3, #1
 8007030:	72fb      	strb	r3, [r7, #11]
          break;
 8007032:	e03b      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800703a:	695b      	ldr	r3, [r3, #20]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d00b      	beq.n	8007058 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007046:	695b      	ldr	r3, [r3, #20]
 8007048:	687a      	ldr	r2, [r7, #4]
 800704a:	7c12      	ldrb	r2, [r2, #16]
 800704c:	f107 0108 	add.w	r1, r7, #8
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
 8007054:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007056:	e029      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007058:	6839      	ldr	r1, [r7, #0]
 800705a:	6878      	ldr	r0, [r7, #4]
 800705c:	f000 fa63 	bl	8007526 <USBD_CtlError>
            err++;
 8007060:	7afb      	ldrb	r3, [r7, #11]
 8007062:	3301      	adds	r3, #1
 8007064:	72fb      	strb	r3, [r7, #11]
          break;
 8007066:	e021      	b.n	80070ac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800706e:	699b      	ldr	r3, [r3, #24]
 8007070:	2b00      	cmp	r3, #0
 8007072:	d00b      	beq.n	800708c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800707a:	699b      	ldr	r3, [r3, #24]
 800707c:	687a      	ldr	r2, [r7, #4]
 800707e:	7c12      	ldrb	r2, [r2, #16]
 8007080:	f107 0108 	add.w	r1, r7, #8
 8007084:	4610      	mov	r0, r2
 8007086:	4798      	blx	r3
 8007088:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800708a:	e00f      	b.n	80070ac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800708c:	6839      	ldr	r1, [r7, #0]
 800708e:	6878      	ldr	r0, [r7, #4]
 8007090:	f000 fa49 	bl	8007526 <USBD_CtlError>
            err++;
 8007094:	7afb      	ldrb	r3, [r7, #11]
 8007096:	3301      	adds	r3, #1
 8007098:	72fb      	strb	r3, [r7, #11]
          break;
 800709a:	e007      	b.n	80070ac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 800709c:	6839      	ldr	r1, [r7, #0]
 800709e:	6878      	ldr	r0, [r7, #4]
 80070a0:	f000 fa41 	bl	8007526 <USBD_CtlError>
          err++;
 80070a4:	7afb      	ldrb	r3, [r7, #11]
 80070a6:	3301      	adds	r3, #1
 80070a8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80070aa:	bf00      	nop
      }
      break;
 80070ac:	e037      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	7c1b      	ldrb	r3, [r3, #16]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d109      	bne.n	80070ca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80070be:	f107 0208 	add.w	r2, r7, #8
 80070c2:	4610      	mov	r0, r2
 80070c4:	4798      	blx	r3
 80070c6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070c8:	e029      	b.n	800711e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070ca:	6839      	ldr	r1, [r7, #0]
 80070cc:	6878      	ldr	r0, [r7, #4]
 80070ce:	f000 fa2a 	bl	8007526 <USBD_CtlError>
        err++;
 80070d2:	7afb      	ldrb	r3, [r7, #11]
 80070d4:	3301      	adds	r3, #1
 80070d6:	72fb      	strb	r3, [r7, #11]
      break;
 80070d8:	e021      	b.n	800711e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	7c1b      	ldrb	r3, [r3, #16]
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d10d      	bne.n	80070fe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80070ea:	f107 0208 	add.w	r2, r7, #8
 80070ee:	4610      	mov	r0, r2
 80070f0:	4798      	blx	r3
 80070f2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	3301      	adds	r3, #1
 80070f8:	2207      	movs	r2, #7
 80070fa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80070fc:	e00f      	b.n	800711e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80070fe:	6839      	ldr	r1, [r7, #0]
 8007100:	6878      	ldr	r0, [r7, #4]
 8007102:	f000 fa10 	bl	8007526 <USBD_CtlError>
        err++;
 8007106:	7afb      	ldrb	r3, [r7, #11]
 8007108:	3301      	adds	r3, #1
 800710a:	72fb      	strb	r3, [r7, #11]
      break;
 800710c:	e007      	b.n	800711e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800710e:	6839      	ldr	r1, [r7, #0]
 8007110:	6878      	ldr	r0, [r7, #4]
 8007112:	f000 fa08 	bl	8007526 <USBD_CtlError>
      err++;
 8007116:	7afb      	ldrb	r3, [r7, #11]
 8007118:	3301      	adds	r3, #1
 800711a:	72fb      	strb	r3, [r7, #11]
      break;
 800711c:	bf00      	nop
  }

  if (err != 0U)
 800711e:	7afb      	ldrb	r3, [r7, #11]
 8007120:	2b00      	cmp	r3, #0
 8007122:	d11e      	bne.n	8007162 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	88db      	ldrh	r3, [r3, #6]
 8007128:	2b00      	cmp	r3, #0
 800712a:	d016      	beq.n	800715a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800712c:	893b      	ldrh	r3, [r7, #8]
 800712e:	2b00      	cmp	r3, #0
 8007130:	d00e      	beq.n	8007150 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007132:	683b      	ldr	r3, [r7, #0]
 8007134:	88da      	ldrh	r2, [r3, #6]
 8007136:	893b      	ldrh	r3, [r7, #8]
 8007138:	4293      	cmp	r3, r2
 800713a:	bf28      	it	cs
 800713c:	4613      	movcs	r3, r2
 800713e:	b29b      	uxth	r3, r3
 8007140:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007142:	893b      	ldrh	r3, [r7, #8]
 8007144:	461a      	mov	r2, r3
 8007146:	68f9      	ldr	r1, [r7, #12]
 8007148:	6878      	ldr	r0, [r7, #4]
 800714a:	f000 fa5d 	bl	8007608 <USBD_CtlSendData>
 800714e:	e009      	b.n	8007164 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8007150:	6839      	ldr	r1, [r7, #0]
 8007152:	6878      	ldr	r0, [r7, #4]
 8007154:	f000 f9e7 	bl	8007526 <USBD_CtlError>
 8007158:	e004      	b.n	8007164 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800715a:	6878      	ldr	r0, [r7, #4]
 800715c:	f000 faae 	bl	80076bc <USBD_CtlSendStatus>
 8007160:	e000      	b.n	8007164 <USBD_GetDescriptor+0x2cc>
    return;
 8007162:	bf00      	nop
  }
}
 8007164:	3710      	adds	r7, #16
 8007166:	46bd      	mov	sp, r7
 8007168:	bd80      	pop	{r7, pc}
 800716a:	bf00      	nop

0800716c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b084      	sub	sp, #16
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8007176:	683b      	ldr	r3, [r7, #0]
 8007178:	889b      	ldrh	r3, [r3, #4]
 800717a:	2b00      	cmp	r3, #0
 800717c:	d131      	bne.n	80071e2 <USBD_SetAddress+0x76>
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	88db      	ldrh	r3, [r3, #6]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d12d      	bne.n	80071e2 <USBD_SetAddress+0x76>
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	885b      	ldrh	r3, [r3, #2]
 800718a:	2b7f      	cmp	r3, #127	; 0x7f
 800718c:	d829      	bhi.n	80071e2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	885b      	ldrh	r3, [r3, #2]
 8007192:	b2db      	uxtb	r3, r3
 8007194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007198:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071a0:	b2db      	uxtb	r3, r3
 80071a2:	2b03      	cmp	r3, #3
 80071a4:	d104      	bne.n	80071b0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80071a6:	6839      	ldr	r1, [r7, #0]
 80071a8:	6878      	ldr	r0, [r7, #4]
 80071aa:	f000 f9bc 	bl	8007526 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071ae:	e01d      	b.n	80071ec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	7bfa      	ldrb	r2, [r7, #15]
 80071b4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80071b8:	7bfb      	ldrb	r3, [r7, #15]
 80071ba:	4619      	mov	r1, r3
 80071bc:	6878      	ldr	r0, [r7, #4]
 80071be:	f7fa fea1 	bl	8001f04 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fa7a 	bl	80076bc <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80071c8:	7bfb      	ldrb	r3, [r7, #15]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d004      	beq.n	80071d8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	2202      	movs	r2, #2
 80071d2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071d6:	e009      	b.n	80071ec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2201      	movs	r2, #1
 80071dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80071e0:	e004      	b.n	80071ec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80071e2:	6839      	ldr	r1, [r7, #0]
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f000 f99e 	bl	8007526 <USBD_CtlError>
  }
}
 80071ea:	bf00      	nop
 80071ec:	bf00      	nop
 80071ee:	3710      	adds	r7, #16
 80071f0:	46bd      	mov	sp, r7
 80071f2:	bd80      	pop	{r7, pc}

080071f4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80071fe:	2300      	movs	r3, #0
 8007200:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007202:	683b      	ldr	r3, [r7, #0]
 8007204:	885b      	ldrh	r3, [r3, #2]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	4b4e      	ldr	r3, [pc, #312]	; (8007344 <USBD_SetConfig+0x150>)
 800720a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800720c:	4b4d      	ldr	r3, [pc, #308]	; (8007344 <USBD_SetConfig+0x150>)
 800720e:	781b      	ldrb	r3, [r3, #0]
 8007210:	2b01      	cmp	r3, #1
 8007212:	d905      	bls.n	8007220 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007214:	6839      	ldr	r1, [r7, #0]
 8007216:	6878      	ldr	r0, [r7, #4]
 8007218:	f000 f985 	bl	8007526 <USBD_CtlError>
    return USBD_FAIL;
 800721c:	2303      	movs	r3, #3
 800721e:	e08c      	b.n	800733a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007226:	b2db      	uxtb	r3, r3
 8007228:	2b02      	cmp	r3, #2
 800722a:	d002      	beq.n	8007232 <USBD_SetConfig+0x3e>
 800722c:	2b03      	cmp	r3, #3
 800722e:	d029      	beq.n	8007284 <USBD_SetConfig+0x90>
 8007230:	e075      	b.n	800731e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007232:	4b44      	ldr	r3, [pc, #272]	; (8007344 <USBD_SetConfig+0x150>)
 8007234:	781b      	ldrb	r3, [r3, #0]
 8007236:	2b00      	cmp	r3, #0
 8007238:	d020      	beq.n	800727c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800723a:	4b42      	ldr	r3, [pc, #264]	; (8007344 <USBD_SetConfig+0x150>)
 800723c:	781b      	ldrb	r3, [r3, #0]
 800723e:	461a      	mov	r2, r3
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007244:	4b3f      	ldr	r3, [pc, #252]	; (8007344 <USBD_SetConfig+0x150>)
 8007246:	781b      	ldrb	r3, [r3, #0]
 8007248:	4619      	mov	r1, r3
 800724a:	6878      	ldr	r0, [r7, #4]
 800724c:	f7ff f821 	bl	8006292 <USBD_SetClassConfig>
 8007250:	4603      	mov	r3, r0
 8007252:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007254:	7bfb      	ldrb	r3, [r7, #15]
 8007256:	2b00      	cmp	r3, #0
 8007258:	d008      	beq.n	800726c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800725a:	6839      	ldr	r1, [r7, #0]
 800725c:	6878      	ldr	r0, [r7, #4]
 800725e:	f000 f962 	bl	8007526 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2202      	movs	r2, #2
 8007266:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800726a:	e065      	b.n	8007338 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 fa25 	bl	80076bc <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2203      	movs	r2, #3
 8007276:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800727a:	e05d      	b.n	8007338 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800727c:	6878      	ldr	r0, [r7, #4]
 800727e:	f000 fa1d 	bl	80076bc <USBD_CtlSendStatus>
      break;
 8007282:	e059      	b.n	8007338 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007284:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <USBD_SetConfig+0x150>)
 8007286:	781b      	ldrb	r3, [r3, #0]
 8007288:	2b00      	cmp	r3, #0
 800728a:	d112      	bne.n	80072b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	2202      	movs	r2, #2
 8007290:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007294:	4b2b      	ldr	r3, [pc, #172]	; (8007344 <USBD_SetConfig+0x150>)
 8007296:	781b      	ldrb	r3, [r3, #0]
 8007298:	461a      	mov	r2, r3
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800729e:	4b29      	ldr	r3, [pc, #164]	; (8007344 <USBD_SetConfig+0x150>)
 80072a0:	781b      	ldrb	r3, [r3, #0]
 80072a2:	4619      	mov	r1, r3
 80072a4:	6878      	ldr	r0, [r7, #4]
 80072a6:	f7ff f810 	bl	80062ca <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa06 	bl	80076bc <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80072b0:	e042      	b.n	8007338 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80072b2:	4b24      	ldr	r3, [pc, #144]	; (8007344 <USBD_SetConfig+0x150>)
 80072b4:	781b      	ldrb	r3, [r3, #0]
 80072b6:	461a      	mov	r2, r3
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	685b      	ldr	r3, [r3, #4]
 80072bc:	429a      	cmp	r2, r3
 80072be:	d02a      	beq.n	8007316 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	685b      	ldr	r3, [r3, #4]
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	4619      	mov	r1, r3
 80072c8:	6878      	ldr	r0, [r7, #4]
 80072ca:	f7fe fffe 	bl	80062ca <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80072ce:	4b1d      	ldr	r3, [pc, #116]	; (8007344 <USBD_SetConfig+0x150>)
 80072d0:	781b      	ldrb	r3, [r3, #0]
 80072d2:	461a      	mov	r2, r3
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80072d8:	4b1a      	ldr	r3, [pc, #104]	; (8007344 <USBD_SetConfig+0x150>)
 80072da:	781b      	ldrb	r3, [r3, #0]
 80072dc:	4619      	mov	r1, r3
 80072de:	6878      	ldr	r0, [r7, #4]
 80072e0:	f7fe ffd7 	bl	8006292 <USBD_SetClassConfig>
 80072e4:	4603      	mov	r3, r0
 80072e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80072e8:	7bfb      	ldrb	r3, [r7, #15]
 80072ea:	2b00      	cmp	r3, #0
 80072ec:	d00f      	beq.n	800730e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80072ee:	6839      	ldr	r1, [r7, #0]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 f918 	bl	8007526 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	685b      	ldr	r3, [r3, #4]
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	4619      	mov	r1, r3
 80072fe:	6878      	ldr	r0, [r7, #4]
 8007300:	f7fe ffe3 	bl	80062ca <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	2202      	movs	r2, #2
 8007308:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800730c:	e014      	b.n	8007338 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f9d4 	bl	80076bc <USBD_CtlSendStatus>
      break;
 8007314:	e010      	b.n	8007338 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007316:	6878      	ldr	r0, [r7, #4]
 8007318:	f000 f9d0 	bl	80076bc <USBD_CtlSendStatus>
      break;
 800731c:	e00c      	b.n	8007338 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800731e:	6839      	ldr	r1, [r7, #0]
 8007320:	6878      	ldr	r0, [r7, #4]
 8007322:	f000 f900 	bl	8007526 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007326:	4b07      	ldr	r3, [pc, #28]	; (8007344 <USBD_SetConfig+0x150>)
 8007328:	781b      	ldrb	r3, [r3, #0]
 800732a:	4619      	mov	r1, r3
 800732c:	6878      	ldr	r0, [r7, #4]
 800732e:	f7fe ffcc 	bl	80062ca <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007332:	2303      	movs	r3, #3
 8007334:	73fb      	strb	r3, [r7, #15]
      break;
 8007336:	bf00      	nop
  }

  return ret;
 8007338:	7bfb      	ldrb	r3, [r7, #15]
}
 800733a:	4618      	mov	r0, r3
 800733c:	3710      	adds	r7, #16
 800733e:	46bd      	mov	sp, r7
 8007340:	bd80      	pop	{r7, pc}
 8007342:	bf00      	nop
 8007344:	20002788 	.word	0x20002788

08007348 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b082      	sub	sp, #8
 800734c:	af00      	add	r7, sp, #0
 800734e:	6078      	str	r0, [r7, #4]
 8007350:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	88db      	ldrh	r3, [r3, #6]
 8007356:	2b01      	cmp	r3, #1
 8007358:	d004      	beq.n	8007364 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800735a:	6839      	ldr	r1, [r7, #0]
 800735c:	6878      	ldr	r0, [r7, #4]
 800735e:	f000 f8e2 	bl	8007526 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007362:	e023      	b.n	80073ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800736a:	b2db      	uxtb	r3, r3
 800736c:	2b02      	cmp	r3, #2
 800736e:	dc02      	bgt.n	8007376 <USBD_GetConfig+0x2e>
 8007370:	2b00      	cmp	r3, #0
 8007372:	dc03      	bgt.n	800737c <USBD_GetConfig+0x34>
 8007374:	e015      	b.n	80073a2 <USBD_GetConfig+0x5a>
 8007376:	2b03      	cmp	r3, #3
 8007378:	d00b      	beq.n	8007392 <USBD_GetConfig+0x4a>
 800737a:	e012      	b.n	80073a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2200      	movs	r2, #0
 8007380:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	3308      	adds	r3, #8
 8007386:	2201      	movs	r2, #1
 8007388:	4619      	mov	r1, r3
 800738a:	6878      	ldr	r0, [r7, #4]
 800738c:	f000 f93c 	bl	8007608 <USBD_CtlSendData>
        break;
 8007390:	e00c      	b.n	80073ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	3304      	adds	r3, #4
 8007396:	2201      	movs	r2, #1
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f000 f934 	bl	8007608 <USBD_CtlSendData>
        break;
 80073a0:	e004      	b.n	80073ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80073a2:	6839      	ldr	r1, [r7, #0]
 80073a4:	6878      	ldr	r0, [r7, #4]
 80073a6:	f000 f8be 	bl	8007526 <USBD_CtlError>
        break;
 80073aa:	bf00      	nop
}
 80073ac:	bf00      	nop
 80073ae:	3708      	adds	r7, #8
 80073b0:	46bd      	mov	sp, r7
 80073b2:	bd80      	pop	{r7, pc}

080073b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b082      	sub	sp, #8
 80073b8:	af00      	add	r7, sp, #0
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073c4:	b2db      	uxtb	r3, r3
 80073c6:	3b01      	subs	r3, #1
 80073c8:	2b02      	cmp	r3, #2
 80073ca:	d81e      	bhi.n	800740a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80073cc:	683b      	ldr	r3, [r7, #0]
 80073ce:	88db      	ldrh	r3, [r3, #6]
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d004      	beq.n	80073de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80073d4:	6839      	ldr	r1, [r7, #0]
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f000 f8a5 	bl	8007526 <USBD_CtlError>
        break;
 80073dc:	e01a      	b.n	8007414 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
#else
      pdev->dev_config_status = 0U;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	60da      	str	r2, [r3, #12]
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d005      	beq.n	80073fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	68db      	ldr	r3, [r3, #12]
 80073f2:	f043 0202 	orr.w	r2, r3, #2
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	330c      	adds	r3, #12
 80073fe:	2202      	movs	r2, #2
 8007400:	4619      	mov	r1, r3
 8007402:	6878      	ldr	r0, [r7, #4]
 8007404:	f000 f900 	bl	8007608 <USBD_CtlSendData>
      break;
 8007408:	e004      	b.n	8007414 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800740a:	6839      	ldr	r1, [r7, #0]
 800740c:	6878      	ldr	r0, [r7, #4]
 800740e:	f000 f88a 	bl	8007526 <USBD_CtlError>
      break;
 8007412:	bf00      	nop
  }
}
 8007414:	bf00      	nop
 8007416:	3708      	adds	r7, #8
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}

0800741c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800741c:	b580      	push	{r7, lr}
 800741e:	b082      	sub	sp, #8
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
 8007424:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	885b      	ldrh	r3, [r3, #2]
 800742a:	2b01      	cmp	r3, #1
 800742c:	d107      	bne.n	800743e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	2201      	movs	r2, #1
 8007432:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 f940 	bl	80076bc <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800743c:	e013      	b.n	8007466 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800743e:	683b      	ldr	r3, [r7, #0]
 8007440:	885b      	ldrh	r3, [r3, #2]
 8007442:	2b02      	cmp	r3, #2
 8007444:	d10b      	bne.n	800745e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	889b      	ldrh	r3, [r3, #4]
 800744a:	0a1b      	lsrs	r3, r3, #8
 800744c:	b29b      	uxth	r3, r3
 800744e:	b2da      	uxtb	r2, r3
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007456:	6878      	ldr	r0, [r7, #4]
 8007458:	f000 f930 	bl	80076bc <USBD_CtlSendStatus>
}
 800745c:	e003      	b.n	8007466 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800745e:	6839      	ldr	r1, [r7, #0]
 8007460:	6878      	ldr	r0, [r7, #4]
 8007462:	f000 f860 	bl	8007526 <USBD_CtlError>
}
 8007466:	bf00      	nop
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}

0800746e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800746e:	b580      	push	{r7, lr}
 8007470:	b082      	sub	sp, #8
 8007472:	af00      	add	r7, sp, #0
 8007474:	6078      	str	r0, [r7, #4]
 8007476:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800747e:	b2db      	uxtb	r3, r3
 8007480:	3b01      	subs	r3, #1
 8007482:	2b02      	cmp	r3, #2
 8007484:	d80b      	bhi.n	800749e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	885b      	ldrh	r3, [r3, #2]
 800748a:	2b01      	cmp	r3, #1
 800748c:	d10c      	bne.n	80074a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	2200      	movs	r2, #0
 8007492:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f000 f910 	bl	80076bc <USBD_CtlSendStatus>
      }
      break;
 800749c:	e004      	b.n	80074a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800749e:	6839      	ldr	r1, [r7, #0]
 80074a0:	6878      	ldr	r0, [r7, #4]
 80074a2:	f000 f840 	bl	8007526 <USBD_CtlError>
      break;
 80074a6:	e000      	b.n	80074aa <USBD_ClrFeature+0x3c>
      break;
 80074a8:	bf00      	nop
  }
}
 80074aa:	bf00      	nop
 80074ac:	3708      	adds	r7, #8
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b084      	sub	sp, #16
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	781a      	ldrb	r2, [r3, #0]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	3301      	adds	r3, #1
 80074cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	781a      	ldrb	r2, [r3, #0]
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	3301      	adds	r3, #1
 80074da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80074dc:	68f8      	ldr	r0, [r7, #12]
 80074de:	f7ff fa41 	bl	8006964 <SWAPBYTE>
 80074e2:	4603      	mov	r3, r0
 80074e4:	461a      	mov	r2, r3
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80074ea:	68fb      	ldr	r3, [r7, #12]
 80074ec:	3301      	adds	r3, #1
 80074ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	3301      	adds	r3, #1
 80074f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80074f6:	68f8      	ldr	r0, [r7, #12]
 80074f8:	f7ff fa34 	bl	8006964 <SWAPBYTE>
 80074fc:	4603      	mov	r3, r0
 80074fe:	461a      	mov	r2, r3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007504:	68fb      	ldr	r3, [r7, #12]
 8007506:	3301      	adds	r3, #1
 8007508:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800750a:	68fb      	ldr	r3, [r7, #12]
 800750c:	3301      	adds	r3, #1
 800750e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f7ff fa27 	bl	8006964 <SWAPBYTE>
 8007516:	4603      	mov	r3, r0
 8007518:	461a      	mov	r2, r3
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	80da      	strh	r2, [r3, #6]
}
 800751e:	bf00      	nop
 8007520:	3710      	adds	r7, #16
 8007522:	46bd      	mov	sp, r7
 8007524:	bd80      	pop	{r7, pc}

08007526 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007526:	b580      	push	{r7, lr}
 8007528:	b082      	sub	sp, #8
 800752a:	af00      	add	r7, sp, #0
 800752c:	6078      	str	r0, [r7, #4]
 800752e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007530:	2180      	movs	r1, #128	; 0x80
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f7fa fc7c 	bl	8001e30 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007538:	2100      	movs	r1, #0
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f7fa fc78 	bl	8001e30 <USBD_LL_StallEP>
}
 8007540:	bf00      	nop
 8007542:	3708      	adds	r7, #8
 8007544:	46bd      	mov	sp, r7
 8007546:	bd80      	pop	{r7, pc}

08007548 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b086      	sub	sp, #24
 800754c:	af00      	add	r7, sp, #0
 800754e:	60f8      	str	r0, [r7, #12]
 8007550:	60b9      	str	r1, [r7, #8]
 8007552:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007554:	2300      	movs	r3, #0
 8007556:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2b00      	cmp	r3, #0
 800755c:	d036      	beq.n	80075cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800755e:	68fb      	ldr	r3, [r7, #12]
 8007560:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007562:	6938      	ldr	r0, [r7, #16]
 8007564:	f000 f836 	bl	80075d4 <USBD_GetLen>
 8007568:	4603      	mov	r3, r0
 800756a:	3301      	adds	r3, #1
 800756c:	b29b      	uxth	r3, r3
 800756e:	005b      	lsls	r3, r3, #1
 8007570:	b29a      	uxth	r2, r3
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	68ba      	ldr	r2, [r7, #8]
 800757a:	4413      	add	r3, r2
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	7812      	ldrb	r2, [r2, #0]
 8007580:	701a      	strb	r2, [r3, #0]
  idx++;
 8007582:	7dfb      	ldrb	r3, [r7, #23]
 8007584:	3301      	adds	r3, #1
 8007586:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007588:	7dfb      	ldrb	r3, [r7, #23]
 800758a:	68ba      	ldr	r2, [r7, #8]
 800758c:	4413      	add	r3, r2
 800758e:	2203      	movs	r2, #3
 8007590:	701a      	strb	r2, [r3, #0]
  idx++;
 8007592:	7dfb      	ldrb	r3, [r7, #23]
 8007594:	3301      	adds	r3, #1
 8007596:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007598:	e013      	b.n	80075c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800759a:	7dfb      	ldrb	r3, [r7, #23]
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	4413      	add	r3, r2
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	7812      	ldrb	r2, [r2, #0]
 80075a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	3301      	adds	r3, #1
 80075aa:	613b      	str	r3, [r7, #16]
    idx++;
 80075ac:	7dfb      	ldrb	r3, [r7, #23]
 80075ae:	3301      	adds	r3, #1
 80075b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80075b2:	7dfb      	ldrb	r3, [r7, #23]
 80075b4:	68ba      	ldr	r2, [r7, #8]
 80075b6:	4413      	add	r3, r2
 80075b8:	2200      	movs	r2, #0
 80075ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80075bc:	7dfb      	ldrb	r3, [r7, #23]
 80075be:	3301      	adds	r3, #1
 80075c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	781b      	ldrb	r3, [r3, #0]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d1e7      	bne.n	800759a <USBD_GetString+0x52>
 80075ca:	e000      	b.n	80075ce <USBD_GetString+0x86>
    return;
 80075cc:	bf00      	nop
  }
}
 80075ce:	3718      	adds	r7, #24
 80075d0:	46bd      	mov	sp, r7
 80075d2:	bd80      	pop	{r7, pc}

080075d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b085      	sub	sp, #20
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80075dc:	2300      	movs	r3, #0
 80075de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80075e4:	e005      	b.n	80075f2 <USBD_GetLen+0x1e>
  {
    len++;
 80075e6:	7bfb      	ldrb	r3, [r7, #15]
 80075e8:	3301      	adds	r3, #1
 80075ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	3301      	adds	r3, #1
 80075f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80075f2:	68bb      	ldr	r3, [r7, #8]
 80075f4:	781b      	ldrb	r3, [r3, #0]
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d1f5      	bne.n	80075e6 <USBD_GetLen+0x12>
  }

  return len;
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80075fc:	4618      	mov	r0, r3
 80075fe:	3714      	adds	r7, #20
 8007600:	46bd      	mov	sp, r7
 8007602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007606:	4770      	bx	lr

08007608 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007608:	b580      	push	{r7, lr}
 800760a:	b084      	sub	sp, #16
 800760c:	af00      	add	r7, sp, #0
 800760e:	60f8      	str	r0, [r7, #12]
 8007610:	60b9      	str	r1, [r7, #8]
 8007612:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	2202      	movs	r2, #2
 8007618:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007622:	68fb      	ldr	r3, [r7, #12]
 8007624:	687a      	ldr	r2, [r7, #4]
 8007626:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	68ba      	ldr	r2, [r7, #8]
 800762c:	2100      	movs	r1, #0
 800762e:	68f8      	ldr	r0, [r7, #12]
 8007630:	f7fa fc87 	bl	8001f42 <USBD_LL_Transmit>

  return USBD_OK;
 8007634:	2300      	movs	r3, #0
}
 8007636:	4618      	mov	r0, r3
 8007638:	3710      	adds	r7, #16
 800763a:	46bd      	mov	sp, r7
 800763c:	bd80      	pop	{r7, pc}

0800763e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800763e:	b580      	push	{r7, lr}
 8007640:	b084      	sub	sp, #16
 8007642:	af00      	add	r7, sp, #0
 8007644:	60f8      	str	r0, [r7, #12]
 8007646:	60b9      	str	r1, [r7, #8]
 8007648:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	68ba      	ldr	r2, [r7, #8]
 800764e:	2100      	movs	r1, #0
 8007650:	68f8      	ldr	r0, [r7, #12]
 8007652:	f7fa fc76 	bl	8001f42 <USBD_LL_Transmit>

  return USBD_OK;
 8007656:	2300      	movs	r3, #0
}
 8007658:	4618      	mov	r0, r3
 800765a:	3710      	adds	r7, #16
 800765c:	46bd      	mov	sp, r7
 800765e:	bd80      	pop	{r7, pc}

08007660 <USBD_CtlPrepareRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint32_t len)
{
 8007660:	b580      	push	{r7, lr}
 8007662:	b084      	sub	sp, #16
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	2203      	movs	r2, #3
 8007670:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_out[0].total_length = len;
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	687a      	ldr	r2, [r7, #4]
 8007678:	f8c3 2158 	str.w	r2, [r3, #344]	; 0x158

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_out[0].rem_length = 0U;
#else
  pdev->ep_out[0].rem_length = len;
 800767c:	68fb      	ldr	r3, [r7, #12]
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	f8c3 215c 	str.w	r2, [r3, #348]	; 0x15c
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	68ba      	ldr	r2, [r7, #8]
 8007688:	2100      	movs	r1, #0
 800768a:	68f8      	ldr	r0, [r7, #12]
 800768c:	f7fa fc7a 	bl	8001f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007690:	2300      	movs	r3, #0
}
 8007692:	4618      	mov	r0, r3
 8007694:	3710      	adds	r7, #16
 8007696:	46bd      	mov	sp, r7
 8007698:	bd80      	pop	{r7, pc}

0800769a <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800769a:	b580      	push	{r7, lr}
 800769c:	b084      	sub	sp, #16
 800769e:	af00      	add	r7, sp, #0
 80076a0:	60f8      	str	r0, [r7, #12]
 80076a2:	60b9      	str	r1, [r7, #8]
 80076a4:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	68ba      	ldr	r2, [r7, #8]
 80076aa:	2100      	movs	r1, #0
 80076ac:	68f8      	ldr	r0, [r7, #12]
 80076ae:	f7fa fc69 	bl	8001f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076b2:	2300      	movs	r3, #0
}
 80076b4:	4618      	mov	r0, r3
 80076b6:	3710      	adds	r7, #16
 80076b8:	46bd      	mov	sp, r7
 80076ba:	bd80      	pop	{r7, pc}

080076bc <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80076bc:	b580      	push	{r7, lr}
 80076be:	b082      	sub	sp, #8
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	2204      	movs	r2, #4
 80076c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80076cc:	2300      	movs	r3, #0
 80076ce:	2200      	movs	r2, #0
 80076d0:	2100      	movs	r1, #0
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7fa fc35 	bl	8001f42 <USBD_LL_Transmit>

  return USBD_OK;
 80076d8:	2300      	movs	r3, #0
}
 80076da:	4618      	mov	r0, r3
 80076dc:	3708      	adds	r7, #8
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b082      	sub	sp, #8
 80076e6:	af00      	add	r7, sp, #0
 80076e8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80076ea:	687b      	ldr	r3, [r7, #4]
 80076ec:	2205      	movs	r2, #5
 80076ee:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80076f2:	2300      	movs	r3, #0
 80076f4:	2200      	movs	r2, #0
 80076f6:	2100      	movs	r1, #0
 80076f8:	6878      	ldr	r0, [r7, #4]
 80076fa:	f7fa fc43 	bl	8001f84 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3708      	adds	r7, #8
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	; (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	20000144 	.word	0x20000144

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	; (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	; (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	; (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	; (8007758 <__libc_init_array+0x44>)
 8007728:	f001 f824 	bl	8008774 <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	080088cc 	.word	0x080088cc
 8007750:	080088cc 	.word	0x080088cc
 8007754:	080088cc 	.word	0x080088cc
 8007758:	080088d0 	.word	0x080088d0

0800775c <memset>:
 800775c:	4402      	add	r2, r0
 800775e:	4603      	mov	r3, r0
 8007760:	4293      	cmp	r3, r2
 8007762:	d100      	bne.n	8007766 <memset+0xa>
 8007764:	4770      	bx	lr
 8007766:	f803 1b01 	strb.w	r1, [r3], #1
 800776a:	e7f9      	b.n	8007760 <memset+0x4>

0800776c <iprintf>:
 800776c:	b40f      	push	{r0, r1, r2, r3}
 800776e:	4b0a      	ldr	r3, [pc, #40]	; (8007798 <iprintf+0x2c>)
 8007770:	b513      	push	{r0, r1, r4, lr}
 8007772:	681c      	ldr	r4, [r3, #0]
 8007774:	b124      	cbz	r4, 8007780 <iprintf+0x14>
 8007776:	69a3      	ldr	r3, [r4, #24]
 8007778:	b913      	cbnz	r3, 8007780 <iprintf+0x14>
 800777a:	4620      	mov	r0, r4
 800777c:	f000 fa5e 	bl	8007c3c <__sinit>
 8007780:	ab05      	add	r3, sp, #20
 8007782:	9a04      	ldr	r2, [sp, #16]
 8007784:	68a1      	ldr	r1, [r4, #8]
 8007786:	9301      	str	r3, [sp, #4]
 8007788:	4620      	mov	r0, r4
 800778a:	f000 fc67 	bl	800805c <_vfiprintf_r>
 800778e:	b002      	add	sp, #8
 8007790:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007794:	b004      	add	sp, #16
 8007796:	4770      	bx	lr
 8007798:	20000144 	.word	0x20000144

0800779c <_puts_r>:
 800779c:	b570      	push	{r4, r5, r6, lr}
 800779e:	460e      	mov	r6, r1
 80077a0:	4605      	mov	r5, r0
 80077a2:	b118      	cbz	r0, 80077ac <_puts_r+0x10>
 80077a4:	6983      	ldr	r3, [r0, #24]
 80077a6:	b90b      	cbnz	r3, 80077ac <_puts_r+0x10>
 80077a8:	f000 fa48 	bl	8007c3c <__sinit>
 80077ac:	69ab      	ldr	r3, [r5, #24]
 80077ae:	68ac      	ldr	r4, [r5, #8]
 80077b0:	b913      	cbnz	r3, 80077b8 <_puts_r+0x1c>
 80077b2:	4628      	mov	r0, r5
 80077b4:	f000 fa42 	bl	8007c3c <__sinit>
 80077b8:	4b2c      	ldr	r3, [pc, #176]	; (800786c <_puts_r+0xd0>)
 80077ba:	429c      	cmp	r4, r3
 80077bc:	d120      	bne.n	8007800 <_puts_r+0x64>
 80077be:	686c      	ldr	r4, [r5, #4]
 80077c0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80077c2:	07db      	lsls	r3, r3, #31
 80077c4:	d405      	bmi.n	80077d2 <_puts_r+0x36>
 80077c6:	89a3      	ldrh	r3, [r4, #12]
 80077c8:	0598      	lsls	r0, r3, #22
 80077ca:	d402      	bmi.n	80077d2 <_puts_r+0x36>
 80077cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80077ce:	f000 fad3 	bl	8007d78 <__retarget_lock_acquire_recursive>
 80077d2:	89a3      	ldrh	r3, [r4, #12]
 80077d4:	0719      	lsls	r1, r3, #28
 80077d6:	d51d      	bpl.n	8007814 <_puts_r+0x78>
 80077d8:	6923      	ldr	r3, [r4, #16]
 80077da:	b1db      	cbz	r3, 8007814 <_puts_r+0x78>
 80077dc:	3e01      	subs	r6, #1
 80077de:	68a3      	ldr	r3, [r4, #8]
 80077e0:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80077e4:	3b01      	subs	r3, #1
 80077e6:	60a3      	str	r3, [r4, #8]
 80077e8:	bb39      	cbnz	r1, 800783a <_puts_r+0x9e>
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	da38      	bge.n	8007860 <_puts_r+0xc4>
 80077ee:	4622      	mov	r2, r4
 80077f0:	210a      	movs	r1, #10
 80077f2:	4628      	mov	r0, r5
 80077f4:	f000 f848 	bl	8007888 <__swbuf_r>
 80077f8:	3001      	adds	r0, #1
 80077fa:	d011      	beq.n	8007820 <_puts_r+0x84>
 80077fc:	250a      	movs	r5, #10
 80077fe:	e011      	b.n	8007824 <_puts_r+0x88>
 8007800:	4b1b      	ldr	r3, [pc, #108]	; (8007870 <_puts_r+0xd4>)
 8007802:	429c      	cmp	r4, r3
 8007804:	d101      	bne.n	800780a <_puts_r+0x6e>
 8007806:	68ac      	ldr	r4, [r5, #8]
 8007808:	e7da      	b.n	80077c0 <_puts_r+0x24>
 800780a:	4b1a      	ldr	r3, [pc, #104]	; (8007874 <_puts_r+0xd8>)
 800780c:	429c      	cmp	r4, r3
 800780e:	bf08      	it	eq
 8007810:	68ec      	ldreq	r4, [r5, #12]
 8007812:	e7d5      	b.n	80077c0 <_puts_r+0x24>
 8007814:	4621      	mov	r1, r4
 8007816:	4628      	mov	r0, r5
 8007818:	f000 f888 	bl	800792c <__swsetup_r>
 800781c:	2800      	cmp	r0, #0
 800781e:	d0dd      	beq.n	80077dc <_puts_r+0x40>
 8007820:	f04f 35ff 	mov.w	r5, #4294967295
 8007824:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007826:	07da      	lsls	r2, r3, #31
 8007828:	d405      	bmi.n	8007836 <_puts_r+0x9a>
 800782a:	89a3      	ldrh	r3, [r4, #12]
 800782c:	059b      	lsls	r3, r3, #22
 800782e:	d402      	bmi.n	8007836 <_puts_r+0x9a>
 8007830:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007832:	f000 faa2 	bl	8007d7a <__retarget_lock_release_recursive>
 8007836:	4628      	mov	r0, r5
 8007838:	bd70      	pop	{r4, r5, r6, pc}
 800783a:	2b00      	cmp	r3, #0
 800783c:	da04      	bge.n	8007848 <_puts_r+0xac>
 800783e:	69a2      	ldr	r2, [r4, #24]
 8007840:	429a      	cmp	r2, r3
 8007842:	dc06      	bgt.n	8007852 <_puts_r+0xb6>
 8007844:	290a      	cmp	r1, #10
 8007846:	d004      	beq.n	8007852 <_puts_r+0xb6>
 8007848:	6823      	ldr	r3, [r4, #0]
 800784a:	1c5a      	adds	r2, r3, #1
 800784c:	6022      	str	r2, [r4, #0]
 800784e:	7019      	strb	r1, [r3, #0]
 8007850:	e7c5      	b.n	80077de <_puts_r+0x42>
 8007852:	4622      	mov	r2, r4
 8007854:	4628      	mov	r0, r5
 8007856:	f000 f817 	bl	8007888 <__swbuf_r>
 800785a:	3001      	adds	r0, #1
 800785c:	d1bf      	bne.n	80077de <_puts_r+0x42>
 800785e:	e7df      	b.n	8007820 <_puts_r+0x84>
 8007860:	6823      	ldr	r3, [r4, #0]
 8007862:	250a      	movs	r5, #10
 8007864:	1c5a      	adds	r2, r3, #1
 8007866:	6022      	str	r2, [r4, #0]
 8007868:	701d      	strb	r5, [r3, #0]
 800786a:	e7db      	b.n	8007824 <_puts_r+0x88>
 800786c:	08008850 	.word	0x08008850
 8007870:	08008870 	.word	0x08008870
 8007874:	08008830 	.word	0x08008830

08007878 <puts>:
 8007878:	4b02      	ldr	r3, [pc, #8]	; (8007884 <puts+0xc>)
 800787a:	4601      	mov	r1, r0
 800787c:	6818      	ldr	r0, [r3, #0]
 800787e:	f7ff bf8d 	b.w	800779c <_puts_r>
 8007882:	bf00      	nop
 8007884:	20000144 	.word	0x20000144

08007888 <__swbuf_r>:
 8007888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800788a:	460e      	mov	r6, r1
 800788c:	4614      	mov	r4, r2
 800788e:	4605      	mov	r5, r0
 8007890:	b118      	cbz	r0, 800789a <__swbuf_r+0x12>
 8007892:	6983      	ldr	r3, [r0, #24]
 8007894:	b90b      	cbnz	r3, 800789a <__swbuf_r+0x12>
 8007896:	f000 f9d1 	bl	8007c3c <__sinit>
 800789a:	4b21      	ldr	r3, [pc, #132]	; (8007920 <__swbuf_r+0x98>)
 800789c:	429c      	cmp	r4, r3
 800789e:	d12b      	bne.n	80078f8 <__swbuf_r+0x70>
 80078a0:	686c      	ldr	r4, [r5, #4]
 80078a2:	69a3      	ldr	r3, [r4, #24]
 80078a4:	60a3      	str	r3, [r4, #8]
 80078a6:	89a3      	ldrh	r3, [r4, #12]
 80078a8:	071a      	lsls	r2, r3, #28
 80078aa:	d52f      	bpl.n	800790c <__swbuf_r+0x84>
 80078ac:	6923      	ldr	r3, [r4, #16]
 80078ae:	b36b      	cbz	r3, 800790c <__swbuf_r+0x84>
 80078b0:	6923      	ldr	r3, [r4, #16]
 80078b2:	6820      	ldr	r0, [r4, #0]
 80078b4:	1ac0      	subs	r0, r0, r3
 80078b6:	6963      	ldr	r3, [r4, #20]
 80078b8:	b2f6      	uxtb	r6, r6
 80078ba:	4283      	cmp	r3, r0
 80078bc:	4637      	mov	r7, r6
 80078be:	dc04      	bgt.n	80078ca <__swbuf_r+0x42>
 80078c0:	4621      	mov	r1, r4
 80078c2:	4628      	mov	r0, r5
 80078c4:	f000 f926 	bl	8007b14 <_fflush_r>
 80078c8:	bb30      	cbnz	r0, 8007918 <__swbuf_r+0x90>
 80078ca:	68a3      	ldr	r3, [r4, #8]
 80078cc:	3b01      	subs	r3, #1
 80078ce:	60a3      	str	r3, [r4, #8]
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	1c5a      	adds	r2, r3, #1
 80078d4:	6022      	str	r2, [r4, #0]
 80078d6:	701e      	strb	r6, [r3, #0]
 80078d8:	6963      	ldr	r3, [r4, #20]
 80078da:	3001      	adds	r0, #1
 80078dc:	4283      	cmp	r3, r0
 80078de:	d004      	beq.n	80078ea <__swbuf_r+0x62>
 80078e0:	89a3      	ldrh	r3, [r4, #12]
 80078e2:	07db      	lsls	r3, r3, #31
 80078e4:	d506      	bpl.n	80078f4 <__swbuf_r+0x6c>
 80078e6:	2e0a      	cmp	r6, #10
 80078e8:	d104      	bne.n	80078f4 <__swbuf_r+0x6c>
 80078ea:	4621      	mov	r1, r4
 80078ec:	4628      	mov	r0, r5
 80078ee:	f000 f911 	bl	8007b14 <_fflush_r>
 80078f2:	b988      	cbnz	r0, 8007918 <__swbuf_r+0x90>
 80078f4:	4638      	mov	r0, r7
 80078f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80078f8:	4b0a      	ldr	r3, [pc, #40]	; (8007924 <__swbuf_r+0x9c>)
 80078fa:	429c      	cmp	r4, r3
 80078fc:	d101      	bne.n	8007902 <__swbuf_r+0x7a>
 80078fe:	68ac      	ldr	r4, [r5, #8]
 8007900:	e7cf      	b.n	80078a2 <__swbuf_r+0x1a>
 8007902:	4b09      	ldr	r3, [pc, #36]	; (8007928 <__swbuf_r+0xa0>)
 8007904:	429c      	cmp	r4, r3
 8007906:	bf08      	it	eq
 8007908:	68ec      	ldreq	r4, [r5, #12]
 800790a:	e7ca      	b.n	80078a2 <__swbuf_r+0x1a>
 800790c:	4621      	mov	r1, r4
 800790e:	4628      	mov	r0, r5
 8007910:	f000 f80c 	bl	800792c <__swsetup_r>
 8007914:	2800      	cmp	r0, #0
 8007916:	d0cb      	beq.n	80078b0 <__swbuf_r+0x28>
 8007918:	f04f 37ff 	mov.w	r7, #4294967295
 800791c:	e7ea      	b.n	80078f4 <__swbuf_r+0x6c>
 800791e:	bf00      	nop
 8007920:	08008850 	.word	0x08008850
 8007924:	08008870 	.word	0x08008870
 8007928:	08008830 	.word	0x08008830

0800792c <__swsetup_r>:
 800792c:	4b32      	ldr	r3, [pc, #200]	; (80079f8 <__swsetup_r+0xcc>)
 800792e:	b570      	push	{r4, r5, r6, lr}
 8007930:	681d      	ldr	r5, [r3, #0]
 8007932:	4606      	mov	r6, r0
 8007934:	460c      	mov	r4, r1
 8007936:	b125      	cbz	r5, 8007942 <__swsetup_r+0x16>
 8007938:	69ab      	ldr	r3, [r5, #24]
 800793a:	b913      	cbnz	r3, 8007942 <__swsetup_r+0x16>
 800793c:	4628      	mov	r0, r5
 800793e:	f000 f97d 	bl	8007c3c <__sinit>
 8007942:	4b2e      	ldr	r3, [pc, #184]	; (80079fc <__swsetup_r+0xd0>)
 8007944:	429c      	cmp	r4, r3
 8007946:	d10f      	bne.n	8007968 <__swsetup_r+0x3c>
 8007948:	686c      	ldr	r4, [r5, #4]
 800794a:	89a3      	ldrh	r3, [r4, #12]
 800794c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007950:	0719      	lsls	r1, r3, #28
 8007952:	d42c      	bmi.n	80079ae <__swsetup_r+0x82>
 8007954:	06dd      	lsls	r5, r3, #27
 8007956:	d411      	bmi.n	800797c <__swsetup_r+0x50>
 8007958:	2309      	movs	r3, #9
 800795a:	6033      	str	r3, [r6, #0]
 800795c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007960:	81a3      	strh	r3, [r4, #12]
 8007962:	f04f 30ff 	mov.w	r0, #4294967295
 8007966:	e03e      	b.n	80079e6 <__swsetup_r+0xba>
 8007968:	4b25      	ldr	r3, [pc, #148]	; (8007a00 <__swsetup_r+0xd4>)
 800796a:	429c      	cmp	r4, r3
 800796c:	d101      	bne.n	8007972 <__swsetup_r+0x46>
 800796e:	68ac      	ldr	r4, [r5, #8]
 8007970:	e7eb      	b.n	800794a <__swsetup_r+0x1e>
 8007972:	4b24      	ldr	r3, [pc, #144]	; (8007a04 <__swsetup_r+0xd8>)
 8007974:	429c      	cmp	r4, r3
 8007976:	bf08      	it	eq
 8007978:	68ec      	ldreq	r4, [r5, #12]
 800797a:	e7e6      	b.n	800794a <__swsetup_r+0x1e>
 800797c:	0758      	lsls	r0, r3, #29
 800797e:	d512      	bpl.n	80079a6 <__swsetup_r+0x7a>
 8007980:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007982:	b141      	cbz	r1, 8007996 <__swsetup_r+0x6a>
 8007984:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007988:	4299      	cmp	r1, r3
 800798a:	d002      	beq.n	8007992 <__swsetup_r+0x66>
 800798c:	4630      	mov	r0, r6
 800798e:	f000 fa5b 	bl	8007e48 <_free_r>
 8007992:	2300      	movs	r3, #0
 8007994:	6363      	str	r3, [r4, #52]	; 0x34
 8007996:	89a3      	ldrh	r3, [r4, #12]
 8007998:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800799c:	81a3      	strh	r3, [r4, #12]
 800799e:	2300      	movs	r3, #0
 80079a0:	6063      	str	r3, [r4, #4]
 80079a2:	6923      	ldr	r3, [r4, #16]
 80079a4:	6023      	str	r3, [r4, #0]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	f043 0308 	orr.w	r3, r3, #8
 80079ac:	81a3      	strh	r3, [r4, #12]
 80079ae:	6923      	ldr	r3, [r4, #16]
 80079b0:	b94b      	cbnz	r3, 80079c6 <__swsetup_r+0x9a>
 80079b2:	89a3      	ldrh	r3, [r4, #12]
 80079b4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80079b8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80079bc:	d003      	beq.n	80079c6 <__swsetup_r+0x9a>
 80079be:	4621      	mov	r1, r4
 80079c0:	4630      	mov	r0, r6
 80079c2:	f000 fa01 	bl	8007dc8 <__smakebuf_r>
 80079c6:	89a0      	ldrh	r0, [r4, #12]
 80079c8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80079cc:	f010 0301 	ands.w	r3, r0, #1
 80079d0:	d00a      	beq.n	80079e8 <__swsetup_r+0xbc>
 80079d2:	2300      	movs	r3, #0
 80079d4:	60a3      	str	r3, [r4, #8]
 80079d6:	6963      	ldr	r3, [r4, #20]
 80079d8:	425b      	negs	r3, r3
 80079da:	61a3      	str	r3, [r4, #24]
 80079dc:	6923      	ldr	r3, [r4, #16]
 80079de:	b943      	cbnz	r3, 80079f2 <__swsetup_r+0xc6>
 80079e0:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80079e4:	d1ba      	bne.n	800795c <__swsetup_r+0x30>
 80079e6:	bd70      	pop	{r4, r5, r6, pc}
 80079e8:	0781      	lsls	r1, r0, #30
 80079ea:	bf58      	it	pl
 80079ec:	6963      	ldrpl	r3, [r4, #20]
 80079ee:	60a3      	str	r3, [r4, #8]
 80079f0:	e7f4      	b.n	80079dc <__swsetup_r+0xb0>
 80079f2:	2000      	movs	r0, #0
 80079f4:	e7f7      	b.n	80079e6 <__swsetup_r+0xba>
 80079f6:	bf00      	nop
 80079f8:	20000144 	.word	0x20000144
 80079fc:	08008850 	.word	0x08008850
 8007a00:	08008870 	.word	0x08008870
 8007a04:	08008830 	.word	0x08008830

08007a08 <__sflush_r>:
 8007a08:	898a      	ldrh	r2, [r1, #12]
 8007a0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a0e:	4605      	mov	r5, r0
 8007a10:	0710      	lsls	r0, r2, #28
 8007a12:	460c      	mov	r4, r1
 8007a14:	d458      	bmi.n	8007ac8 <__sflush_r+0xc0>
 8007a16:	684b      	ldr	r3, [r1, #4]
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	dc05      	bgt.n	8007a28 <__sflush_r+0x20>
 8007a1c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	dc02      	bgt.n	8007a28 <__sflush_r+0x20>
 8007a22:	2000      	movs	r0, #0
 8007a24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a28:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a2a:	2e00      	cmp	r6, #0
 8007a2c:	d0f9      	beq.n	8007a22 <__sflush_r+0x1a>
 8007a2e:	2300      	movs	r3, #0
 8007a30:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007a34:	682f      	ldr	r7, [r5, #0]
 8007a36:	602b      	str	r3, [r5, #0]
 8007a38:	d032      	beq.n	8007aa0 <__sflush_r+0x98>
 8007a3a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007a3c:	89a3      	ldrh	r3, [r4, #12]
 8007a3e:	075a      	lsls	r2, r3, #29
 8007a40:	d505      	bpl.n	8007a4e <__sflush_r+0x46>
 8007a42:	6863      	ldr	r3, [r4, #4]
 8007a44:	1ac0      	subs	r0, r0, r3
 8007a46:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007a48:	b10b      	cbz	r3, 8007a4e <__sflush_r+0x46>
 8007a4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007a4c:	1ac0      	subs	r0, r0, r3
 8007a4e:	2300      	movs	r3, #0
 8007a50:	4602      	mov	r2, r0
 8007a52:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007a54:	6a21      	ldr	r1, [r4, #32]
 8007a56:	4628      	mov	r0, r5
 8007a58:	47b0      	blx	r6
 8007a5a:	1c43      	adds	r3, r0, #1
 8007a5c:	89a3      	ldrh	r3, [r4, #12]
 8007a5e:	d106      	bne.n	8007a6e <__sflush_r+0x66>
 8007a60:	6829      	ldr	r1, [r5, #0]
 8007a62:	291d      	cmp	r1, #29
 8007a64:	d82c      	bhi.n	8007ac0 <__sflush_r+0xb8>
 8007a66:	4a2a      	ldr	r2, [pc, #168]	; (8007b10 <__sflush_r+0x108>)
 8007a68:	40ca      	lsrs	r2, r1
 8007a6a:	07d6      	lsls	r6, r2, #31
 8007a6c:	d528      	bpl.n	8007ac0 <__sflush_r+0xb8>
 8007a6e:	2200      	movs	r2, #0
 8007a70:	6062      	str	r2, [r4, #4]
 8007a72:	04d9      	lsls	r1, r3, #19
 8007a74:	6922      	ldr	r2, [r4, #16]
 8007a76:	6022      	str	r2, [r4, #0]
 8007a78:	d504      	bpl.n	8007a84 <__sflush_r+0x7c>
 8007a7a:	1c42      	adds	r2, r0, #1
 8007a7c:	d101      	bne.n	8007a82 <__sflush_r+0x7a>
 8007a7e:	682b      	ldr	r3, [r5, #0]
 8007a80:	b903      	cbnz	r3, 8007a84 <__sflush_r+0x7c>
 8007a82:	6560      	str	r0, [r4, #84]	; 0x54
 8007a84:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007a86:	602f      	str	r7, [r5, #0]
 8007a88:	2900      	cmp	r1, #0
 8007a8a:	d0ca      	beq.n	8007a22 <__sflush_r+0x1a>
 8007a8c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007a90:	4299      	cmp	r1, r3
 8007a92:	d002      	beq.n	8007a9a <__sflush_r+0x92>
 8007a94:	4628      	mov	r0, r5
 8007a96:	f000 f9d7 	bl	8007e48 <_free_r>
 8007a9a:	2000      	movs	r0, #0
 8007a9c:	6360      	str	r0, [r4, #52]	; 0x34
 8007a9e:	e7c1      	b.n	8007a24 <__sflush_r+0x1c>
 8007aa0:	6a21      	ldr	r1, [r4, #32]
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4628      	mov	r0, r5
 8007aa6:	47b0      	blx	r6
 8007aa8:	1c41      	adds	r1, r0, #1
 8007aaa:	d1c7      	bne.n	8007a3c <__sflush_r+0x34>
 8007aac:	682b      	ldr	r3, [r5, #0]
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d0c4      	beq.n	8007a3c <__sflush_r+0x34>
 8007ab2:	2b1d      	cmp	r3, #29
 8007ab4:	d001      	beq.n	8007aba <__sflush_r+0xb2>
 8007ab6:	2b16      	cmp	r3, #22
 8007ab8:	d101      	bne.n	8007abe <__sflush_r+0xb6>
 8007aba:	602f      	str	r7, [r5, #0]
 8007abc:	e7b1      	b.n	8007a22 <__sflush_r+0x1a>
 8007abe:	89a3      	ldrh	r3, [r4, #12]
 8007ac0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ac4:	81a3      	strh	r3, [r4, #12]
 8007ac6:	e7ad      	b.n	8007a24 <__sflush_r+0x1c>
 8007ac8:	690f      	ldr	r7, [r1, #16]
 8007aca:	2f00      	cmp	r7, #0
 8007acc:	d0a9      	beq.n	8007a22 <__sflush_r+0x1a>
 8007ace:	0793      	lsls	r3, r2, #30
 8007ad0:	680e      	ldr	r6, [r1, #0]
 8007ad2:	bf08      	it	eq
 8007ad4:	694b      	ldreq	r3, [r1, #20]
 8007ad6:	600f      	str	r7, [r1, #0]
 8007ad8:	bf18      	it	ne
 8007ada:	2300      	movne	r3, #0
 8007adc:	eba6 0807 	sub.w	r8, r6, r7
 8007ae0:	608b      	str	r3, [r1, #8]
 8007ae2:	f1b8 0f00 	cmp.w	r8, #0
 8007ae6:	dd9c      	ble.n	8007a22 <__sflush_r+0x1a>
 8007ae8:	6a21      	ldr	r1, [r4, #32]
 8007aea:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007aec:	4643      	mov	r3, r8
 8007aee:	463a      	mov	r2, r7
 8007af0:	4628      	mov	r0, r5
 8007af2:	47b0      	blx	r6
 8007af4:	2800      	cmp	r0, #0
 8007af6:	dc06      	bgt.n	8007b06 <__sflush_r+0xfe>
 8007af8:	89a3      	ldrh	r3, [r4, #12]
 8007afa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007afe:	81a3      	strh	r3, [r4, #12]
 8007b00:	f04f 30ff 	mov.w	r0, #4294967295
 8007b04:	e78e      	b.n	8007a24 <__sflush_r+0x1c>
 8007b06:	4407      	add	r7, r0
 8007b08:	eba8 0800 	sub.w	r8, r8, r0
 8007b0c:	e7e9      	b.n	8007ae2 <__sflush_r+0xda>
 8007b0e:	bf00      	nop
 8007b10:	20400001 	.word	0x20400001

08007b14 <_fflush_r>:
 8007b14:	b538      	push	{r3, r4, r5, lr}
 8007b16:	690b      	ldr	r3, [r1, #16]
 8007b18:	4605      	mov	r5, r0
 8007b1a:	460c      	mov	r4, r1
 8007b1c:	b913      	cbnz	r3, 8007b24 <_fflush_r+0x10>
 8007b1e:	2500      	movs	r5, #0
 8007b20:	4628      	mov	r0, r5
 8007b22:	bd38      	pop	{r3, r4, r5, pc}
 8007b24:	b118      	cbz	r0, 8007b2e <_fflush_r+0x1a>
 8007b26:	6983      	ldr	r3, [r0, #24]
 8007b28:	b90b      	cbnz	r3, 8007b2e <_fflush_r+0x1a>
 8007b2a:	f000 f887 	bl	8007c3c <__sinit>
 8007b2e:	4b14      	ldr	r3, [pc, #80]	; (8007b80 <_fflush_r+0x6c>)
 8007b30:	429c      	cmp	r4, r3
 8007b32:	d11b      	bne.n	8007b6c <_fflush_r+0x58>
 8007b34:	686c      	ldr	r4, [r5, #4]
 8007b36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d0ef      	beq.n	8007b1e <_fflush_r+0xa>
 8007b3e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007b40:	07d0      	lsls	r0, r2, #31
 8007b42:	d404      	bmi.n	8007b4e <_fflush_r+0x3a>
 8007b44:	0599      	lsls	r1, r3, #22
 8007b46:	d402      	bmi.n	8007b4e <_fflush_r+0x3a>
 8007b48:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b4a:	f000 f915 	bl	8007d78 <__retarget_lock_acquire_recursive>
 8007b4e:	4628      	mov	r0, r5
 8007b50:	4621      	mov	r1, r4
 8007b52:	f7ff ff59 	bl	8007a08 <__sflush_r>
 8007b56:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007b58:	07da      	lsls	r2, r3, #31
 8007b5a:	4605      	mov	r5, r0
 8007b5c:	d4e0      	bmi.n	8007b20 <_fflush_r+0xc>
 8007b5e:	89a3      	ldrh	r3, [r4, #12]
 8007b60:	059b      	lsls	r3, r3, #22
 8007b62:	d4dd      	bmi.n	8007b20 <_fflush_r+0xc>
 8007b64:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007b66:	f000 f908 	bl	8007d7a <__retarget_lock_release_recursive>
 8007b6a:	e7d9      	b.n	8007b20 <_fflush_r+0xc>
 8007b6c:	4b05      	ldr	r3, [pc, #20]	; (8007b84 <_fflush_r+0x70>)
 8007b6e:	429c      	cmp	r4, r3
 8007b70:	d101      	bne.n	8007b76 <_fflush_r+0x62>
 8007b72:	68ac      	ldr	r4, [r5, #8]
 8007b74:	e7df      	b.n	8007b36 <_fflush_r+0x22>
 8007b76:	4b04      	ldr	r3, [pc, #16]	; (8007b88 <_fflush_r+0x74>)
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	bf08      	it	eq
 8007b7c:	68ec      	ldreq	r4, [r5, #12]
 8007b7e:	e7da      	b.n	8007b36 <_fflush_r+0x22>
 8007b80:	08008850 	.word	0x08008850
 8007b84:	08008870 	.word	0x08008870
 8007b88:	08008830 	.word	0x08008830

08007b8c <std>:
 8007b8c:	2300      	movs	r3, #0
 8007b8e:	b510      	push	{r4, lr}
 8007b90:	4604      	mov	r4, r0
 8007b92:	e9c0 3300 	strd	r3, r3, [r0]
 8007b96:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007b9a:	6083      	str	r3, [r0, #8]
 8007b9c:	8181      	strh	r1, [r0, #12]
 8007b9e:	6643      	str	r3, [r0, #100]	; 0x64
 8007ba0:	81c2      	strh	r2, [r0, #14]
 8007ba2:	6183      	str	r3, [r0, #24]
 8007ba4:	4619      	mov	r1, r3
 8007ba6:	2208      	movs	r2, #8
 8007ba8:	305c      	adds	r0, #92	; 0x5c
 8007baa:	f7ff fdd7 	bl	800775c <memset>
 8007bae:	4b05      	ldr	r3, [pc, #20]	; (8007bc4 <std+0x38>)
 8007bb0:	6263      	str	r3, [r4, #36]	; 0x24
 8007bb2:	4b05      	ldr	r3, [pc, #20]	; (8007bc8 <std+0x3c>)
 8007bb4:	62a3      	str	r3, [r4, #40]	; 0x28
 8007bb6:	4b05      	ldr	r3, [pc, #20]	; (8007bcc <std+0x40>)
 8007bb8:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007bba:	4b05      	ldr	r3, [pc, #20]	; (8007bd0 <std+0x44>)
 8007bbc:	6224      	str	r4, [r4, #32]
 8007bbe:	6323      	str	r3, [r4, #48]	; 0x30
 8007bc0:	bd10      	pop	{r4, pc}
 8007bc2:	bf00      	nop
 8007bc4:	08008605 	.word	0x08008605
 8007bc8:	08008627 	.word	0x08008627
 8007bcc:	0800865f 	.word	0x0800865f
 8007bd0:	08008683 	.word	0x08008683

08007bd4 <_cleanup_r>:
 8007bd4:	4901      	ldr	r1, [pc, #4]	; (8007bdc <_cleanup_r+0x8>)
 8007bd6:	f000 b8af 	b.w	8007d38 <_fwalk_reent>
 8007bda:	bf00      	nop
 8007bdc:	08007b15 	.word	0x08007b15

08007be0 <__sfmoreglue>:
 8007be0:	b570      	push	{r4, r5, r6, lr}
 8007be2:	2268      	movs	r2, #104	; 0x68
 8007be4:	1e4d      	subs	r5, r1, #1
 8007be6:	4355      	muls	r5, r2
 8007be8:	460e      	mov	r6, r1
 8007bea:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007bee:	f000 f997 	bl	8007f20 <_malloc_r>
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	b140      	cbz	r0, 8007c08 <__sfmoreglue+0x28>
 8007bf6:	2100      	movs	r1, #0
 8007bf8:	e9c0 1600 	strd	r1, r6, [r0]
 8007bfc:	300c      	adds	r0, #12
 8007bfe:	60a0      	str	r0, [r4, #8]
 8007c00:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c04:	f7ff fdaa 	bl	800775c <memset>
 8007c08:	4620      	mov	r0, r4
 8007c0a:	bd70      	pop	{r4, r5, r6, pc}

08007c0c <__sfp_lock_acquire>:
 8007c0c:	4801      	ldr	r0, [pc, #4]	; (8007c14 <__sfp_lock_acquire+0x8>)
 8007c0e:	f000 b8b3 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007c12:	bf00      	nop
 8007c14:	2000278a 	.word	0x2000278a

08007c18 <__sfp_lock_release>:
 8007c18:	4801      	ldr	r0, [pc, #4]	; (8007c20 <__sfp_lock_release+0x8>)
 8007c1a:	f000 b8ae 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007c1e:	bf00      	nop
 8007c20:	2000278a 	.word	0x2000278a

08007c24 <__sinit_lock_acquire>:
 8007c24:	4801      	ldr	r0, [pc, #4]	; (8007c2c <__sinit_lock_acquire+0x8>)
 8007c26:	f000 b8a7 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 8007c2a:	bf00      	nop
 8007c2c:	2000278b 	.word	0x2000278b

08007c30 <__sinit_lock_release>:
 8007c30:	4801      	ldr	r0, [pc, #4]	; (8007c38 <__sinit_lock_release+0x8>)
 8007c32:	f000 b8a2 	b.w	8007d7a <__retarget_lock_release_recursive>
 8007c36:	bf00      	nop
 8007c38:	2000278b 	.word	0x2000278b

08007c3c <__sinit>:
 8007c3c:	b510      	push	{r4, lr}
 8007c3e:	4604      	mov	r4, r0
 8007c40:	f7ff fff0 	bl	8007c24 <__sinit_lock_acquire>
 8007c44:	69a3      	ldr	r3, [r4, #24]
 8007c46:	b11b      	cbz	r3, 8007c50 <__sinit+0x14>
 8007c48:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c4c:	f7ff bff0 	b.w	8007c30 <__sinit_lock_release>
 8007c50:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007c54:	6523      	str	r3, [r4, #80]	; 0x50
 8007c56:	4b13      	ldr	r3, [pc, #76]	; (8007ca4 <__sinit+0x68>)
 8007c58:	4a13      	ldr	r2, [pc, #76]	; (8007ca8 <__sinit+0x6c>)
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	62a2      	str	r2, [r4, #40]	; 0x28
 8007c5e:	42a3      	cmp	r3, r4
 8007c60:	bf04      	itt	eq
 8007c62:	2301      	moveq	r3, #1
 8007c64:	61a3      	streq	r3, [r4, #24]
 8007c66:	4620      	mov	r0, r4
 8007c68:	f000 f820 	bl	8007cac <__sfp>
 8007c6c:	6060      	str	r0, [r4, #4]
 8007c6e:	4620      	mov	r0, r4
 8007c70:	f000 f81c 	bl	8007cac <__sfp>
 8007c74:	60a0      	str	r0, [r4, #8]
 8007c76:	4620      	mov	r0, r4
 8007c78:	f000 f818 	bl	8007cac <__sfp>
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	60e0      	str	r0, [r4, #12]
 8007c80:	2104      	movs	r1, #4
 8007c82:	6860      	ldr	r0, [r4, #4]
 8007c84:	f7ff ff82 	bl	8007b8c <std>
 8007c88:	68a0      	ldr	r0, [r4, #8]
 8007c8a:	2201      	movs	r2, #1
 8007c8c:	2109      	movs	r1, #9
 8007c8e:	f7ff ff7d 	bl	8007b8c <std>
 8007c92:	68e0      	ldr	r0, [r4, #12]
 8007c94:	2202      	movs	r2, #2
 8007c96:	2112      	movs	r1, #18
 8007c98:	f7ff ff78 	bl	8007b8c <std>
 8007c9c:	2301      	movs	r3, #1
 8007c9e:	61a3      	str	r3, [r4, #24]
 8007ca0:	e7d2      	b.n	8007c48 <__sinit+0xc>
 8007ca2:	bf00      	nop
 8007ca4:	0800882c 	.word	0x0800882c
 8007ca8:	08007bd5 	.word	0x08007bd5

08007cac <__sfp>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	4607      	mov	r7, r0
 8007cb0:	f7ff ffac 	bl	8007c0c <__sfp_lock_acquire>
 8007cb4:	4b1e      	ldr	r3, [pc, #120]	; (8007d30 <__sfp+0x84>)
 8007cb6:	681e      	ldr	r6, [r3, #0]
 8007cb8:	69b3      	ldr	r3, [r6, #24]
 8007cba:	b913      	cbnz	r3, 8007cc2 <__sfp+0x16>
 8007cbc:	4630      	mov	r0, r6
 8007cbe:	f7ff ffbd 	bl	8007c3c <__sinit>
 8007cc2:	3648      	adds	r6, #72	; 0x48
 8007cc4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007cc8:	3b01      	subs	r3, #1
 8007cca:	d503      	bpl.n	8007cd4 <__sfp+0x28>
 8007ccc:	6833      	ldr	r3, [r6, #0]
 8007cce:	b30b      	cbz	r3, 8007d14 <__sfp+0x68>
 8007cd0:	6836      	ldr	r6, [r6, #0]
 8007cd2:	e7f7      	b.n	8007cc4 <__sfp+0x18>
 8007cd4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007cd8:	b9d5      	cbnz	r5, 8007d10 <__sfp+0x64>
 8007cda:	4b16      	ldr	r3, [pc, #88]	; (8007d34 <__sfp+0x88>)
 8007cdc:	60e3      	str	r3, [r4, #12]
 8007cde:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007ce2:	6665      	str	r5, [r4, #100]	; 0x64
 8007ce4:	f000 f847 	bl	8007d76 <__retarget_lock_init_recursive>
 8007ce8:	f7ff ff96 	bl	8007c18 <__sfp_lock_release>
 8007cec:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007cf0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007cf4:	6025      	str	r5, [r4, #0]
 8007cf6:	61a5      	str	r5, [r4, #24]
 8007cf8:	2208      	movs	r2, #8
 8007cfa:	4629      	mov	r1, r5
 8007cfc:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d00:	f7ff fd2c 	bl	800775c <memset>
 8007d04:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d08:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d10:	3468      	adds	r4, #104	; 0x68
 8007d12:	e7d9      	b.n	8007cc8 <__sfp+0x1c>
 8007d14:	2104      	movs	r1, #4
 8007d16:	4638      	mov	r0, r7
 8007d18:	f7ff ff62 	bl	8007be0 <__sfmoreglue>
 8007d1c:	4604      	mov	r4, r0
 8007d1e:	6030      	str	r0, [r6, #0]
 8007d20:	2800      	cmp	r0, #0
 8007d22:	d1d5      	bne.n	8007cd0 <__sfp+0x24>
 8007d24:	f7ff ff78 	bl	8007c18 <__sfp_lock_release>
 8007d28:	230c      	movs	r3, #12
 8007d2a:	603b      	str	r3, [r7, #0]
 8007d2c:	e7ee      	b.n	8007d0c <__sfp+0x60>
 8007d2e:	bf00      	nop
 8007d30:	0800882c 	.word	0x0800882c
 8007d34:	ffff0001 	.word	0xffff0001

08007d38 <_fwalk_reent>:
 8007d38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	4688      	mov	r8, r1
 8007d40:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007d44:	2700      	movs	r7, #0
 8007d46:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d4a:	f1b9 0901 	subs.w	r9, r9, #1
 8007d4e:	d505      	bpl.n	8007d5c <_fwalk_reent+0x24>
 8007d50:	6824      	ldr	r4, [r4, #0]
 8007d52:	2c00      	cmp	r4, #0
 8007d54:	d1f7      	bne.n	8007d46 <_fwalk_reent+0xe>
 8007d56:	4638      	mov	r0, r7
 8007d58:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d5c:	89ab      	ldrh	r3, [r5, #12]
 8007d5e:	2b01      	cmp	r3, #1
 8007d60:	d907      	bls.n	8007d72 <_fwalk_reent+0x3a>
 8007d62:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d66:	3301      	adds	r3, #1
 8007d68:	d003      	beq.n	8007d72 <_fwalk_reent+0x3a>
 8007d6a:	4629      	mov	r1, r5
 8007d6c:	4630      	mov	r0, r6
 8007d6e:	47c0      	blx	r8
 8007d70:	4307      	orrs	r7, r0
 8007d72:	3568      	adds	r5, #104	; 0x68
 8007d74:	e7e9      	b.n	8007d4a <_fwalk_reent+0x12>

08007d76 <__retarget_lock_init_recursive>:
 8007d76:	4770      	bx	lr

08007d78 <__retarget_lock_acquire_recursive>:
 8007d78:	4770      	bx	lr

08007d7a <__retarget_lock_release_recursive>:
 8007d7a:	4770      	bx	lr

08007d7c <__swhatbuf_r>:
 8007d7c:	b570      	push	{r4, r5, r6, lr}
 8007d7e:	460e      	mov	r6, r1
 8007d80:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d84:	2900      	cmp	r1, #0
 8007d86:	b096      	sub	sp, #88	; 0x58
 8007d88:	4614      	mov	r4, r2
 8007d8a:	461d      	mov	r5, r3
 8007d8c:	da08      	bge.n	8007da0 <__swhatbuf_r+0x24>
 8007d8e:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007d92:	2200      	movs	r2, #0
 8007d94:	602a      	str	r2, [r5, #0]
 8007d96:	061a      	lsls	r2, r3, #24
 8007d98:	d410      	bmi.n	8007dbc <__swhatbuf_r+0x40>
 8007d9a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007d9e:	e00e      	b.n	8007dbe <__swhatbuf_r+0x42>
 8007da0:	466a      	mov	r2, sp
 8007da2:	f000 fc95 	bl	80086d0 <_fstat_r>
 8007da6:	2800      	cmp	r0, #0
 8007da8:	dbf1      	blt.n	8007d8e <__swhatbuf_r+0x12>
 8007daa:	9a01      	ldr	r2, [sp, #4]
 8007dac:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007db0:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007db4:	425a      	negs	r2, r3
 8007db6:	415a      	adcs	r2, r3
 8007db8:	602a      	str	r2, [r5, #0]
 8007dba:	e7ee      	b.n	8007d9a <__swhatbuf_r+0x1e>
 8007dbc:	2340      	movs	r3, #64	; 0x40
 8007dbe:	2000      	movs	r0, #0
 8007dc0:	6023      	str	r3, [r4, #0]
 8007dc2:	b016      	add	sp, #88	; 0x58
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
	...

08007dc8 <__smakebuf_r>:
 8007dc8:	898b      	ldrh	r3, [r1, #12]
 8007dca:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007dcc:	079d      	lsls	r5, r3, #30
 8007dce:	4606      	mov	r6, r0
 8007dd0:	460c      	mov	r4, r1
 8007dd2:	d507      	bpl.n	8007de4 <__smakebuf_r+0x1c>
 8007dd4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007dd8:	6023      	str	r3, [r4, #0]
 8007dda:	6123      	str	r3, [r4, #16]
 8007ddc:	2301      	movs	r3, #1
 8007dde:	6163      	str	r3, [r4, #20]
 8007de0:	b002      	add	sp, #8
 8007de2:	bd70      	pop	{r4, r5, r6, pc}
 8007de4:	ab01      	add	r3, sp, #4
 8007de6:	466a      	mov	r2, sp
 8007de8:	f7ff ffc8 	bl	8007d7c <__swhatbuf_r>
 8007dec:	9900      	ldr	r1, [sp, #0]
 8007dee:	4605      	mov	r5, r0
 8007df0:	4630      	mov	r0, r6
 8007df2:	f000 f895 	bl	8007f20 <_malloc_r>
 8007df6:	b948      	cbnz	r0, 8007e0c <__smakebuf_r+0x44>
 8007df8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007dfc:	059a      	lsls	r2, r3, #22
 8007dfe:	d4ef      	bmi.n	8007de0 <__smakebuf_r+0x18>
 8007e00:	f023 0303 	bic.w	r3, r3, #3
 8007e04:	f043 0302 	orr.w	r3, r3, #2
 8007e08:	81a3      	strh	r3, [r4, #12]
 8007e0a:	e7e3      	b.n	8007dd4 <__smakebuf_r+0xc>
 8007e0c:	4b0d      	ldr	r3, [pc, #52]	; (8007e44 <__smakebuf_r+0x7c>)
 8007e0e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007e10:	89a3      	ldrh	r3, [r4, #12]
 8007e12:	6020      	str	r0, [r4, #0]
 8007e14:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007e18:	81a3      	strh	r3, [r4, #12]
 8007e1a:	9b00      	ldr	r3, [sp, #0]
 8007e1c:	6163      	str	r3, [r4, #20]
 8007e1e:	9b01      	ldr	r3, [sp, #4]
 8007e20:	6120      	str	r0, [r4, #16]
 8007e22:	b15b      	cbz	r3, 8007e3c <__smakebuf_r+0x74>
 8007e24:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007e28:	4630      	mov	r0, r6
 8007e2a:	f000 fc63 	bl	80086f4 <_isatty_r>
 8007e2e:	b128      	cbz	r0, 8007e3c <__smakebuf_r+0x74>
 8007e30:	89a3      	ldrh	r3, [r4, #12]
 8007e32:	f023 0303 	bic.w	r3, r3, #3
 8007e36:	f043 0301 	orr.w	r3, r3, #1
 8007e3a:	81a3      	strh	r3, [r4, #12]
 8007e3c:	89a0      	ldrh	r0, [r4, #12]
 8007e3e:	4305      	orrs	r5, r0
 8007e40:	81a5      	strh	r5, [r4, #12]
 8007e42:	e7cd      	b.n	8007de0 <__smakebuf_r+0x18>
 8007e44:	08007bd5 	.word	0x08007bd5

08007e48 <_free_r>:
 8007e48:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007e4a:	2900      	cmp	r1, #0
 8007e4c:	d044      	beq.n	8007ed8 <_free_r+0x90>
 8007e4e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007e52:	9001      	str	r0, [sp, #4]
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	f1a1 0404 	sub.w	r4, r1, #4
 8007e5a:	bfb8      	it	lt
 8007e5c:	18e4      	addlt	r4, r4, r3
 8007e5e:	f000 fc6b 	bl	8008738 <__malloc_lock>
 8007e62:	4a1e      	ldr	r2, [pc, #120]	; (8007edc <_free_r+0x94>)
 8007e64:	9801      	ldr	r0, [sp, #4]
 8007e66:	6813      	ldr	r3, [r2, #0]
 8007e68:	b933      	cbnz	r3, 8007e78 <_free_r+0x30>
 8007e6a:	6063      	str	r3, [r4, #4]
 8007e6c:	6014      	str	r4, [r2, #0]
 8007e6e:	b003      	add	sp, #12
 8007e70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007e74:	f000 bc66 	b.w	8008744 <__malloc_unlock>
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	d908      	bls.n	8007e8e <_free_r+0x46>
 8007e7c:	6825      	ldr	r5, [r4, #0]
 8007e7e:	1961      	adds	r1, r4, r5
 8007e80:	428b      	cmp	r3, r1
 8007e82:	bf01      	itttt	eq
 8007e84:	6819      	ldreq	r1, [r3, #0]
 8007e86:	685b      	ldreq	r3, [r3, #4]
 8007e88:	1949      	addeq	r1, r1, r5
 8007e8a:	6021      	streq	r1, [r4, #0]
 8007e8c:	e7ed      	b.n	8007e6a <_free_r+0x22>
 8007e8e:	461a      	mov	r2, r3
 8007e90:	685b      	ldr	r3, [r3, #4]
 8007e92:	b10b      	cbz	r3, 8007e98 <_free_r+0x50>
 8007e94:	42a3      	cmp	r3, r4
 8007e96:	d9fa      	bls.n	8007e8e <_free_r+0x46>
 8007e98:	6811      	ldr	r1, [r2, #0]
 8007e9a:	1855      	adds	r5, r2, r1
 8007e9c:	42a5      	cmp	r5, r4
 8007e9e:	d10b      	bne.n	8007eb8 <_free_r+0x70>
 8007ea0:	6824      	ldr	r4, [r4, #0]
 8007ea2:	4421      	add	r1, r4
 8007ea4:	1854      	adds	r4, r2, r1
 8007ea6:	42a3      	cmp	r3, r4
 8007ea8:	6011      	str	r1, [r2, #0]
 8007eaa:	d1e0      	bne.n	8007e6e <_free_r+0x26>
 8007eac:	681c      	ldr	r4, [r3, #0]
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	6053      	str	r3, [r2, #4]
 8007eb2:	4421      	add	r1, r4
 8007eb4:	6011      	str	r1, [r2, #0]
 8007eb6:	e7da      	b.n	8007e6e <_free_r+0x26>
 8007eb8:	d902      	bls.n	8007ec0 <_free_r+0x78>
 8007eba:	230c      	movs	r3, #12
 8007ebc:	6003      	str	r3, [r0, #0]
 8007ebe:	e7d6      	b.n	8007e6e <_free_r+0x26>
 8007ec0:	6825      	ldr	r5, [r4, #0]
 8007ec2:	1961      	adds	r1, r4, r5
 8007ec4:	428b      	cmp	r3, r1
 8007ec6:	bf04      	itt	eq
 8007ec8:	6819      	ldreq	r1, [r3, #0]
 8007eca:	685b      	ldreq	r3, [r3, #4]
 8007ecc:	6063      	str	r3, [r4, #4]
 8007ece:	bf04      	itt	eq
 8007ed0:	1949      	addeq	r1, r1, r5
 8007ed2:	6021      	streq	r1, [r4, #0]
 8007ed4:	6054      	str	r4, [r2, #4]
 8007ed6:	e7ca      	b.n	8007e6e <_free_r+0x26>
 8007ed8:	b003      	add	sp, #12
 8007eda:	bd30      	pop	{r4, r5, pc}
 8007edc:	2000278c 	.word	0x2000278c

08007ee0 <sbrk_aligned>:
 8007ee0:	b570      	push	{r4, r5, r6, lr}
 8007ee2:	4e0e      	ldr	r6, [pc, #56]	; (8007f1c <sbrk_aligned+0x3c>)
 8007ee4:	460c      	mov	r4, r1
 8007ee6:	6831      	ldr	r1, [r6, #0]
 8007ee8:	4605      	mov	r5, r0
 8007eea:	b911      	cbnz	r1, 8007ef2 <sbrk_aligned+0x12>
 8007eec:	f000 fb7a 	bl	80085e4 <_sbrk_r>
 8007ef0:	6030      	str	r0, [r6, #0]
 8007ef2:	4621      	mov	r1, r4
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	f000 fb75 	bl	80085e4 <_sbrk_r>
 8007efa:	1c43      	adds	r3, r0, #1
 8007efc:	d00a      	beq.n	8007f14 <sbrk_aligned+0x34>
 8007efe:	1cc4      	adds	r4, r0, #3
 8007f00:	f024 0403 	bic.w	r4, r4, #3
 8007f04:	42a0      	cmp	r0, r4
 8007f06:	d007      	beq.n	8007f18 <sbrk_aligned+0x38>
 8007f08:	1a21      	subs	r1, r4, r0
 8007f0a:	4628      	mov	r0, r5
 8007f0c:	f000 fb6a 	bl	80085e4 <_sbrk_r>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d101      	bne.n	8007f18 <sbrk_aligned+0x38>
 8007f14:	f04f 34ff 	mov.w	r4, #4294967295
 8007f18:	4620      	mov	r0, r4
 8007f1a:	bd70      	pop	{r4, r5, r6, pc}
 8007f1c:	20002790 	.word	0x20002790

08007f20 <_malloc_r>:
 8007f20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f24:	1ccd      	adds	r5, r1, #3
 8007f26:	f025 0503 	bic.w	r5, r5, #3
 8007f2a:	3508      	adds	r5, #8
 8007f2c:	2d0c      	cmp	r5, #12
 8007f2e:	bf38      	it	cc
 8007f30:	250c      	movcc	r5, #12
 8007f32:	2d00      	cmp	r5, #0
 8007f34:	4607      	mov	r7, r0
 8007f36:	db01      	blt.n	8007f3c <_malloc_r+0x1c>
 8007f38:	42a9      	cmp	r1, r5
 8007f3a:	d905      	bls.n	8007f48 <_malloc_r+0x28>
 8007f3c:	230c      	movs	r3, #12
 8007f3e:	603b      	str	r3, [r7, #0]
 8007f40:	2600      	movs	r6, #0
 8007f42:	4630      	mov	r0, r6
 8007f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f48:	4e2e      	ldr	r6, [pc, #184]	; (8008004 <_malloc_r+0xe4>)
 8007f4a:	f000 fbf5 	bl	8008738 <__malloc_lock>
 8007f4e:	6833      	ldr	r3, [r6, #0]
 8007f50:	461c      	mov	r4, r3
 8007f52:	bb34      	cbnz	r4, 8007fa2 <_malloc_r+0x82>
 8007f54:	4629      	mov	r1, r5
 8007f56:	4638      	mov	r0, r7
 8007f58:	f7ff ffc2 	bl	8007ee0 <sbrk_aligned>
 8007f5c:	1c43      	adds	r3, r0, #1
 8007f5e:	4604      	mov	r4, r0
 8007f60:	d14d      	bne.n	8007ffe <_malloc_r+0xde>
 8007f62:	6834      	ldr	r4, [r6, #0]
 8007f64:	4626      	mov	r6, r4
 8007f66:	2e00      	cmp	r6, #0
 8007f68:	d140      	bne.n	8007fec <_malloc_r+0xcc>
 8007f6a:	6823      	ldr	r3, [r4, #0]
 8007f6c:	4631      	mov	r1, r6
 8007f6e:	4638      	mov	r0, r7
 8007f70:	eb04 0803 	add.w	r8, r4, r3
 8007f74:	f000 fb36 	bl	80085e4 <_sbrk_r>
 8007f78:	4580      	cmp	r8, r0
 8007f7a:	d13a      	bne.n	8007ff2 <_malloc_r+0xd2>
 8007f7c:	6821      	ldr	r1, [r4, #0]
 8007f7e:	3503      	adds	r5, #3
 8007f80:	1a6d      	subs	r5, r5, r1
 8007f82:	f025 0503 	bic.w	r5, r5, #3
 8007f86:	3508      	adds	r5, #8
 8007f88:	2d0c      	cmp	r5, #12
 8007f8a:	bf38      	it	cc
 8007f8c:	250c      	movcc	r5, #12
 8007f8e:	4629      	mov	r1, r5
 8007f90:	4638      	mov	r0, r7
 8007f92:	f7ff ffa5 	bl	8007ee0 <sbrk_aligned>
 8007f96:	3001      	adds	r0, #1
 8007f98:	d02b      	beq.n	8007ff2 <_malloc_r+0xd2>
 8007f9a:	6823      	ldr	r3, [r4, #0]
 8007f9c:	442b      	add	r3, r5
 8007f9e:	6023      	str	r3, [r4, #0]
 8007fa0:	e00e      	b.n	8007fc0 <_malloc_r+0xa0>
 8007fa2:	6822      	ldr	r2, [r4, #0]
 8007fa4:	1b52      	subs	r2, r2, r5
 8007fa6:	d41e      	bmi.n	8007fe6 <_malloc_r+0xc6>
 8007fa8:	2a0b      	cmp	r2, #11
 8007faa:	d916      	bls.n	8007fda <_malloc_r+0xba>
 8007fac:	1961      	adds	r1, r4, r5
 8007fae:	42a3      	cmp	r3, r4
 8007fb0:	6025      	str	r5, [r4, #0]
 8007fb2:	bf18      	it	ne
 8007fb4:	6059      	strne	r1, [r3, #4]
 8007fb6:	6863      	ldr	r3, [r4, #4]
 8007fb8:	bf08      	it	eq
 8007fba:	6031      	streq	r1, [r6, #0]
 8007fbc:	5162      	str	r2, [r4, r5]
 8007fbe:	604b      	str	r3, [r1, #4]
 8007fc0:	4638      	mov	r0, r7
 8007fc2:	f104 060b 	add.w	r6, r4, #11
 8007fc6:	f000 fbbd 	bl	8008744 <__malloc_unlock>
 8007fca:	f026 0607 	bic.w	r6, r6, #7
 8007fce:	1d23      	adds	r3, r4, #4
 8007fd0:	1af2      	subs	r2, r6, r3
 8007fd2:	d0b6      	beq.n	8007f42 <_malloc_r+0x22>
 8007fd4:	1b9b      	subs	r3, r3, r6
 8007fd6:	50a3      	str	r3, [r4, r2]
 8007fd8:	e7b3      	b.n	8007f42 <_malloc_r+0x22>
 8007fda:	6862      	ldr	r2, [r4, #4]
 8007fdc:	42a3      	cmp	r3, r4
 8007fde:	bf0c      	ite	eq
 8007fe0:	6032      	streq	r2, [r6, #0]
 8007fe2:	605a      	strne	r2, [r3, #4]
 8007fe4:	e7ec      	b.n	8007fc0 <_malloc_r+0xa0>
 8007fe6:	4623      	mov	r3, r4
 8007fe8:	6864      	ldr	r4, [r4, #4]
 8007fea:	e7b2      	b.n	8007f52 <_malloc_r+0x32>
 8007fec:	4634      	mov	r4, r6
 8007fee:	6876      	ldr	r6, [r6, #4]
 8007ff0:	e7b9      	b.n	8007f66 <_malloc_r+0x46>
 8007ff2:	230c      	movs	r3, #12
 8007ff4:	603b      	str	r3, [r7, #0]
 8007ff6:	4638      	mov	r0, r7
 8007ff8:	f000 fba4 	bl	8008744 <__malloc_unlock>
 8007ffc:	e7a1      	b.n	8007f42 <_malloc_r+0x22>
 8007ffe:	6025      	str	r5, [r4, #0]
 8008000:	e7de      	b.n	8007fc0 <_malloc_r+0xa0>
 8008002:	bf00      	nop
 8008004:	2000278c 	.word	0x2000278c

08008008 <__sfputc_r>:
 8008008:	6893      	ldr	r3, [r2, #8]
 800800a:	3b01      	subs	r3, #1
 800800c:	2b00      	cmp	r3, #0
 800800e:	b410      	push	{r4}
 8008010:	6093      	str	r3, [r2, #8]
 8008012:	da08      	bge.n	8008026 <__sfputc_r+0x1e>
 8008014:	6994      	ldr	r4, [r2, #24]
 8008016:	42a3      	cmp	r3, r4
 8008018:	db01      	blt.n	800801e <__sfputc_r+0x16>
 800801a:	290a      	cmp	r1, #10
 800801c:	d103      	bne.n	8008026 <__sfputc_r+0x1e>
 800801e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008022:	f7ff bc31 	b.w	8007888 <__swbuf_r>
 8008026:	6813      	ldr	r3, [r2, #0]
 8008028:	1c58      	adds	r0, r3, #1
 800802a:	6010      	str	r0, [r2, #0]
 800802c:	7019      	strb	r1, [r3, #0]
 800802e:	4608      	mov	r0, r1
 8008030:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008034:	4770      	bx	lr

08008036 <__sfputs_r>:
 8008036:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008038:	4606      	mov	r6, r0
 800803a:	460f      	mov	r7, r1
 800803c:	4614      	mov	r4, r2
 800803e:	18d5      	adds	r5, r2, r3
 8008040:	42ac      	cmp	r4, r5
 8008042:	d101      	bne.n	8008048 <__sfputs_r+0x12>
 8008044:	2000      	movs	r0, #0
 8008046:	e007      	b.n	8008058 <__sfputs_r+0x22>
 8008048:	f814 1b01 	ldrb.w	r1, [r4], #1
 800804c:	463a      	mov	r2, r7
 800804e:	4630      	mov	r0, r6
 8008050:	f7ff ffda 	bl	8008008 <__sfputc_r>
 8008054:	1c43      	adds	r3, r0, #1
 8008056:	d1f3      	bne.n	8008040 <__sfputs_r+0xa>
 8008058:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800805c <_vfiprintf_r>:
 800805c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008060:	460d      	mov	r5, r1
 8008062:	b09d      	sub	sp, #116	; 0x74
 8008064:	4614      	mov	r4, r2
 8008066:	4698      	mov	r8, r3
 8008068:	4606      	mov	r6, r0
 800806a:	b118      	cbz	r0, 8008074 <_vfiprintf_r+0x18>
 800806c:	6983      	ldr	r3, [r0, #24]
 800806e:	b90b      	cbnz	r3, 8008074 <_vfiprintf_r+0x18>
 8008070:	f7ff fde4 	bl	8007c3c <__sinit>
 8008074:	4b89      	ldr	r3, [pc, #548]	; (800829c <_vfiprintf_r+0x240>)
 8008076:	429d      	cmp	r5, r3
 8008078:	d11b      	bne.n	80080b2 <_vfiprintf_r+0x56>
 800807a:	6875      	ldr	r5, [r6, #4]
 800807c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800807e:	07d9      	lsls	r1, r3, #31
 8008080:	d405      	bmi.n	800808e <_vfiprintf_r+0x32>
 8008082:	89ab      	ldrh	r3, [r5, #12]
 8008084:	059a      	lsls	r2, r3, #22
 8008086:	d402      	bmi.n	800808e <_vfiprintf_r+0x32>
 8008088:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800808a:	f7ff fe75 	bl	8007d78 <__retarget_lock_acquire_recursive>
 800808e:	89ab      	ldrh	r3, [r5, #12]
 8008090:	071b      	lsls	r3, r3, #28
 8008092:	d501      	bpl.n	8008098 <_vfiprintf_r+0x3c>
 8008094:	692b      	ldr	r3, [r5, #16]
 8008096:	b9eb      	cbnz	r3, 80080d4 <_vfiprintf_r+0x78>
 8008098:	4629      	mov	r1, r5
 800809a:	4630      	mov	r0, r6
 800809c:	f7ff fc46 	bl	800792c <__swsetup_r>
 80080a0:	b1c0      	cbz	r0, 80080d4 <_vfiprintf_r+0x78>
 80080a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80080a4:	07dc      	lsls	r4, r3, #31
 80080a6:	d50e      	bpl.n	80080c6 <_vfiprintf_r+0x6a>
 80080a8:	f04f 30ff 	mov.w	r0, #4294967295
 80080ac:	b01d      	add	sp, #116	; 0x74
 80080ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080b2:	4b7b      	ldr	r3, [pc, #492]	; (80082a0 <_vfiprintf_r+0x244>)
 80080b4:	429d      	cmp	r5, r3
 80080b6:	d101      	bne.n	80080bc <_vfiprintf_r+0x60>
 80080b8:	68b5      	ldr	r5, [r6, #8]
 80080ba:	e7df      	b.n	800807c <_vfiprintf_r+0x20>
 80080bc:	4b79      	ldr	r3, [pc, #484]	; (80082a4 <_vfiprintf_r+0x248>)
 80080be:	429d      	cmp	r5, r3
 80080c0:	bf08      	it	eq
 80080c2:	68f5      	ldreq	r5, [r6, #12]
 80080c4:	e7da      	b.n	800807c <_vfiprintf_r+0x20>
 80080c6:	89ab      	ldrh	r3, [r5, #12]
 80080c8:	0598      	lsls	r0, r3, #22
 80080ca:	d4ed      	bmi.n	80080a8 <_vfiprintf_r+0x4c>
 80080cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80080ce:	f7ff fe54 	bl	8007d7a <__retarget_lock_release_recursive>
 80080d2:	e7e9      	b.n	80080a8 <_vfiprintf_r+0x4c>
 80080d4:	2300      	movs	r3, #0
 80080d6:	9309      	str	r3, [sp, #36]	; 0x24
 80080d8:	2320      	movs	r3, #32
 80080da:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80080de:	f8cd 800c 	str.w	r8, [sp, #12]
 80080e2:	2330      	movs	r3, #48	; 0x30
 80080e4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80082a8 <_vfiprintf_r+0x24c>
 80080e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80080ec:	f04f 0901 	mov.w	r9, #1
 80080f0:	4623      	mov	r3, r4
 80080f2:	469a      	mov	sl, r3
 80080f4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80080f8:	b10a      	cbz	r2, 80080fe <_vfiprintf_r+0xa2>
 80080fa:	2a25      	cmp	r2, #37	; 0x25
 80080fc:	d1f9      	bne.n	80080f2 <_vfiprintf_r+0x96>
 80080fe:	ebba 0b04 	subs.w	fp, sl, r4
 8008102:	d00b      	beq.n	800811c <_vfiprintf_r+0xc0>
 8008104:	465b      	mov	r3, fp
 8008106:	4622      	mov	r2, r4
 8008108:	4629      	mov	r1, r5
 800810a:	4630      	mov	r0, r6
 800810c:	f7ff ff93 	bl	8008036 <__sfputs_r>
 8008110:	3001      	adds	r0, #1
 8008112:	f000 80aa 	beq.w	800826a <_vfiprintf_r+0x20e>
 8008116:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008118:	445a      	add	r2, fp
 800811a:	9209      	str	r2, [sp, #36]	; 0x24
 800811c:	f89a 3000 	ldrb.w	r3, [sl]
 8008120:	2b00      	cmp	r3, #0
 8008122:	f000 80a2 	beq.w	800826a <_vfiprintf_r+0x20e>
 8008126:	2300      	movs	r3, #0
 8008128:	f04f 32ff 	mov.w	r2, #4294967295
 800812c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008130:	f10a 0a01 	add.w	sl, sl, #1
 8008134:	9304      	str	r3, [sp, #16]
 8008136:	9307      	str	r3, [sp, #28]
 8008138:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800813c:	931a      	str	r3, [sp, #104]	; 0x68
 800813e:	4654      	mov	r4, sl
 8008140:	2205      	movs	r2, #5
 8008142:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008146:	4858      	ldr	r0, [pc, #352]	; (80082a8 <_vfiprintf_r+0x24c>)
 8008148:	f7f8 f862 	bl	8000210 <memchr>
 800814c:	9a04      	ldr	r2, [sp, #16]
 800814e:	b9d8      	cbnz	r0, 8008188 <_vfiprintf_r+0x12c>
 8008150:	06d1      	lsls	r1, r2, #27
 8008152:	bf44      	itt	mi
 8008154:	2320      	movmi	r3, #32
 8008156:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800815a:	0713      	lsls	r3, r2, #28
 800815c:	bf44      	itt	mi
 800815e:	232b      	movmi	r3, #43	; 0x2b
 8008160:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008164:	f89a 3000 	ldrb.w	r3, [sl]
 8008168:	2b2a      	cmp	r3, #42	; 0x2a
 800816a:	d015      	beq.n	8008198 <_vfiprintf_r+0x13c>
 800816c:	9a07      	ldr	r2, [sp, #28]
 800816e:	4654      	mov	r4, sl
 8008170:	2000      	movs	r0, #0
 8008172:	f04f 0c0a 	mov.w	ip, #10
 8008176:	4621      	mov	r1, r4
 8008178:	f811 3b01 	ldrb.w	r3, [r1], #1
 800817c:	3b30      	subs	r3, #48	; 0x30
 800817e:	2b09      	cmp	r3, #9
 8008180:	d94e      	bls.n	8008220 <_vfiprintf_r+0x1c4>
 8008182:	b1b0      	cbz	r0, 80081b2 <_vfiprintf_r+0x156>
 8008184:	9207      	str	r2, [sp, #28]
 8008186:	e014      	b.n	80081b2 <_vfiprintf_r+0x156>
 8008188:	eba0 0308 	sub.w	r3, r0, r8
 800818c:	fa09 f303 	lsl.w	r3, r9, r3
 8008190:	4313      	orrs	r3, r2
 8008192:	9304      	str	r3, [sp, #16]
 8008194:	46a2      	mov	sl, r4
 8008196:	e7d2      	b.n	800813e <_vfiprintf_r+0xe2>
 8008198:	9b03      	ldr	r3, [sp, #12]
 800819a:	1d19      	adds	r1, r3, #4
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	9103      	str	r1, [sp, #12]
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	bfbb      	ittet	lt
 80081a4:	425b      	neglt	r3, r3
 80081a6:	f042 0202 	orrlt.w	r2, r2, #2
 80081aa:	9307      	strge	r3, [sp, #28]
 80081ac:	9307      	strlt	r3, [sp, #28]
 80081ae:	bfb8      	it	lt
 80081b0:	9204      	strlt	r2, [sp, #16]
 80081b2:	7823      	ldrb	r3, [r4, #0]
 80081b4:	2b2e      	cmp	r3, #46	; 0x2e
 80081b6:	d10c      	bne.n	80081d2 <_vfiprintf_r+0x176>
 80081b8:	7863      	ldrb	r3, [r4, #1]
 80081ba:	2b2a      	cmp	r3, #42	; 0x2a
 80081bc:	d135      	bne.n	800822a <_vfiprintf_r+0x1ce>
 80081be:	9b03      	ldr	r3, [sp, #12]
 80081c0:	1d1a      	adds	r2, r3, #4
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	9203      	str	r2, [sp, #12]
 80081c6:	2b00      	cmp	r3, #0
 80081c8:	bfb8      	it	lt
 80081ca:	f04f 33ff 	movlt.w	r3, #4294967295
 80081ce:	3402      	adds	r4, #2
 80081d0:	9305      	str	r3, [sp, #20]
 80081d2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80082b8 <_vfiprintf_r+0x25c>
 80081d6:	7821      	ldrb	r1, [r4, #0]
 80081d8:	2203      	movs	r2, #3
 80081da:	4650      	mov	r0, sl
 80081dc:	f7f8 f818 	bl	8000210 <memchr>
 80081e0:	b140      	cbz	r0, 80081f4 <_vfiprintf_r+0x198>
 80081e2:	2340      	movs	r3, #64	; 0x40
 80081e4:	eba0 000a 	sub.w	r0, r0, sl
 80081e8:	fa03 f000 	lsl.w	r0, r3, r0
 80081ec:	9b04      	ldr	r3, [sp, #16]
 80081ee:	4303      	orrs	r3, r0
 80081f0:	3401      	adds	r4, #1
 80081f2:	9304      	str	r3, [sp, #16]
 80081f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80081f8:	482c      	ldr	r0, [pc, #176]	; (80082ac <_vfiprintf_r+0x250>)
 80081fa:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80081fe:	2206      	movs	r2, #6
 8008200:	f7f8 f806 	bl	8000210 <memchr>
 8008204:	2800      	cmp	r0, #0
 8008206:	d03f      	beq.n	8008288 <_vfiprintf_r+0x22c>
 8008208:	4b29      	ldr	r3, [pc, #164]	; (80082b0 <_vfiprintf_r+0x254>)
 800820a:	bb1b      	cbnz	r3, 8008254 <_vfiprintf_r+0x1f8>
 800820c:	9b03      	ldr	r3, [sp, #12]
 800820e:	3307      	adds	r3, #7
 8008210:	f023 0307 	bic.w	r3, r3, #7
 8008214:	3308      	adds	r3, #8
 8008216:	9303      	str	r3, [sp, #12]
 8008218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800821a:	443b      	add	r3, r7
 800821c:	9309      	str	r3, [sp, #36]	; 0x24
 800821e:	e767      	b.n	80080f0 <_vfiprintf_r+0x94>
 8008220:	fb0c 3202 	mla	r2, ip, r2, r3
 8008224:	460c      	mov	r4, r1
 8008226:	2001      	movs	r0, #1
 8008228:	e7a5      	b.n	8008176 <_vfiprintf_r+0x11a>
 800822a:	2300      	movs	r3, #0
 800822c:	3401      	adds	r4, #1
 800822e:	9305      	str	r3, [sp, #20]
 8008230:	4619      	mov	r1, r3
 8008232:	f04f 0c0a 	mov.w	ip, #10
 8008236:	4620      	mov	r0, r4
 8008238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800823c:	3a30      	subs	r2, #48	; 0x30
 800823e:	2a09      	cmp	r2, #9
 8008240:	d903      	bls.n	800824a <_vfiprintf_r+0x1ee>
 8008242:	2b00      	cmp	r3, #0
 8008244:	d0c5      	beq.n	80081d2 <_vfiprintf_r+0x176>
 8008246:	9105      	str	r1, [sp, #20]
 8008248:	e7c3      	b.n	80081d2 <_vfiprintf_r+0x176>
 800824a:	fb0c 2101 	mla	r1, ip, r1, r2
 800824e:	4604      	mov	r4, r0
 8008250:	2301      	movs	r3, #1
 8008252:	e7f0      	b.n	8008236 <_vfiprintf_r+0x1da>
 8008254:	ab03      	add	r3, sp, #12
 8008256:	9300      	str	r3, [sp, #0]
 8008258:	462a      	mov	r2, r5
 800825a:	4b16      	ldr	r3, [pc, #88]	; (80082b4 <_vfiprintf_r+0x258>)
 800825c:	a904      	add	r1, sp, #16
 800825e:	4630      	mov	r0, r6
 8008260:	f3af 8000 	nop.w
 8008264:	4607      	mov	r7, r0
 8008266:	1c78      	adds	r0, r7, #1
 8008268:	d1d6      	bne.n	8008218 <_vfiprintf_r+0x1bc>
 800826a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800826c:	07d9      	lsls	r1, r3, #31
 800826e:	d405      	bmi.n	800827c <_vfiprintf_r+0x220>
 8008270:	89ab      	ldrh	r3, [r5, #12]
 8008272:	059a      	lsls	r2, r3, #22
 8008274:	d402      	bmi.n	800827c <_vfiprintf_r+0x220>
 8008276:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008278:	f7ff fd7f 	bl	8007d7a <__retarget_lock_release_recursive>
 800827c:	89ab      	ldrh	r3, [r5, #12]
 800827e:	065b      	lsls	r3, r3, #25
 8008280:	f53f af12 	bmi.w	80080a8 <_vfiprintf_r+0x4c>
 8008284:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008286:	e711      	b.n	80080ac <_vfiprintf_r+0x50>
 8008288:	ab03      	add	r3, sp, #12
 800828a:	9300      	str	r3, [sp, #0]
 800828c:	462a      	mov	r2, r5
 800828e:	4b09      	ldr	r3, [pc, #36]	; (80082b4 <_vfiprintf_r+0x258>)
 8008290:	a904      	add	r1, sp, #16
 8008292:	4630      	mov	r0, r6
 8008294:	f000 f880 	bl	8008398 <_printf_i>
 8008298:	e7e4      	b.n	8008264 <_vfiprintf_r+0x208>
 800829a:	bf00      	nop
 800829c:	08008850 	.word	0x08008850
 80082a0:	08008870 	.word	0x08008870
 80082a4:	08008830 	.word	0x08008830
 80082a8:	08008890 	.word	0x08008890
 80082ac:	0800889a 	.word	0x0800889a
 80082b0:	00000000 	.word	0x00000000
 80082b4:	08008037 	.word	0x08008037
 80082b8:	08008896 	.word	0x08008896

080082bc <_printf_common>:
 80082bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80082c0:	4616      	mov	r6, r2
 80082c2:	4699      	mov	r9, r3
 80082c4:	688a      	ldr	r2, [r1, #8]
 80082c6:	690b      	ldr	r3, [r1, #16]
 80082c8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80082cc:	4293      	cmp	r3, r2
 80082ce:	bfb8      	it	lt
 80082d0:	4613      	movlt	r3, r2
 80082d2:	6033      	str	r3, [r6, #0]
 80082d4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80082d8:	4607      	mov	r7, r0
 80082da:	460c      	mov	r4, r1
 80082dc:	b10a      	cbz	r2, 80082e2 <_printf_common+0x26>
 80082de:	3301      	adds	r3, #1
 80082e0:	6033      	str	r3, [r6, #0]
 80082e2:	6823      	ldr	r3, [r4, #0]
 80082e4:	0699      	lsls	r1, r3, #26
 80082e6:	bf42      	ittt	mi
 80082e8:	6833      	ldrmi	r3, [r6, #0]
 80082ea:	3302      	addmi	r3, #2
 80082ec:	6033      	strmi	r3, [r6, #0]
 80082ee:	6825      	ldr	r5, [r4, #0]
 80082f0:	f015 0506 	ands.w	r5, r5, #6
 80082f4:	d106      	bne.n	8008304 <_printf_common+0x48>
 80082f6:	f104 0a19 	add.w	sl, r4, #25
 80082fa:	68e3      	ldr	r3, [r4, #12]
 80082fc:	6832      	ldr	r2, [r6, #0]
 80082fe:	1a9b      	subs	r3, r3, r2
 8008300:	42ab      	cmp	r3, r5
 8008302:	dc26      	bgt.n	8008352 <_printf_common+0x96>
 8008304:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008308:	1e13      	subs	r3, r2, #0
 800830a:	6822      	ldr	r2, [r4, #0]
 800830c:	bf18      	it	ne
 800830e:	2301      	movne	r3, #1
 8008310:	0692      	lsls	r2, r2, #26
 8008312:	d42b      	bmi.n	800836c <_printf_common+0xb0>
 8008314:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008318:	4649      	mov	r1, r9
 800831a:	4638      	mov	r0, r7
 800831c:	47c0      	blx	r8
 800831e:	3001      	adds	r0, #1
 8008320:	d01e      	beq.n	8008360 <_printf_common+0xa4>
 8008322:	6823      	ldr	r3, [r4, #0]
 8008324:	68e5      	ldr	r5, [r4, #12]
 8008326:	6832      	ldr	r2, [r6, #0]
 8008328:	f003 0306 	and.w	r3, r3, #6
 800832c:	2b04      	cmp	r3, #4
 800832e:	bf08      	it	eq
 8008330:	1aad      	subeq	r5, r5, r2
 8008332:	68a3      	ldr	r3, [r4, #8]
 8008334:	6922      	ldr	r2, [r4, #16]
 8008336:	bf0c      	ite	eq
 8008338:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800833c:	2500      	movne	r5, #0
 800833e:	4293      	cmp	r3, r2
 8008340:	bfc4      	itt	gt
 8008342:	1a9b      	subgt	r3, r3, r2
 8008344:	18ed      	addgt	r5, r5, r3
 8008346:	2600      	movs	r6, #0
 8008348:	341a      	adds	r4, #26
 800834a:	42b5      	cmp	r5, r6
 800834c:	d11a      	bne.n	8008384 <_printf_common+0xc8>
 800834e:	2000      	movs	r0, #0
 8008350:	e008      	b.n	8008364 <_printf_common+0xa8>
 8008352:	2301      	movs	r3, #1
 8008354:	4652      	mov	r2, sl
 8008356:	4649      	mov	r1, r9
 8008358:	4638      	mov	r0, r7
 800835a:	47c0      	blx	r8
 800835c:	3001      	adds	r0, #1
 800835e:	d103      	bne.n	8008368 <_printf_common+0xac>
 8008360:	f04f 30ff 	mov.w	r0, #4294967295
 8008364:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008368:	3501      	adds	r5, #1
 800836a:	e7c6      	b.n	80082fa <_printf_common+0x3e>
 800836c:	18e1      	adds	r1, r4, r3
 800836e:	1c5a      	adds	r2, r3, #1
 8008370:	2030      	movs	r0, #48	; 0x30
 8008372:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008376:	4422      	add	r2, r4
 8008378:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800837c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008380:	3302      	adds	r3, #2
 8008382:	e7c7      	b.n	8008314 <_printf_common+0x58>
 8008384:	2301      	movs	r3, #1
 8008386:	4622      	mov	r2, r4
 8008388:	4649      	mov	r1, r9
 800838a:	4638      	mov	r0, r7
 800838c:	47c0      	blx	r8
 800838e:	3001      	adds	r0, #1
 8008390:	d0e6      	beq.n	8008360 <_printf_common+0xa4>
 8008392:	3601      	adds	r6, #1
 8008394:	e7d9      	b.n	800834a <_printf_common+0x8e>
	...

08008398 <_printf_i>:
 8008398:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800839c:	7e0f      	ldrb	r7, [r1, #24]
 800839e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80083a0:	2f78      	cmp	r7, #120	; 0x78
 80083a2:	4691      	mov	r9, r2
 80083a4:	4680      	mov	r8, r0
 80083a6:	460c      	mov	r4, r1
 80083a8:	469a      	mov	sl, r3
 80083aa:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80083ae:	d807      	bhi.n	80083c0 <_printf_i+0x28>
 80083b0:	2f62      	cmp	r7, #98	; 0x62
 80083b2:	d80a      	bhi.n	80083ca <_printf_i+0x32>
 80083b4:	2f00      	cmp	r7, #0
 80083b6:	f000 80d8 	beq.w	800856a <_printf_i+0x1d2>
 80083ba:	2f58      	cmp	r7, #88	; 0x58
 80083bc:	f000 80a3 	beq.w	8008506 <_printf_i+0x16e>
 80083c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80083c4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80083c8:	e03a      	b.n	8008440 <_printf_i+0xa8>
 80083ca:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80083ce:	2b15      	cmp	r3, #21
 80083d0:	d8f6      	bhi.n	80083c0 <_printf_i+0x28>
 80083d2:	a101      	add	r1, pc, #4	; (adr r1, 80083d8 <_printf_i+0x40>)
 80083d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80083d8:	08008431 	.word	0x08008431
 80083dc:	08008445 	.word	0x08008445
 80083e0:	080083c1 	.word	0x080083c1
 80083e4:	080083c1 	.word	0x080083c1
 80083e8:	080083c1 	.word	0x080083c1
 80083ec:	080083c1 	.word	0x080083c1
 80083f0:	08008445 	.word	0x08008445
 80083f4:	080083c1 	.word	0x080083c1
 80083f8:	080083c1 	.word	0x080083c1
 80083fc:	080083c1 	.word	0x080083c1
 8008400:	080083c1 	.word	0x080083c1
 8008404:	08008551 	.word	0x08008551
 8008408:	08008475 	.word	0x08008475
 800840c:	08008533 	.word	0x08008533
 8008410:	080083c1 	.word	0x080083c1
 8008414:	080083c1 	.word	0x080083c1
 8008418:	08008573 	.word	0x08008573
 800841c:	080083c1 	.word	0x080083c1
 8008420:	08008475 	.word	0x08008475
 8008424:	080083c1 	.word	0x080083c1
 8008428:	080083c1 	.word	0x080083c1
 800842c:	0800853b 	.word	0x0800853b
 8008430:	682b      	ldr	r3, [r5, #0]
 8008432:	1d1a      	adds	r2, r3, #4
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	602a      	str	r2, [r5, #0]
 8008438:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800843c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008440:	2301      	movs	r3, #1
 8008442:	e0a3      	b.n	800858c <_printf_i+0x1f4>
 8008444:	6820      	ldr	r0, [r4, #0]
 8008446:	6829      	ldr	r1, [r5, #0]
 8008448:	0606      	lsls	r6, r0, #24
 800844a:	f101 0304 	add.w	r3, r1, #4
 800844e:	d50a      	bpl.n	8008466 <_printf_i+0xce>
 8008450:	680e      	ldr	r6, [r1, #0]
 8008452:	602b      	str	r3, [r5, #0]
 8008454:	2e00      	cmp	r6, #0
 8008456:	da03      	bge.n	8008460 <_printf_i+0xc8>
 8008458:	232d      	movs	r3, #45	; 0x2d
 800845a:	4276      	negs	r6, r6
 800845c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008460:	485e      	ldr	r0, [pc, #376]	; (80085dc <_printf_i+0x244>)
 8008462:	230a      	movs	r3, #10
 8008464:	e019      	b.n	800849a <_printf_i+0x102>
 8008466:	680e      	ldr	r6, [r1, #0]
 8008468:	602b      	str	r3, [r5, #0]
 800846a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800846e:	bf18      	it	ne
 8008470:	b236      	sxthne	r6, r6
 8008472:	e7ef      	b.n	8008454 <_printf_i+0xbc>
 8008474:	682b      	ldr	r3, [r5, #0]
 8008476:	6820      	ldr	r0, [r4, #0]
 8008478:	1d19      	adds	r1, r3, #4
 800847a:	6029      	str	r1, [r5, #0]
 800847c:	0601      	lsls	r1, r0, #24
 800847e:	d501      	bpl.n	8008484 <_printf_i+0xec>
 8008480:	681e      	ldr	r6, [r3, #0]
 8008482:	e002      	b.n	800848a <_printf_i+0xf2>
 8008484:	0646      	lsls	r6, r0, #25
 8008486:	d5fb      	bpl.n	8008480 <_printf_i+0xe8>
 8008488:	881e      	ldrh	r6, [r3, #0]
 800848a:	4854      	ldr	r0, [pc, #336]	; (80085dc <_printf_i+0x244>)
 800848c:	2f6f      	cmp	r7, #111	; 0x6f
 800848e:	bf0c      	ite	eq
 8008490:	2308      	moveq	r3, #8
 8008492:	230a      	movne	r3, #10
 8008494:	2100      	movs	r1, #0
 8008496:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800849a:	6865      	ldr	r5, [r4, #4]
 800849c:	60a5      	str	r5, [r4, #8]
 800849e:	2d00      	cmp	r5, #0
 80084a0:	bfa2      	ittt	ge
 80084a2:	6821      	ldrge	r1, [r4, #0]
 80084a4:	f021 0104 	bicge.w	r1, r1, #4
 80084a8:	6021      	strge	r1, [r4, #0]
 80084aa:	b90e      	cbnz	r6, 80084b0 <_printf_i+0x118>
 80084ac:	2d00      	cmp	r5, #0
 80084ae:	d04d      	beq.n	800854c <_printf_i+0x1b4>
 80084b0:	4615      	mov	r5, r2
 80084b2:	fbb6 f1f3 	udiv	r1, r6, r3
 80084b6:	fb03 6711 	mls	r7, r3, r1, r6
 80084ba:	5dc7      	ldrb	r7, [r0, r7]
 80084bc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80084c0:	4637      	mov	r7, r6
 80084c2:	42bb      	cmp	r3, r7
 80084c4:	460e      	mov	r6, r1
 80084c6:	d9f4      	bls.n	80084b2 <_printf_i+0x11a>
 80084c8:	2b08      	cmp	r3, #8
 80084ca:	d10b      	bne.n	80084e4 <_printf_i+0x14c>
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	07de      	lsls	r6, r3, #31
 80084d0:	d508      	bpl.n	80084e4 <_printf_i+0x14c>
 80084d2:	6923      	ldr	r3, [r4, #16]
 80084d4:	6861      	ldr	r1, [r4, #4]
 80084d6:	4299      	cmp	r1, r3
 80084d8:	bfde      	ittt	le
 80084da:	2330      	movle	r3, #48	; 0x30
 80084dc:	f805 3c01 	strble.w	r3, [r5, #-1]
 80084e0:	f105 35ff 	addle.w	r5, r5, #4294967295
 80084e4:	1b52      	subs	r2, r2, r5
 80084e6:	6122      	str	r2, [r4, #16]
 80084e8:	f8cd a000 	str.w	sl, [sp]
 80084ec:	464b      	mov	r3, r9
 80084ee:	aa03      	add	r2, sp, #12
 80084f0:	4621      	mov	r1, r4
 80084f2:	4640      	mov	r0, r8
 80084f4:	f7ff fee2 	bl	80082bc <_printf_common>
 80084f8:	3001      	adds	r0, #1
 80084fa:	d14c      	bne.n	8008596 <_printf_i+0x1fe>
 80084fc:	f04f 30ff 	mov.w	r0, #4294967295
 8008500:	b004      	add	sp, #16
 8008502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008506:	4835      	ldr	r0, [pc, #212]	; (80085dc <_printf_i+0x244>)
 8008508:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800850c:	6829      	ldr	r1, [r5, #0]
 800850e:	6823      	ldr	r3, [r4, #0]
 8008510:	f851 6b04 	ldr.w	r6, [r1], #4
 8008514:	6029      	str	r1, [r5, #0]
 8008516:	061d      	lsls	r5, r3, #24
 8008518:	d514      	bpl.n	8008544 <_printf_i+0x1ac>
 800851a:	07df      	lsls	r7, r3, #31
 800851c:	bf44      	itt	mi
 800851e:	f043 0320 	orrmi.w	r3, r3, #32
 8008522:	6023      	strmi	r3, [r4, #0]
 8008524:	b91e      	cbnz	r6, 800852e <_printf_i+0x196>
 8008526:	6823      	ldr	r3, [r4, #0]
 8008528:	f023 0320 	bic.w	r3, r3, #32
 800852c:	6023      	str	r3, [r4, #0]
 800852e:	2310      	movs	r3, #16
 8008530:	e7b0      	b.n	8008494 <_printf_i+0xfc>
 8008532:	6823      	ldr	r3, [r4, #0]
 8008534:	f043 0320 	orr.w	r3, r3, #32
 8008538:	6023      	str	r3, [r4, #0]
 800853a:	2378      	movs	r3, #120	; 0x78
 800853c:	4828      	ldr	r0, [pc, #160]	; (80085e0 <_printf_i+0x248>)
 800853e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008542:	e7e3      	b.n	800850c <_printf_i+0x174>
 8008544:	0659      	lsls	r1, r3, #25
 8008546:	bf48      	it	mi
 8008548:	b2b6      	uxthmi	r6, r6
 800854a:	e7e6      	b.n	800851a <_printf_i+0x182>
 800854c:	4615      	mov	r5, r2
 800854e:	e7bb      	b.n	80084c8 <_printf_i+0x130>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	6826      	ldr	r6, [r4, #0]
 8008554:	6961      	ldr	r1, [r4, #20]
 8008556:	1d18      	adds	r0, r3, #4
 8008558:	6028      	str	r0, [r5, #0]
 800855a:	0635      	lsls	r5, r6, #24
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	d501      	bpl.n	8008564 <_printf_i+0x1cc>
 8008560:	6019      	str	r1, [r3, #0]
 8008562:	e002      	b.n	800856a <_printf_i+0x1d2>
 8008564:	0670      	lsls	r0, r6, #25
 8008566:	d5fb      	bpl.n	8008560 <_printf_i+0x1c8>
 8008568:	8019      	strh	r1, [r3, #0]
 800856a:	2300      	movs	r3, #0
 800856c:	6123      	str	r3, [r4, #16]
 800856e:	4615      	mov	r5, r2
 8008570:	e7ba      	b.n	80084e8 <_printf_i+0x150>
 8008572:	682b      	ldr	r3, [r5, #0]
 8008574:	1d1a      	adds	r2, r3, #4
 8008576:	602a      	str	r2, [r5, #0]
 8008578:	681d      	ldr	r5, [r3, #0]
 800857a:	6862      	ldr	r2, [r4, #4]
 800857c:	2100      	movs	r1, #0
 800857e:	4628      	mov	r0, r5
 8008580:	f7f7 fe46 	bl	8000210 <memchr>
 8008584:	b108      	cbz	r0, 800858a <_printf_i+0x1f2>
 8008586:	1b40      	subs	r0, r0, r5
 8008588:	6060      	str	r0, [r4, #4]
 800858a:	6863      	ldr	r3, [r4, #4]
 800858c:	6123      	str	r3, [r4, #16]
 800858e:	2300      	movs	r3, #0
 8008590:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008594:	e7a8      	b.n	80084e8 <_printf_i+0x150>
 8008596:	6923      	ldr	r3, [r4, #16]
 8008598:	462a      	mov	r2, r5
 800859a:	4649      	mov	r1, r9
 800859c:	4640      	mov	r0, r8
 800859e:	47d0      	blx	sl
 80085a0:	3001      	adds	r0, #1
 80085a2:	d0ab      	beq.n	80084fc <_printf_i+0x164>
 80085a4:	6823      	ldr	r3, [r4, #0]
 80085a6:	079b      	lsls	r3, r3, #30
 80085a8:	d413      	bmi.n	80085d2 <_printf_i+0x23a>
 80085aa:	68e0      	ldr	r0, [r4, #12]
 80085ac:	9b03      	ldr	r3, [sp, #12]
 80085ae:	4298      	cmp	r0, r3
 80085b0:	bfb8      	it	lt
 80085b2:	4618      	movlt	r0, r3
 80085b4:	e7a4      	b.n	8008500 <_printf_i+0x168>
 80085b6:	2301      	movs	r3, #1
 80085b8:	4632      	mov	r2, r6
 80085ba:	4649      	mov	r1, r9
 80085bc:	4640      	mov	r0, r8
 80085be:	47d0      	blx	sl
 80085c0:	3001      	adds	r0, #1
 80085c2:	d09b      	beq.n	80084fc <_printf_i+0x164>
 80085c4:	3501      	adds	r5, #1
 80085c6:	68e3      	ldr	r3, [r4, #12]
 80085c8:	9903      	ldr	r1, [sp, #12]
 80085ca:	1a5b      	subs	r3, r3, r1
 80085cc:	42ab      	cmp	r3, r5
 80085ce:	dcf2      	bgt.n	80085b6 <_printf_i+0x21e>
 80085d0:	e7eb      	b.n	80085aa <_printf_i+0x212>
 80085d2:	2500      	movs	r5, #0
 80085d4:	f104 0619 	add.w	r6, r4, #25
 80085d8:	e7f5      	b.n	80085c6 <_printf_i+0x22e>
 80085da:	bf00      	nop
 80085dc:	080088a1 	.word	0x080088a1
 80085e0:	080088b2 	.word	0x080088b2

080085e4 <_sbrk_r>:
 80085e4:	b538      	push	{r3, r4, r5, lr}
 80085e6:	4d06      	ldr	r5, [pc, #24]	; (8008600 <_sbrk_r+0x1c>)
 80085e8:	2300      	movs	r3, #0
 80085ea:	4604      	mov	r4, r0
 80085ec:	4608      	mov	r0, r1
 80085ee:	602b      	str	r3, [r5, #0]
 80085f0:	f7f8 fcaa 	bl	8000f48 <_sbrk>
 80085f4:	1c43      	adds	r3, r0, #1
 80085f6:	d102      	bne.n	80085fe <_sbrk_r+0x1a>
 80085f8:	682b      	ldr	r3, [r5, #0]
 80085fa:	b103      	cbz	r3, 80085fe <_sbrk_r+0x1a>
 80085fc:	6023      	str	r3, [r4, #0]
 80085fe:	bd38      	pop	{r3, r4, r5, pc}
 8008600:	20002794 	.word	0x20002794

08008604 <__sread>:
 8008604:	b510      	push	{r4, lr}
 8008606:	460c      	mov	r4, r1
 8008608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800860c:	f000 f8a0 	bl	8008750 <_read_r>
 8008610:	2800      	cmp	r0, #0
 8008612:	bfab      	itete	ge
 8008614:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008616:	89a3      	ldrhlt	r3, [r4, #12]
 8008618:	181b      	addge	r3, r3, r0
 800861a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800861e:	bfac      	ite	ge
 8008620:	6563      	strge	r3, [r4, #84]	; 0x54
 8008622:	81a3      	strhlt	r3, [r4, #12]
 8008624:	bd10      	pop	{r4, pc}

08008626 <__swrite>:
 8008626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800862a:	461f      	mov	r7, r3
 800862c:	898b      	ldrh	r3, [r1, #12]
 800862e:	05db      	lsls	r3, r3, #23
 8008630:	4605      	mov	r5, r0
 8008632:	460c      	mov	r4, r1
 8008634:	4616      	mov	r6, r2
 8008636:	d505      	bpl.n	8008644 <__swrite+0x1e>
 8008638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800863c:	2302      	movs	r3, #2
 800863e:	2200      	movs	r2, #0
 8008640:	f000 f868 	bl	8008714 <_lseek_r>
 8008644:	89a3      	ldrh	r3, [r4, #12]
 8008646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800864a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800864e:	81a3      	strh	r3, [r4, #12]
 8008650:	4632      	mov	r2, r6
 8008652:	463b      	mov	r3, r7
 8008654:	4628      	mov	r0, r5
 8008656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800865a:	f000 b817 	b.w	800868c <_write_r>

0800865e <__sseek>:
 800865e:	b510      	push	{r4, lr}
 8008660:	460c      	mov	r4, r1
 8008662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008666:	f000 f855 	bl	8008714 <_lseek_r>
 800866a:	1c43      	adds	r3, r0, #1
 800866c:	89a3      	ldrh	r3, [r4, #12]
 800866e:	bf15      	itete	ne
 8008670:	6560      	strne	r0, [r4, #84]	; 0x54
 8008672:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008676:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800867a:	81a3      	strheq	r3, [r4, #12]
 800867c:	bf18      	it	ne
 800867e:	81a3      	strhne	r3, [r4, #12]
 8008680:	bd10      	pop	{r4, pc}

08008682 <__sclose>:
 8008682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008686:	f000 b813 	b.w	80086b0 <_close_r>
	...

0800868c <_write_r>:
 800868c:	b538      	push	{r3, r4, r5, lr}
 800868e:	4d07      	ldr	r5, [pc, #28]	; (80086ac <_write_r+0x20>)
 8008690:	4604      	mov	r4, r0
 8008692:	4608      	mov	r0, r1
 8008694:	4611      	mov	r1, r2
 8008696:	2200      	movs	r2, #0
 8008698:	602a      	str	r2, [r5, #0]
 800869a:	461a      	mov	r2, r3
 800869c:	f7f8 fc03 	bl	8000ea6 <_write>
 80086a0:	1c43      	adds	r3, r0, #1
 80086a2:	d102      	bne.n	80086aa <_write_r+0x1e>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	b103      	cbz	r3, 80086aa <_write_r+0x1e>
 80086a8:	6023      	str	r3, [r4, #0]
 80086aa:	bd38      	pop	{r3, r4, r5, pc}
 80086ac:	20002794 	.word	0x20002794

080086b0 <_close_r>:
 80086b0:	b538      	push	{r3, r4, r5, lr}
 80086b2:	4d06      	ldr	r5, [pc, #24]	; (80086cc <_close_r+0x1c>)
 80086b4:	2300      	movs	r3, #0
 80086b6:	4604      	mov	r4, r0
 80086b8:	4608      	mov	r0, r1
 80086ba:	602b      	str	r3, [r5, #0]
 80086bc:	f7f8 fc0f 	bl	8000ede <_close>
 80086c0:	1c43      	adds	r3, r0, #1
 80086c2:	d102      	bne.n	80086ca <_close_r+0x1a>
 80086c4:	682b      	ldr	r3, [r5, #0]
 80086c6:	b103      	cbz	r3, 80086ca <_close_r+0x1a>
 80086c8:	6023      	str	r3, [r4, #0]
 80086ca:	bd38      	pop	{r3, r4, r5, pc}
 80086cc:	20002794 	.word	0x20002794

080086d0 <_fstat_r>:
 80086d0:	b538      	push	{r3, r4, r5, lr}
 80086d2:	4d07      	ldr	r5, [pc, #28]	; (80086f0 <_fstat_r+0x20>)
 80086d4:	2300      	movs	r3, #0
 80086d6:	4604      	mov	r4, r0
 80086d8:	4608      	mov	r0, r1
 80086da:	4611      	mov	r1, r2
 80086dc:	602b      	str	r3, [r5, #0]
 80086de:	f7f8 fc0a 	bl	8000ef6 <_fstat>
 80086e2:	1c43      	adds	r3, r0, #1
 80086e4:	d102      	bne.n	80086ec <_fstat_r+0x1c>
 80086e6:	682b      	ldr	r3, [r5, #0]
 80086e8:	b103      	cbz	r3, 80086ec <_fstat_r+0x1c>
 80086ea:	6023      	str	r3, [r4, #0]
 80086ec:	bd38      	pop	{r3, r4, r5, pc}
 80086ee:	bf00      	nop
 80086f0:	20002794 	.word	0x20002794

080086f4 <_isatty_r>:
 80086f4:	b538      	push	{r3, r4, r5, lr}
 80086f6:	4d06      	ldr	r5, [pc, #24]	; (8008710 <_isatty_r+0x1c>)
 80086f8:	2300      	movs	r3, #0
 80086fa:	4604      	mov	r4, r0
 80086fc:	4608      	mov	r0, r1
 80086fe:	602b      	str	r3, [r5, #0]
 8008700:	f7f8 fc09 	bl	8000f16 <_isatty>
 8008704:	1c43      	adds	r3, r0, #1
 8008706:	d102      	bne.n	800870e <_isatty_r+0x1a>
 8008708:	682b      	ldr	r3, [r5, #0]
 800870a:	b103      	cbz	r3, 800870e <_isatty_r+0x1a>
 800870c:	6023      	str	r3, [r4, #0]
 800870e:	bd38      	pop	{r3, r4, r5, pc}
 8008710:	20002794 	.word	0x20002794

08008714 <_lseek_r>:
 8008714:	b538      	push	{r3, r4, r5, lr}
 8008716:	4d07      	ldr	r5, [pc, #28]	; (8008734 <_lseek_r+0x20>)
 8008718:	4604      	mov	r4, r0
 800871a:	4608      	mov	r0, r1
 800871c:	4611      	mov	r1, r2
 800871e:	2200      	movs	r2, #0
 8008720:	602a      	str	r2, [r5, #0]
 8008722:	461a      	mov	r2, r3
 8008724:	f7f8 fc02 	bl	8000f2c <_lseek>
 8008728:	1c43      	adds	r3, r0, #1
 800872a:	d102      	bne.n	8008732 <_lseek_r+0x1e>
 800872c:	682b      	ldr	r3, [r5, #0]
 800872e:	b103      	cbz	r3, 8008732 <_lseek_r+0x1e>
 8008730:	6023      	str	r3, [r4, #0]
 8008732:	bd38      	pop	{r3, r4, r5, pc}
 8008734:	20002794 	.word	0x20002794

08008738 <__malloc_lock>:
 8008738:	4801      	ldr	r0, [pc, #4]	; (8008740 <__malloc_lock+0x8>)
 800873a:	f7ff bb1d 	b.w	8007d78 <__retarget_lock_acquire_recursive>
 800873e:	bf00      	nop
 8008740:	20002789 	.word	0x20002789

08008744 <__malloc_unlock>:
 8008744:	4801      	ldr	r0, [pc, #4]	; (800874c <__malloc_unlock+0x8>)
 8008746:	f7ff bb18 	b.w	8007d7a <__retarget_lock_release_recursive>
 800874a:	bf00      	nop
 800874c:	20002789 	.word	0x20002789

08008750 <_read_r>:
 8008750:	b538      	push	{r3, r4, r5, lr}
 8008752:	4d07      	ldr	r5, [pc, #28]	; (8008770 <_read_r+0x20>)
 8008754:	4604      	mov	r4, r0
 8008756:	4608      	mov	r0, r1
 8008758:	4611      	mov	r1, r2
 800875a:	2200      	movs	r2, #0
 800875c:	602a      	str	r2, [r5, #0]
 800875e:	461a      	mov	r2, r3
 8008760:	f7f8 fb84 	bl	8000e6c <_read>
 8008764:	1c43      	adds	r3, r0, #1
 8008766:	d102      	bne.n	800876e <_read_r+0x1e>
 8008768:	682b      	ldr	r3, [r5, #0]
 800876a:	b103      	cbz	r3, 800876e <_read_r+0x1e>
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	bd38      	pop	{r3, r4, r5, pc}
 8008770:	20002794 	.word	0x20002794

08008774 <_init>:
 8008774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008776:	bf00      	nop
 8008778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800877a:	bc08      	pop	{r3}
 800877c:	469e      	mov	lr, r3
 800877e:	4770      	bx	lr

08008780 <_fini>:
 8008780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008782:	bf00      	nop
 8008784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008786:	bc08      	pop	{r3}
 8008788:	469e      	mov	lr, r3
 800878a:	4770      	bx	lr
